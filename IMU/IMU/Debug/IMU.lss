
IMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00002fd2  00003066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800140  00800140  000030a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000030a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00003144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f33  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001225  00000000  00000000  0000522f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f0e  00000000  00000000  00006454  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00008364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b88  00000000  00000000  0000888c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0c  00000000  00000000  00009414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00009e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__vector_12>
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2d c0       	rjmp	.+90     	; 0xe8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2b c0       	rjmp	.+86     	; 0xe8 <__bad_interrupt>
      92:	00 00       	nop
      94:	f0 01       	movw	r30, r0
      96:	e6 02       	muls	r30, r22
      98:	d0 03       	fmuls	r21, r16
      9a:	9e 04       	cpc	r9, r14
      9c:	21 05       	cpc	r18, r1
      9e:	b1 05       	cpc	r27, r1
      a0:	4b 06       	cpc	r4, r27
      a2:	71 07       	cpc	r23, r17
      a4:	a4 08       	sbc	r10, r4
      a6:	e1 09       	sbc	r30, r1
      a8:	97 0a       	sbc	r9, r23

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e2 ed       	ldi	r30, 0xD2	; 210
      be:	ff e2       	ldi	r31, 0x2F	; 47
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a0 34       	cpi	r26, 0x40	; 64
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	a0 e4       	ldi	r26, 0x40	; 64
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a4 36       	cpi	r26, 0x64	; 100
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 3f 11 	call	0x227e	; 0x227e <main>
      e4:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	00 d0       	rcall	.+0      	; 0xf0 <can_clear_all_mob+0x6>
      f0:	1f 92       	push	r1
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1d c0       	rjmp	.+58     	; 0x134 <can_clear_all_mob+0x4a>
      fa:	8d ee       	ldi	r24, 0xED	; 237
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	22 95       	swap	r18
     102:	20 7f       	andi	r18, 0xF0	; 240
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
     108:	8e ee       	ldi	r24, 0xEE	; 238
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	9b 83       	std	Y+3, r25	; 0x03
     10e:	8a 83       	std	Y+2, r24	; 0x02
     110:	09 c0       	rjmp	.+18     	; 0x124 <can_clear_all_mob+0x3a>
     112:	8a 81       	ldd	r24, Y+2	; 0x02
     114:	9b 81       	ldd	r25, Y+3	; 0x03
     116:	fc 01       	movw	r30, r24
     118:	10 82       	st	Z, r1
     11a:	8a 81       	ldd	r24, Y+2	; 0x02
     11c:	9b 81       	ldd	r25, Y+3	; 0x03
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	9b 83       	std	Y+3, r25	; 0x03
     122:	8a 83       	std	Y+2, r24	; 0x02
     124:	8a 81       	ldd	r24, Y+2	; 0x02
     126:	9b 81       	ldd	r25, Y+3	; 0x03
     128:	88 3f       	cpi	r24, 0xF8	; 248
     12a:	91 05       	cpc	r25, r1
     12c:	90 f3       	brcs	.-28     	; 0x112 <can_clear_all_mob+0x28>
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	8f 5f       	subi	r24, 0xFF	; 255
     132:	89 83       	std	Y+1, r24	; 0x01
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	8f 30       	cpi	r24, 0x0F	; 15
     138:	00 f3       	brcs	.-64     	; 0xfa <can_clear_all_mob+0x10>
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <can_get_mob_free>:
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	00 d0       	rcall	.+0      	; 0x14c <can_get_mob_free+0x6>
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	8d ee       	ldi	r24, 0xED	; 237
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	fc 01       	movw	r30, r24
     156:	80 81       	ld	r24, Z
     158:	8a 83       	std	Y+2, r24	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	1b c0       	rjmp	.+54     	; 0x194 <can_get_mob_free+0x4e>
     15e:	8d ee       	ldi	r24, 0xED	; 237
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	29 81       	ldd	r18, Y+1	; 0x01
     164:	22 95       	swap	r18
     166:	20 7f       	andi	r18, 0xF0	; 240
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
     16c:	8f ee       	ldi	r24, 0xEF	; 239
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	fc 01       	movw	r30, r24
     172:	80 81       	ld	r24, Z
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 7c       	andi	r24, 0xC0	; 192
     17a:	99 27       	eor	r25, r25
     17c:	89 2b       	or	r24, r25
     17e:	39 f4       	brne	.+14     	; 0x18e <can_get_mob_free+0x48>
     180:	8d ee       	ldi	r24, 0xED	; 237
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	2a 81       	ldd	r18, Y+2	; 0x02
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	0c c0       	rjmp	.+24     	; 0x1a6 <can_get_mob_free+0x60>
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	8f 5f       	subi	r24, 0xFF	; 255
     192:	89 83       	std	Y+1, r24	; 0x01
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	8f 30       	cpi	r24, 0x0F	; 15
     198:	10 f3       	brcs	.-60     	; 0x15e <can_get_mob_free+0x18>
     19a:	8d ee       	ldi	r24, 0xED	; 237
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	2a 81       	ldd	r18, Y+2	; 0x02
     1a0:	fc 01       	movw	r30, r24
     1a2:	20 83       	st	Z, r18
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <can_get_mob_status>:
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <can_get_mob_status+0x6>
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	8f ee       	ldi	r24, 0xEF	; 239
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	fc 01       	movw	r30, r24
     1c0:	80 81       	ld	r24, Z
     1c2:	88 2f       	mov	r24, r24
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	80 7c       	andi	r24, 0xC0	; 192
     1c8:	99 27       	eor	r25, r25
     1ca:	89 2b       	or	r24, r25
     1cc:	11 f4       	brne	.+4      	; 0x1d2 <can_get_mob_status+0x22>
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	1c c0       	rjmp	.+56     	; 0x20a <can_get_mob_status+0x5a>
     1d2:	8e ee       	ldi	r24, 0xEE	; 238
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	89 83       	std	Y+1, r24	; 0x01
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	80 7e       	andi	r24, 0xE0	; 224
     1e0:	8a 83       	std	Y+2, r24	; 0x02
     1e2:	8a 81       	ldd	r24, Y+2	; 0x02
     1e4:	80 32       	cpi	r24, 0x20	; 32
     1e6:	31 f0       	breq	.+12     	; 0x1f4 <can_get_mob_status+0x44>
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	80 34       	cpi	r24, 0x40	; 64
     1ec:	19 f0       	breq	.+6      	; 0x1f4 <can_get_mob_status+0x44>
     1ee:	8a 81       	ldd	r24, Y+2	; 0x02
     1f0:	80 3a       	cpi	r24, 0xA0	; 160
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <can_get_mob_status+0x48>
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	09 c0       	rjmp	.+18     	; 0x20a <can_get_mob_status+0x5a>
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	8f 71       	andi	r24, 0x1F	; 31
     1fc:	8a 83       	std	Y+2, r24	; 0x02
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	88 23       	and	r24, r24
     202:	11 f0       	breq	.+4      	; 0x208 <can_get_mob_status+0x58>
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	01 c0       	rjmp	.+2      	; 0x20a <can_get_mob_status+0x5a>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <can_get_data>:
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <can_get_data+0x6>
     21a:	1f 92       	push	r1
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	9b 83       	std	Y+3, r25	; 0x03
     222:	8a 83       	std	Y+2, r24	; 0x02
     224:	19 82       	std	Y+1, r1	; 0x01
     226:	10 c0       	rjmp	.+32     	; 0x248 <can_get_data+0x34>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	88 2f       	mov	r24, r24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	2a 81       	ldd	r18, Y+2	; 0x02
     230:	3b 81       	ldd	r19, Y+3	; 0x03
     232:	82 0f       	add	r24, r18
     234:	93 1f       	adc	r25, r19
     236:	2a ef       	ldi	r18, 0xFA	; 250
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	f9 01       	movw	r30, r18
     23c:	20 81       	ld	r18, Z
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	28 2f       	mov	r18, r24
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	8f ee       	ldi	r24, 0xEF	; 239
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	8f 70       	andi	r24, 0x0F	; 15
     25c:	99 27       	eor	r25, r25
     25e:	28 17       	cp	r18, r24
     260:	39 07       	cpc	r19, r25
     262:	14 f3       	brlt	.-60     	; 0x228 <can_get_data+0x14>
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     27c:	88 ed       	ldi	r24, 0xD8	; 216
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
    Can_conf_bt();
     286:	82 ee       	ldi	r24, 0xE2	; 226
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	26 e0       	ldi	r18, 0x06	; 6
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
     290:	83 ee       	ldi	r24, 0xE3	; 227
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	24 e0       	ldi	r18, 0x04	; 4
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
     29a:	84 ee       	ldi	r24, 0xE4	; 228
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	23 e1       	ldi	r18, 0x13	; 19
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
    return 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
}
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	1f 92       	push	r1
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	d9 df       	rcall	.-78     	; 0x270 <can_fixed_baudrate>
     2be:	88 23       	and	r24, r24
     2c0:	11 f4       	brne	.+4      	; 0x2c6 <can_init+0x18>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0b c0       	rjmp	.+22     	; 0x2dc <can_init+0x2e>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     2c6:	11 df       	rcall	.-478    	; 0xea <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     2c8:	88 ed       	ldi	r24, 0xD8	; 216
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	28 ed       	ldi	r18, 0xD8	; 216
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	f9 01       	movw	r30, r18
     2d2:	20 81       	ld	r18, Z
     2d4:	22 60       	ori	r18, 0x02	; 2
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
    return (1);
     2da:	81 e0       	ldi	r24, 0x01	; 1
}
     2dc:	0f 90       	pop	r0
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	08 95       	ret

000002e4 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	2a 97       	sbiw	r28, 0x0a	; 10
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	9a 87       	std	Y+10, r25	; 0x0a
     2fa:	89 87       	std	Y+9, r24	; 0x09
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     2fc:	89 85       	ldd	r24, Y+9	; 0x09
     2fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     300:	fc 01       	movw	r30, r24
     302:	81 81       	ldd	r24, Z+1	; 0x01
     304:	8c 30       	cpi	r24, 0x0C	; 12
     306:	39 f5       	brne	.+78     	; 0x356 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     308:	89 85       	ldd	r24, Y+9	; 0x09
     30a:	9a 85       	ldd	r25, Y+10	; 0x0a
     30c:	fc 01       	movw	r30, r24
     30e:	81 85       	ldd	r24, Z+9	; 0x09
     310:	80 36       	cpi	r24, 0x60	; 96
     312:	d9 f4       	brne	.+54     	; 0x34a <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     314:	8d ee       	ldi	r24, 0xED	; 237
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	29 85       	ldd	r18, Y+9	; 0x09
     31a:	3a 85       	ldd	r19, Y+10	; 0x0a
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	22 95       	swap	r18
     322:	20 7f       	andi	r18, 0xF0	; 240
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
      Can_mob_abort();
     328:	8f ee       	ldi	r24, 0xEF	; 239
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	2f ee       	ldi	r18, 0xEF	; 239
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	2f 73       	andi	r18, 0x3F	; 63
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     33a:	8e ee       	ldi	r24, 0xEE	; 238
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	fc 01       	movw	r30, r24
     340:	10 82       	st	Z, r1
      cmd->handle = 0;
     342:	89 85       	ldd	r24, Y+9	; 0x09
     344:	9a 85       	ldd	r25, Y+10	; 0x0a
     346:	fc 01       	movw	r30, r24
     348:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     34a:	89 85       	ldd	r24, Y+9	; 0x09
     34c:	9a 85       	ldd	r25, Y+10	; 0x0a
     34e:	fc 01       	movw	r30, r24
     350:	11 86       	std	Z+9, r1	; 0x09
     352:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__stack+0x6fb>
  }
  else
  {
    mob_handle = can_get_mob_free();
     356:	f7 de       	rcall	.-530    	; 0x146 <can_get_mob_free>
     358:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	8f 3f       	cpi	r24, 0xFF	; 255
     35e:	11 f4       	brne	.+4      	; 0x364 <can_cmd+0x80>
     360:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__stack+0x6ed>
    {
      cmd->status = MOB_PENDING; 
     364:	89 85       	ldd	r24, Y+9	; 0x09
     366:	9a 85       	ldd	r25, Y+10	; 0x0a
     368:	20 e6       	ldi	r18, 0x60	; 96
     36a:	fc 01       	movw	r30, r24
     36c:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     36e:	89 85       	ldd	r24, Y+9	; 0x09
     370:	9a 85       	ldd	r25, Y+10	; 0x0a
     372:	2c 81       	ldd	r18, Y+4	; 0x04
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     378:	8d ee       	ldi	r24, 0xED	; 237
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	2c 81       	ldd	r18, Y+4	; 0x04
     37e:	22 95       	swap	r18
     380:	20 7f       	andi	r18, 0xF0	; 240
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
      Can_clear_mob();
     386:	8e ee       	ldi	r24, 0xEE	; 238
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9b 83       	std	Y+3, r25	; 0x03
     38c:	8a 83       	std	Y+2, r24	; 0x02
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <can_cmd+0xbe>
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	9b 81       	ldd	r25, Y+3	; 0x03
     394:	fc 01       	movw	r30, r24
     396:	10 82       	st	Z, r1
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	9b 83       	std	Y+3, r25	; 0x03
     3a0:	8a 83       	std	Y+2, r24	; 0x02
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	9b 81       	ldd	r25, Y+3	; 0x03
     3a6:	88 3f       	cpi	r24, 0xF8	; 248
     3a8:	91 05       	cpc	r25, r1
     3aa:	90 f3       	brcs	.-28     	; 0x390 <can_cmd+0xac>
          
      switch (cmd->cmd)
     3ac:	89 85       	ldd	r24, Y+9	; 0x09
     3ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b0:	fc 01       	movw	r30, r24
     3b2:	81 81       	ldd	r24, Z+1	; 0x01
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	09 2e       	mov	r0, r25
     3ba:	00 0c       	add	r0, r0
     3bc:	aa 0b       	sbc	r26, r26
     3be:	bb 0b       	sbc	r27, r27
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	2a e0       	ldi	r18, 0x0A	; 10
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	84 1b       	sub	r24, r20
     3ca:	95 0b       	sbc	r25, r21
     3cc:	28 17       	cp	r18, r24
     3ce:	39 07       	cpc	r19, r25
     3d0:	10 f4       	brcc	.+4      	; 0x3d6 <can_cmd+0xf2>
     3d2:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__stack+0x6e1>
     3d6:	86 5b       	subi	r24, 0xB6	; 182
     3d8:	9f 4f       	sbci	r25, 0xFF	; 255
     3da:	fc 01       	movw	r30, r24
     3dc:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     3e0:	89 85       	ldd	r24, Y+9	; 0x09
     3e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e4:	fc 01       	movw	r30, r24
     3e6:	83 85       	ldd	r24, Z+11	; 0x0b
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <can_cmd+0x10a>
     3ec:	69 c0       	rjmp	.+210    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     3ee:	83 ef       	ldi	r24, 0xF3	; 243
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	29 85       	ldd	r18, Y+9	; 0x09
     3f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     3f6:	2e 5f       	subi	r18, 0xFE	; 254
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	2d 5f       	subi	r18, 0xFD	; 253
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	f9 01       	movw	r30, r18
     400:	20 81       	ld	r18, Z
     402:	42 2f       	mov	r20, r18
     404:	44 0f       	add	r20, r20
     406:	44 0f       	add	r20, r20
     408:	44 0f       	add	r20, r20
     40a:	29 85       	ldd	r18, Y+9	; 0x09
     40c:	3a 85       	ldd	r19, Y+10	; 0x0a
     40e:	2e 5f       	subi	r18, 0xFE	; 254
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	2e 5f       	subi	r18, 0xFE	; 254
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	22 95       	swap	r18
     41c:	26 95       	lsr	r18
     41e:	27 70       	andi	r18, 0x07	; 7
     420:	24 0f       	add	r18, r20
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
     426:	82 ef       	ldi	r24, 0xF2	; 242
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	29 85       	ldd	r18, Y+9	; 0x09
     42c:	3a 85       	ldd	r19, Y+10	; 0x0a
     42e:	2e 5f       	subi	r18, 0xFE	; 254
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	2e 5f       	subi	r18, 0xFE	; 254
     434:	3f 4f       	sbci	r19, 0xFF	; 255
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	42 2f       	mov	r20, r18
     43c:	44 0f       	add	r20, r20
     43e:	44 0f       	add	r20, r20
     440:	44 0f       	add	r20, r20
     442:	29 85       	ldd	r18, Y+9	; 0x09
     444:	3a 85       	ldd	r19, Y+10	; 0x0a
     446:	2e 5f       	subi	r18, 0xFE	; 254
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	2f 5f       	subi	r18, 0xFF	; 255
     44c:	3f 4f       	sbci	r19, 0xFF	; 255
     44e:	f9 01       	movw	r30, r18
     450:	20 81       	ld	r18, Z
     452:	22 95       	swap	r18
     454:	26 95       	lsr	r18
     456:	27 70       	andi	r18, 0x07	; 7
     458:	24 0f       	add	r18, r20
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
     45e:	81 ef       	ldi	r24, 0xF1	; 241
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	29 85       	ldd	r18, Y+9	; 0x09
     464:	3a 85       	ldd	r19, Y+10	; 0x0a
     466:	2e 5f       	subi	r18, 0xFE	; 254
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	f9 01       	movw	r30, r18
     470:	20 81       	ld	r18, Z
     472:	42 2f       	mov	r20, r18
     474:	44 0f       	add	r20, r20
     476:	44 0f       	add	r20, r20
     478:	44 0f       	add	r20, r20
     47a:	29 85       	ldd	r18, Y+9	; 0x09
     47c:	3a 85       	ldd	r19, Y+10	; 0x0a
     47e:	2e 5f       	subi	r18, 0xFE	; 254
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	22 95       	swap	r18
     488:	26 95       	lsr	r18
     48a:	27 70       	andi	r18, 0x07	; 7
     48c:	24 0f       	add	r18, r20
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
     492:	80 ef       	ldi	r24, 0xF0	; 240
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	29 85       	ldd	r18, Y+9	; 0x09
     498:	3a 85       	ldd	r19, Y+10	; 0x0a
     49a:	2e 5f       	subi	r18, 0xFE	; 254
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	22 0f       	add	r18, r18
     4a4:	22 0f       	add	r18, r18
     4a6:	22 0f       	add	r18, r18
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
     4ac:	8f ee       	ldi	r24, 0xEF	; 239
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	2f ee       	ldi	r18, 0xEF	; 239
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	20 81       	ld	r18, Z
     4b8:	20 61       	ori	r18, 0x10	; 16
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
     4be:	30 c0       	rjmp	.+96     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
          else              { Can_set_std_id(cmd->id.std);}
     4c0:	83 ef       	ldi	r24, 0xF3	; 243
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	29 85       	ldd	r18, Y+9	; 0x09
     4c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4c8:	2e 5f       	subi	r18, 0xFE	; 254
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	2f 5f       	subi	r18, 0xFF	; 255
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	42 2f       	mov	r20, r18
     4d6:	42 95       	swap	r20
     4d8:	44 0f       	add	r20, r20
     4da:	40 7e       	andi	r20, 0xE0	; 224
     4dc:	29 85       	ldd	r18, Y+9	; 0x09
     4de:	3a 85       	ldd	r19, Y+10	; 0x0a
     4e0:	2e 5f       	subi	r18, 0xFE	; 254
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	26 95       	lsr	r18
     4ea:	26 95       	lsr	r18
     4ec:	26 95       	lsr	r18
     4ee:	24 0f       	add	r18, r20
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
     4f4:	82 ef       	ldi	r24, 0xF2	; 242
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	29 85       	ldd	r18, Y+9	; 0x09
     4fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     4fc:	2e 5f       	subi	r18, 0xFE	; 254
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	22 95       	swap	r18
     506:	22 0f       	add	r18, r18
     508:	20 7e       	andi	r18, 0xE0	; 224
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
     50e:	8f ee       	ldi	r24, 0xEF	; 239
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	2f ee       	ldi	r18, 0xEF	; 239
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	2f 7e       	andi	r18, 0xEF	; 239
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     520:	19 82       	std	Y+1, r1	; 0x01
     522:	13 c0       	rjmp	.+38     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     524:	8a ef       	ldi	r24, 0xFA	; 250
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	29 85       	ldd	r18, Y+9	; 0x09
     52a:	3a 85       	ldd	r19, Y+10	; 0x0a
     52c:	f9 01       	movw	r30, r18
     52e:	47 81       	ldd	r20, Z+7	; 0x07
     530:	50 85       	ldd	r21, Z+8	; 0x08
     532:	29 81       	ldd	r18, Y+1	; 0x01
     534:	22 2f       	mov	r18, r18
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	24 0f       	add	r18, r20
     53a:	35 1f       	adc	r19, r21
     53c:	f9 01       	movw	r30, r18
     53e:	20 81       	ld	r18, Z
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	89 85       	ldd	r24, Y+9	; 0x09
     54c:	9a 85       	ldd	r25, Y+10	; 0x0a
     54e:	fc 01       	movw	r30, r24
     550:	96 81       	ldd	r25, Z+6	; 0x06
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	89 17       	cp	r24, r25
     556:	30 f3       	brcs	.-52     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     558:	89 85       	ldd	r24, Y+9	; 0x09
     55a:	9a 85       	ldd	r25, Y+10	; 0x0a
     55c:	fc 01       	movw	r30, r24
     55e:	82 85       	ldd	r24, Z+10	; 0x0a
     560:	88 23       	and	r24, r24
     562:	51 f0       	breq	.+20     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     564:	80 ef       	ldi	r24, 0xF0	; 240
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	20 ef       	ldi	r18, 0xF0	; 240
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	f9 01       	movw	r30, r18
     56e:	20 81       	ld	r18, Z
     570:	24 60       	ori	r18, 0x04	; 4
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
     576:	09 c0       	rjmp	.+18     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
            else Can_clear_rtr();    
     578:	80 ef       	ldi	r24, 0xF0	; 240
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	20 ef       	ldi	r18, 0xF0	; 240
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z
     584:	2b 7f       	andi	r18, 0xFB	; 251
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     58a:	8f ee       	ldi	r24, 0xEF	; 239
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	2f ee       	ldi	r18, 0xEF	; 239
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	40 81       	ld	r20, Z
     596:	29 85       	ldd	r18, Y+9	; 0x09
     598:	3a 85       	ldd	r19, Y+10	; 0x0a
     59a:	f9 01       	movw	r30, r18
     59c:	26 81       	ldd	r18, Z+6	; 0x06
     59e:	24 2b       	or	r18, r20
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
          Can_config_tx();
     5a4:	8f ee       	ldi	r24, 0xEF	; 239
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	2f ee       	ldi	r18, 0xEF	; 239
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	f9 01       	movw	r30, r18
     5ae:	20 81       	ld	r18, Z
     5b0:	2f 73       	andi	r18, 0x3F	; 63
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
     5b6:	8f ee       	ldi	r24, 0xEF	; 239
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	2f ee       	ldi	r18, 0xEF	; 239
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	f9 01       	movw	r30, r18
     5c0:	20 81       	ld	r18, Z
     5c2:	20 64       	ori	r18, 0x40	; 64
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 83       	st	Z, r18
          break;
     5c8:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     5cc:	89 85       	ldd	r24, Y+9	; 0x09
     5ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d0:	fc 01       	movw	r30, r24
     5d2:	83 85       	ldd	r24, Z+11	; 0x0b
     5d4:	88 23       	and	r24, r24
     5d6:	09 f4       	brne	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     5d8:	69 c0       	rjmp	.+210    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     5da:	83 ef       	ldi	r24, 0xF3	; 243
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	29 85       	ldd	r18, Y+9	; 0x09
     5e0:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e2:	2e 5f       	subi	r18, 0xFE	; 254
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	2d 5f       	subi	r18, 0xFD	; 253
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	42 2f       	mov	r20, r18
     5f0:	44 0f       	add	r20, r20
     5f2:	44 0f       	add	r20, r20
     5f4:	44 0f       	add	r20, r20
     5f6:	29 85       	ldd	r18, Y+9	; 0x09
     5f8:	3a 85       	ldd	r19, Y+10	; 0x0a
     5fa:	2e 5f       	subi	r18, 0xFE	; 254
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255
     5fe:	2e 5f       	subi	r18, 0xFE	; 254
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	f9 01       	movw	r30, r18
     604:	20 81       	ld	r18, Z
     606:	22 95       	swap	r18
     608:	26 95       	lsr	r18
     60a:	27 70       	andi	r18, 0x07	; 7
     60c:	24 0f       	add	r18, r20
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
     612:	82 ef       	ldi	r24, 0xF2	; 242
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	29 85       	ldd	r18, Y+9	; 0x09
     618:	3a 85       	ldd	r19, Y+10	; 0x0a
     61a:	2e 5f       	subi	r18, 0xFE	; 254
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	2e 5f       	subi	r18, 0xFE	; 254
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	42 2f       	mov	r20, r18
     628:	44 0f       	add	r20, r20
     62a:	44 0f       	add	r20, r20
     62c:	44 0f       	add	r20, r20
     62e:	29 85       	ldd	r18, Y+9	; 0x09
     630:	3a 85       	ldd	r19, Y+10	; 0x0a
     632:	2e 5f       	subi	r18, 0xFE	; 254
     634:	3f 4f       	sbci	r19, 0xFF	; 255
     636:	2f 5f       	subi	r18, 0xFF	; 255
     638:	3f 4f       	sbci	r19, 0xFF	; 255
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	22 95       	swap	r18
     640:	26 95       	lsr	r18
     642:	27 70       	andi	r18, 0x07	; 7
     644:	24 0f       	add	r18, r20
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
     64a:	81 ef       	ldi	r24, 0xF1	; 241
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	29 85       	ldd	r18, Y+9	; 0x09
     650:	3a 85       	ldd	r19, Y+10	; 0x0a
     652:	2e 5f       	subi	r18, 0xFE	; 254
     654:	3f 4f       	sbci	r19, 0xFF	; 255
     656:	2f 5f       	subi	r18, 0xFF	; 255
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	42 2f       	mov	r20, r18
     660:	44 0f       	add	r20, r20
     662:	44 0f       	add	r20, r20
     664:	44 0f       	add	r20, r20
     666:	29 85       	ldd	r18, Y+9	; 0x09
     668:	3a 85       	ldd	r19, Y+10	; 0x0a
     66a:	2e 5f       	subi	r18, 0xFE	; 254
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	f9 01       	movw	r30, r18
     670:	20 81       	ld	r18, Z
     672:	22 95       	swap	r18
     674:	26 95       	lsr	r18
     676:	27 70       	andi	r18, 0x07	; 7
     678:	24 0f       	add	r18, r20
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
     67e:	80 ef       	ldi	r24, 0xF0	; 240
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	29 85       	ldd	r18, Y+9	; 0x09
     684:	3a 85       	ldd	r19, Y+10	; 0x0a
     686:	2e 5f       	subi	r18, 0xFE	; 254
     688:	3f 4f       	sbci	r19, 0xFF	; 255
     68a:	f9 01       	movw	r30, r18
     68c:	20 81       	ld	r18, Z
     68e:	22 0f       	add	r18, r18
     690:	22 0f       	add	r18, r18
     692:	22 0f       	add	r18, r18
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
     698:	8f ee       	ldi	r24, 0xEF	; 239
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2f ee       	ldi	r18, 0xEF	; 239
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	20 61       	ori	r18, 0x10	; 16
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
     6aa:	30 c0       	rjmp	.+96     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
          else              { Can_set_std_id(cmd->id.std);}
     6ac:	83 ef       	ldi	r24, 0xF3	; 243
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	29 85       	ldd	r18, Y+9	; 0x09
     6b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6b4:	2e 5f       	subi	r18, 0xFE	; 254
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	42 2f       	mov	r20, r18
     6c2:	42 95       	swap	r20
     6c4:	44 0f       	add	r20, r20
     6c6:	40 7e       	andi	r20, 0xE0	; 224
     6c8:	29 85       	ldd	r18, Y+9	; 0x09
     6ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     6cc:	2e 5f       	subi	r18, 0xFE	; 254
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	26 95       	lsr	r18
     6d6:	26 95       	lsr	r18
     6d8:	26 95       	lsr	r18
     6da:	24 0f       	add	r18, r20
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
     6e0:	82 ef       	ldi	r24, 0xF2	; 242
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	29 85       	ldd	r18, Y+9	; 0x09
     6e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e8:	2e 5f       	subi	r18, 0xFE	; 254
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	22 95       	swap	r18
     6f2:	22 0f       	add	r18, r18
     6f4:	20 7e       	andi	r18, 0xE0	; 224
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
     6fa:	8f ee       	ldi	r24, 0xEF	; 239
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	2f ee       	ldi	r18, 0xEF	; 239
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	2f 7e       	andi	r18, 0xEF	; 239
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     70c:	19 82       	std	Y+1, r1	; 0x01
     70e:	13 c0       	rjmp	.+38     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     710:	8a ef       	ldi	r24, 0xFA	; 250
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	29 85       	ldd	r18, Y+9	; 0x09
     716:	3a 85       	ldd	r19, Y+10	; 0x0a
     718:	f9 01       	movw	r30, r18
     71a:	47 81       	ldd	r20, Z+7	; 0x07
     71c:	50 85       	ldd	r21, Z+8	; 0x08
     71e:	29 81       	ldd	r18, Y+1	; 0x01
     720:	22 2f       	mov	r18, r18
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	24 0f       	add	r18, r20
     726:	35 1f       	adc	r19, r21
     728:	f9 01       	movw	r30, r18
     72a:	20 81       	ld	r18, Z
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	89 85       	ldd	r24, Y+9	; 0x09
     738:	9a 85       	ldd	r25, Y+10	; 0x0a
     73a:	fc 01       	movw	r30, r24
     73c:	96 81       	ldd	r25, Z+6	; 0x06
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	89 17       	cp	r24, r25
     742:	30 f3       	brcs	.-52     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     744:	89 85       	ldd	r24, Y+9	; 0x09
     746:	9a 85       	ldd	r25, Y+10	; 0x0a
     748:	fc 01       	movw	r30, r24
     74a:	12 86       	std	Z+10, r1	; 0x0a
     74c:	80 ef       	ldi	r24, 0xF0	; 240
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	20 ef       	ldi	r18, 0xF0	; 240
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	f9 01       	movw	r30, r18
     756:	20 81       	ld	r18, Z
     758:	2b 7f       	andi	r18, 0xFB	; 251
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     75e:	8f ee       	ldi	r24, 0xEF	; 239
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	2f ee       	ldi	r18, 0xEF	; 239
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	f9 01       	movw	r30, r18
     768:	40 81       	ld	r20, Z
     76a:	29 85       	ldd	r18, Y+9	; 0x09
     76c:	3a 85       	ldd	r19, Y+10	; 0x0a
     76e:	f9 01       	movw	r30, r18
     770:	26 81       	ldd	r18, Z+6	; 0x06
     772:	24 2b       	or	r18, r20
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
          Can_config_tx();
     778:	8f ee       	ldi	r24, 0xEF	; 239
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	2f ee       	ldi	r18, 0xEF	; 239
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	2f 73       	andi	r18, 0x3F	; 63
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
     78a:	8f ee       	ldi	r24, 0xEF	; 239
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	2f ee       	ldi	r18, 0xEF	; 239
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	f9 01       	movw	r30, r18
     794:	20 81       	ld	r18, Z
     796:	20 64       	ori	r18, 0x40	; 64
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
          break;
     79c:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a4:	fc 01       	movw	r30, r24
     7a6:	83 85       	ldd	r24, Z+11	; 0x0b
     7a8:	88 23       	and	r24, r24
     7aa:	09 f4       	brne	.+2      	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
     7ac:	69 c0       	rjmp	.+210    	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
     7ae:	83 ef       	ldi	r24, 0xF3	; 243
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	29 85       	ldd	r18, Y+9	; 0x09
     7b4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b6:	2e 5f       	subi	r18, 0xFE	; 254
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	2d 5f       	subi	r18, 0xFD	; 253
     7bc:	3f 4f       	sbci	r19, 0xFF	; 255
     7be:	f9 01       	movw	r30, r18
     7c0:	20 81       	ld	r18, Z
     7c2:	42 2f       	mov	r20, r18
     7c4:	44 0f       	add	r20, r20
     7c6:	44 0f       	add	r20, r20
     7c8:	44 0f       	add	r20, r20
     7ca:	29 85       	ldd	r18, Y+9	; 0x09
     7cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ce:	2e 5f       	subi	r18, 0xFE	; 254
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	2e 5f       	subi	r18, 0xFE	; 254
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	22 95       	swap	r18
     7dc:	26 95       	lsr	r18
     7de:	27 70       	andi	r18, 0x07	; 7
     7e0:	24 0f       	add	r18, r20
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
     7e6:	82 ef       	ldi	r24, 0xF2	; 242
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	29 85       	ldd	r18, Y+9	; 0x09
     7ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ee:	2e 5f       	subi	r18, 0xFE	; 254
     7f0:	3f 4f       	sbci	r19, 0xFF	; 255
     7f2:	2e 5f       	subi	r18, 0xFE	; 254
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	42 2f       	mov	r20, r18
     7fc:	44 0f       	add	r20, r20
     7fe:	44 0f       	add	r20, r20
     800:	44 0f       	add	r20, r20
     802:	29 85       	ldd	r18, Y+9	; 0x09
     804:	3a 85       	ldd	r19, Y+10	; 0x0a
     806:	2e 5f       	subi	r18, 0xFE	; 254
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	22 95       	swap	r18
     814:	26 95       	lsr	r18
     816:	27 70       	andi	r18, 0x07	; 7
     818:	24 0f       	add	r18, r20
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
     81e:	81 ef       	ldi	r24, 0xF1	; 241
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	29 85       	ldd	r18, Y+9	; 0x09
     824:	3a 85       	ldd	r19, Y+10	; 0x0a
     826:	2e 5f       	subi	r18, 0xFE	; 254
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	2f 5f       	subi	r18, 0xFF	; 255
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	f9 01       	movw	r30, r18
     830:	20 81       	ld	r18, Z
     832:	42 2f       	mov	r20, r18
     834:	44 0f       	add	r20, r20
     836:	44 0f       	add	r20, r20
     838:	44 0f       	add	r20, r20
     83a:	29 85       	ldd	r18, Y+9	; 0x09
     83c:	3a 85       	ldd	r19, Y+10	; 0x0a
     83e:	2e 5f       	subi	r18, 0xFE	; 254
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	22 95       	swap	r18
     848:	26 95       	lsr	r18
     84a:	27 70       	andi	r18, 0x07	; 7
     84c:	24 0f       	add	r18, r20
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
     852:	80 ef       	ldi	r24, 0xF0	; 240
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	29 85       	ldd	r18, Y+9	; 0x09
     858:	3a 85       	ldd	r19, Y+10	; 0x0a
     85a:	2e 5f       	subi	r18, 0xFE	; 254
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	22 0f       	add	r18, r18
     864:	22 0f       	add	r18, r18
     866:	22 0f       	add	r18, r18
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
     86c:	8f ee       	ldi	r24, 0xEF	; 239
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2f ee       	ldi	r18, 0xEF	; 239
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	20 61       	ori	r18, 0x10	; 16
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
     87e:	30 c0       	rjmp	.+96     	; 0x8e0 <__LOCK_REGION_LENGTH__+0x4e0>
          else              { Can_set_std_id(cmd->id.std);}
     880:	83 ef       	ldi	r24, 0xF3	; 243
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	29 85       	ldd	r18, Y+9	; 0x09
     886:	3a 85       	ldd	r19, Y+10	; 0x0a
     888:	2e 5f       	subi	r18, 0xFE	; 254
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	2f 5f       	subi	r18, 0xFF	; 255
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	f9 01       	movw	r30, r18
     892:	20 81       	ld	r18, Z
     894:	42 2f       	mov	r20, r18
     896:	42 95       	swap	r20
     898:	44 0f       	add	r20, r20
     89a:	40 7e       	andi	r20, 0xE0	; 224
     89c:	29 85       	ldd	r18, Y+9	; 0x09
     89e:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a0:	2e 5f       	subi	r18, 0xFE	; 254
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	26 95       	lsr	r18
     8aa:	26 95       	lsr	r18
     8ac:	26 95       	lsr	r18
     8ae:	24 0f       	add	r18, r20
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	82 ef       	ldi	r24, 0xF2	; 242
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	29 85       	ldd	r18, Y+9	; 0x09
     8ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     8bc:	2e 5f       	subi	r18, 0xFE	; 254
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	22 95       	swap	r18
     8c6:	22 0f       	add	r18, r18
     8c8:	20 7e       	andi	r18, 0xE0	; 224
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
     8ce:	8f ee       	ldi	r24, 0xEF	; 239
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2f ee       	ldi	r18, 0xEF	; 239
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	2f 7e       	andi	r18, 0xEF	; 239
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     8e0:	89 85       	ldd	r24, Y+9	; 0x09
     8e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	fc 01       	movw	r30, r24
     8e8:	22 87       	std	Z+10, r18	; 0x0a
     8ea:	80 ef       	ldi	r24, 0xF0	; 240
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	20 ef       	ldi	r18, 0xF0	; 240
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	f9 01       	movw	r30, r18
     8f4:	20 81       	ld	r18, Z
     8f6:	24 60       	ori	r18, 0x04	; 4
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     8fc:	8f ee       	ldi	r24, 0xEF	; 239
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2f ee       	ldi	r18, 0xEF	; 239
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	f9 01       	movw	r30, r18
     906:	40 81       	ld	r20, Z
     908:	29 85       	ldd	r18, Y+9	; 0x09
     90a:	3a 85       	ldd	r19, Y+10	; 0x0a
     90c:	f9 01       	movw	r30, r18
     90e:	26 81       	ldd	r18, Z+6	; 0x06
     910:	24 2b       	or	r18, r20
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
          Can_config_tx();
     916:	8f ee       	ldi	r24, 0xEF	; 239
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	2f ee       	ldi	r18, 0xEF	; 239
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	2f 73       	andi	r18, 0x3F	; 63
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
     928:	8f ee       	ldi	r24, 0xEF	; 239
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	2f ee       	ldi	r18, 0xEF	; 239
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	20 64       	ori	r18, 0x40	; 64
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
          break;
     93a:	57 c7       	rjmp	.+3758   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     93c:	1d 82       	std	Y+5, r1	; 0x05
     93e:	1e 82       	std	Y+6, r1	; 0x06
     940:	1f 82       	std	Y+7, r1	; 0x07
     942:	18 86       	std	Y+8, r1	; 0x08
     944:	27 ef       	ldi	r18, 0xF7	; 247
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	ce 01       	movw	r24, r28
     94a:	05 96       	adiw	r24, 0x05	; 5
     94c:	03 96       	adiw	r24, 0x03	; 3
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	48 2f       	mov	r20, r24
     954:	44 0f       	add	r20, r20
     956:	44 0f       	add	r20, r20
     958:	44 0f       	add	r20, r20
     95a:	ce 01       	movw	r24, r28
     95c:	05 96       	adiw	r24, 0x05	; 5
     95e:	02 96       	adiw	r24, 0x02	; 2
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	82 95       	swap	r24
     966:	86 95       	lsr	r24
     968:	87 70       	andi	r24, 0x07	; 7
     96a:	84 0f       	add	r24, r20
     96c:	f9 01       	movw	r30, r18
     96e:	80 83       	st	Z, r24
     970:	26 ef       	ldi	r18, 0xF6	; 246
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	ce 01       	movw	r24, r28
     976:	05 96       	adiw	r24, 0x05	; 5
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	48 2f       	mov	r20, r24
     980:	44 0f       	add	r20, r20
     982:	44 0f       	add	r20, r20
     984:	44 0f       	add	r20, r20
     986:	ce 01       	movw	r24, r28
     988:	05 96       	adiw	r24, 0x05	; 5
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	82 95       	swap	r24
     992:	86 95       	lsr	r24
     994:	87 70       	andi	r24, 0x07	; 7
     996:	84 0f       	add	r24, r20
     998:	f9 01       	movw	r30, r18
     99a:	80 83       	st	Z, r24
     99c:	25 ef       	ldi	r18, 0xF5	; 245
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	ce 01       	movw	r24, r28
     9a2:	05 96       	adiw	r24, 0x05	; 5
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	fc 01       	movw	r30, r24
     9a8:	80 81       	ld	r24, Z
     9aa:	48 2f       	mov	r20, r24
     9ac:	44 0f       	add	r20, r20
     9ae:	44 0f       	add	r20, r20
     9b0:	44 0f       	add	r20, r20
     9b2:	ce 01       	movw	r24, r28
     9b4:	05 96       	adiw	r24, 0x05	; 5
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	82 95       	swap	r24
     9bc:	86 95       	lsr	r24
     9be:	87 70       	andi	r24, 0x07	; 7
     9c0:	84 0f       	add	r24, r20
     9c2:	f9 01       	movw	r30, r18
     9c4:	80 83       	st	Z, r24
     9c6:	84 ef       	ldi	r24, 0xF4	; 244
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9e 01       	movw	r18, r28
     9cc:	2b 5f       	subi	r18, 0xFB	; 251
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	22 0f       	add	r18, r18
     9d6:	22 0f       	add	r18, r18
     9d8:	22 0f       	add	r18, r18
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     9de:	8f ee       	ldi	r24, 0xEF	; 239
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	2f ee       	ldi	r18, 0xEF	; 239
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	f9 01       	movw	r30, r18
     9e8:	40 81       	ld	r20, Z
     9ea:	29 85       	ldd	r18, Y+9	; 0x09
     9ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ee:	f9 01       	movw	r30, r18
     9f0:	26 81       	ldd	r18, Z+6	; 0x06
     9f2:	24 2b       	or	r18, r20
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     9f8:	84 ef       	ldi	r24, 0xF4	; 244
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	24 ef       	ldi	r18, 0xF4	; 244
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	f9 01       	movw	r30, r18
     a02:	20 81       	ld	r18, Z
     a04:	2b 7f       	andi	r18, 0xFB	; 251
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a0a:	84 ef       	ldi	r24, 0xF4	; 244
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	24 ef       	ldi	r18, 0xF4	; 244
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	2e 7f       	andi	r18, 0xFE	; 254
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
          Can_config_rx();       
     a1c:	8f ee       	ldi	r24, 0xEF	; 239
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	2f ee       	ldi	r18, 0xEF	; 239
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	2f 73       	andi	r18, 0x3F	; 63
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
     a2e:	8f ee       	ldi	r24, 0xEF	; 239
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2f ee       	ldi	r18, 0xEF	; 239
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	20 68       	ori	r18, 0x80	; 128
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
          break;
     a40:	d4 c6       	rjmp	.+3496   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     a42:	1d 82       	std	Y+5, r1	; 0x05
     a44:	1e 82       	std	Y+6, r1	; 0x06
     a46:	1f 82       	std	Y+7, r1	; 0x07
     a48:	18 86       	std	Y+8, r1	; 0x08
     a4a:	27 ef       	ldi	r18, 0xF7	; 247
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	ce 01       	movw	r24, r28
     a50:	05 96       	adiw	r24, 0x05	; 5
     a52:	03 96       	adiw	r24, 0x03	; 3
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	48 2f       	mov	r20, r24
     a5a:	44 0f       	add	r20, r20
     a5c:	44 0f       	add	r20, r20
     a5e:	44 0f       	add	r20, r20
     a60:	ce 01       	movw	r24, r28
     a62:	05 96       	adiw	r24, 0x05	; 5
     a64:	02 96       	adiw	r24, 0x02	; 2
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	82 95       	swap	r24
     a6c:	86 95       	lsr	r24
     a6e:	87 70       	andi	r24, 0x07	; 7
     a70:	84 0f       	add	r24, r20
     a72:	f9 01       	movw	r30, r18
     a74:	80 83       	st	Z, r24
     a76:	26 ef       	ldi	r18, 0xF6	; 246
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	ce 01       	movw	r24, r28
     a7c:	05 96       	adiw	r24, 0x05	; 5
     a7e:	02 96       	adiw	r24, 0x02	; 2
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	48 2f       	mov	r20, r24
     a86:	44 0f       	add	r20, r20
     a88:	44 0f       	add	r20, r20
     a8a:	44 0f       	add	r20, r20
     a8c:	ce 01       	movw	r24, r28
     a8e:	05 96       	adiw	r24, 0x05	; 5
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	82 95       	swap	r24
     a98:	86 95       	lsr	r24
     a9a:	87 70       	andi	r24, 0x07	; 7
     a9c:	84 0f       	add	r24, r20
     a9e:	f9 01       	movw	r30, r18
     aa0:	80 83       	st	Z, r24
     aa2:	25 ef       	ldi	r18, 0xF5	; 245
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	ce 01       	movw	r24, r28
     aa8:	05 96       	adiw	r24, 0x05	; 5
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	fc 01       	movw	r30, r24
     aae:	80 81       	ld	r24, Z
     ab0:	48 2f       	mov	r20, r24
     ab2:	44 0f       	add	r20, r20
     ab4:	44 0f       	add	r20, r20
     ab6:	44 0f       	add	r20, r20
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	82 95       	swap	r24
     ac2:	86 95       	lsr	r24
     ac4:	87 70       	andi	r24, 0x07	; 7
     ac6:	84 0f       	add	r24, r20
     ac8:	f9 01       	movw	r30, r18
     aca:	80 83       	st	Z, r24
     acc:	84 ef       	ldi	r24, 0xF4	; 244
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9e 01       	movw	r18, r28
     ad2:	2b 5f       	subi	r18, 0xFB	; 251
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	22 0f       	add	r18, r18
     adc:	22 0f       	add	r18, r18
     ade:	22 0f       	add	r18, r18
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ae4:	8f ee       	ldi	r24, 0xEF	; 239
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	2f ee       	ldi	r18, 0xEF	; 239
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	f9 01       	movw	r30, r18
     aee:	40 81       	ld	r20, Z
     af0:	29 85       	ldd	r18, Y+9	; 0x09
     af2:	3a 85       	ldd	r19, Y+10	; 0x0a
     af4:	f9 01       	movw	r30, r18
     af6:	26 81       	ldd	r18, Z+6	; 0x06
     af8:	24 2b       	or	r18, r20
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     afe:	89 85       	ldd	r24, Y+9	; 0x09
     b00:	9a 85       	ldd	r25, Y+10	; 0x0a
     b02:	fc 01       	movw	r30, r24
     b04:	12 86       	std	Z+10, r1	; 0x0a
     b06:	84 ef       	ldi	r24, 0xF4	; 244
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	24 ef       	ldi	r18, 0xF4	; 244
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	24 60       	ori	r18, 0x04	; 4
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
     b18:	80 ef       	ldi	r24, 0xF0	; 240
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	20 ef       	ldi	r18, 0xF0	; 240
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	2b 7f       	andi	r18, 0xFB	; 251
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b2a:	84 ef       	ldi	r24, 0xF4	; 244
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	24 ef       	ldi	r18, 0xF4	; 244
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	2e 7f       	andi	r18, 0xFE	; 254
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
          Can_config_rx();       
     b3c:	8f ee       	ldi	r24, 0xEF	; 239
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	2f ee       	ldi	r18, 0xEF	; 239
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	f9 01       	movw	r30, r18
     b46:	20 81       	ld	r18, Z
     b48:	2f 73       	andi	r18, 0x3F	; 63
     b4a:	fc 01       	movw	r30, r24
     b4c:	20 83       	st	Z, r18
     b4e:	8f ee       	ldi	r24, 0xEF	; 239
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	2f ee       	ldi	r18, 0xEF	; 239
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	20 68       	ori	r18, 0x80	; 128
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
          break;
     b60:	44 c6       	rjmp	.+3208   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     b62:	1d 82       	std	Y+5, r1	; 0x05
     b64:	1e 82       	std	Y+6, r1	; 0x06
     b66:	1f 82       	std	Y+7, r1	; 0x07
     b68:	18 86       	std	Y+8, r1	; 0x08
     b6a:	27 ef       	ldi	r18, 0xF7	; 247
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	ce 01       	movw	r24, r28
     b70:	05 96       	adiw	r24, 0x05	; 5
     b72:	03 96       	adiw	r24, 0x03	; 3
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	48 2f       	mov	r20, r24
     b7a:	44 0f       	add	r20, r20
     b7c:	44 0f       	add	r20, r20
     b7e:	44 0f       	add	r20, r20
     b80:	ce 01       	movw	r24, r28
     b82:	05 96       	adiw	r24, 0x05	; 5
     b84:	02 96       	adiw	r24, 0x02	; 2
     b86:	fc 01       	movw	r30, r24
     b88:	80 81       	ld	r24, Z
     b8a:	82 95       	swap	r24
     b8c:	86 95       	lsr	r24
     b8e:	87 70       	andi	r24, 0x07	; 7
     b90:	84 0f       	add	r24, r20
     b92:	f9 01       	movw	r30, r18
     b94:	80 83       	st	Z, r24
     b96:	26 ef       	ldi	r18, 0xF6	; 246
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	ce 01       	movw	r24, r28
     b9c:	05 96       	adiw	r24, 0x05	; 5
     b9e:	02 96       	adiw	r24, 0x02	; 2
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	48 2f       	mov	r20, r24
     ba6:	44 0f       	add	r20, r20
     ba8:	44 0f       	add	r20, r20
     baa:	44 0f       	add	r20, r20
     bac:	ce 01       	movw	r24, r28
     bae:	05 96       	adiw	r24, 0x05	; 5
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	82 95       	swap	r24
     bb8:	86 95       	lsr	r24
     bba:	87 70       	andi	r24, 0x07	; 7
     bbc:	84 0f       	add	r24, r20
     bbe:	f9 01       	movw	r30, r18
     bc0:	80 83       	st	Z, r24
     bc2:	25 ef       	ldi	r18, 0xF5	; 245
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	05 96       	adiw	r24, 0x05	; 5
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	44 0f       	add	r20, r20
     bd4:	44 0f       	add	r20, r20
     bd6:	44 0f       	add	r20, r20
     bd8:	ce 01       	movw	r24, r28
     bda:	05 96       	adiw	r24, 0x05	; 5
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	82 95       	swap	r24
     be2:	86 95       	lsr	r24
     be4:	87 70       	andi	r24, 0x07	; 7
     be6:	84 0f       	add	r24, r20
     be8:	f9 01       	movw	r30, r18
     bea:	80 83       	st	Z, r24
     bec:	84 ef       	ldi	r24, 0xF4	; 244
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9e 01       	movw	r18, r28
     bf2:	2b 5f       	subi	r18, 0xFB	; 251
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	f9 01       	movw	r30, r18
     bf8:	20 81       	ld	r18, Z
     bfa:	22 0f       	add	r18, r18
     bfc:	22 0f       	add	r18, r18
     bfe:	22 0f       	add	r18, r18
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c04:	8f ee       	ldi	r24, 0xEF	; 239
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	2f ee       	ldi	r18, 0xEF	; 239
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	40 81       	ld	r20, Z
     c10:	29 85       	ldd	r18, Y+9	; 0x09
     c12:	3a 85       	ldd	r19, Y+10	; 0x0a
     c14:	f9 01       	movw	r30, r18
     c16:	26 81       	ldd	r18, Z+6	; 0x06
     c18:	24 2b       	or	r18, r20
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	fc 01       	movw	r30, r24
     c26:	22 87       	std	Z+10, r18	; 0x0a
     c28:	84 ef       	ldi	r24, 0xF4	; 244
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	24 ef       	ldi	r18, 0xF4	; 244
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	24 60       	ori	r18, 0x04	; 4
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
     c3a:	80 ef       	ldi	r24, 0xF0	; 240
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	20 ef       	ldi	r18, 0xF0	; 240
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	24 60       	ori	r18, 0x04	; 4
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
          Can_clear_rplv();
     c4c:	8f ee       	ldi	r24, 0xEF	; 239
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	2f ee       	ldi	r18, 0xEF	; 239
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	2f 7d       	andi	r18, 0xDF	; 223
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c5e:	84 ef       	ldi	r24, 0xF4	; 244
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	24 ef       	ldi	r18, 0xF4	; 244
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	f9 01       	movw	r30, r18
     c68:	20 81       	ld	r18, Z
     c6a:	2e 7f       	andi	r18, 0xFE	; 254
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
          Can_config_rx();       
     c70:	8f ee       	ldi	r24, 0xEF	; 239
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	2f ee       	ldi	r18, 0xEF	; 239
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	2f 73       	andi	r18, 0x3F	; 63
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
     c82:	8f ee       	ldi	r24, 0xEF	; 239
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	2f ee       	ldi	r18, 0xEF	; 239
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	f9 01       	movw	r30, r18
     c8c:	20 81       	ld	r18, Z
     c8e:	20 68       	ori	r18, 0x80	; 128
     c90:	fc 01       	movw	r30, r24
     c92:	20 83       	st	Z, r18
          break;
     c94:	aa c5       	rjmp	.+2900   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9a:	fc 01       	movw	r30, r24
     c9c:	83 85       	ldd	r24, Z+11	; 0x0b
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <__LOCK_REGION_LENGTH__+0x8a4>
     ca2:	69 c0       	rjmp	.+210    	; 0xd76 <__LOCK_REGION_LENGTH__+0x976>
     ca4:	83 ef       	ldi	r24, 0xF3	; 243
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	29 85       	ldd	r18, Y+9	; 0x09
     caa:	3a 85       	ldd	r19, Y+10	; 0x0a
     cac:	2e 5f       	subi	r18, 0xFE	; 254
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	2d 5f       	subi	r18, 0xFD	; 253
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	f9 01       	movw	r30, r18
     cb6:	20 81       	ld	r18, Z
     cb8:	42 2f       	mov	r20, r18
     cba:	44 0f       	add	r20, r20
     cbc:	44 0f       	add	r20, r20
     cbe:	44 0f       	add	r20, r20
     cc0:	29 85       	ldd	r18, Y+9	; 0x09
     cc2:	3a 85       	ldd	r19, Y+10	; 0x0a
     cc4:	2e 5f       	subi	r18, 0xFE	; 254
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
     cc8:	2e 5f       	subi	r18, 0xFE	; 254
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	f9 01       	movw	r30, r18
     cce:	20 81       	ld	r18, Z
     cd0:	22 95       	swap	r18
     cd2:	26 95       	lsr	r18
     cd4:	27 70       	andi	r18, 0x07	; 7
     cd6:	24 0f       	add	r18, r20
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
     cdc:	82 ef       	ldi	r24, 0xF2	; 242
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	29 85       	ldd	r18, Y+9	; 0x09
     ce2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce4:	2e 5f       	subi	r18, 0xFE	; 254
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	2e 5f       	subi	r18, 0xFE	; 254
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	f9 01       	movw	r30, r18
     cee:	20 81       	ld	r18, Z
     cf0:	42 2f       	mov	r20, r18
     cf2:	44 0f       	add	r20, r20
     cf4:	44 0f       	add	r20, r20
     cf6:	44 0f       	add	r20, r20
     cf8:	29 85       	ldd	r18, Y+9	; 0x09
     cfa:	3a 85       	ldd	r19, Y+10	; 0x0a
     cfc:	2e 5f       	subi	r18, 0xFE	; 254
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	22 95       	swap	r18
     d0a:	26 95       	lsr	r18
     d0c:	27 70       	andi	r18, 0x07	; 7
     d0e:	24 0f       	add	r18, r20
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
     d14:	81 ef       	ldi	r24, 0xF1	; 241
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	29 85       	ldd	r18, Y+9	; 0x09
     d1a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d1c:	2e 5f       	subi	r18, 0xFE	; 254
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	2f 5f       	subi	r18, 0xFF	; 255
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	f9 01       	movw	r30, r18
     d26:	20 81       	ld	r18, Z
     d28:	42 2f       	mov	r20, r18
     d2a:	44 0f       	add	r20, r20
     d2c:	44 0f       	add	r20, r20
     d2e:	44 0f       	add	r20, r20
     d30:	29 85       	ldd	r18, Y+9	; 0x09
     d32:	3a 85       	ldd	r19, Y+10	; 0x0a
     d34:	2e 5f       	subi	r18, 0xFE	; 254
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	22 95       	swap	r18
     d3e:	26 95       	lsr	r18
     d40:	27 70       	andi	r18, 0x07	; 7
     d42:	24 0f       	add	r18, r20
     d44:	fc 01       	movw	r30, r24
     d46:	20 83       	st	Z, r18
     d48:	80 ef       	ldi	r24, 0xF0	; 240
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	29 85       	ldd	r18, Y+9	; 0x09
     d4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d50:	2e 5f       	subi	r18, 0xFE	; 254
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	f9 01       	movw	r30, r18
     d56:	20 81       	ld	r18, Z
     d58:	22 0f       	add	r18, r18
     d5a:	22 0f       	add	r18, r18
     d5c:	22 0f       	add	r18, r18
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
     d62:	8f ee       	ldi	r24, 0xEF	; 239
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	2f ee       	ldi	r18, 0xEF	; 239
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	20 81       	ld	r18, Z
     d6e:	20 61       	ori	r18, 0x10	; 16
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18
     d74:	30 c0       	rjmp	.+96     	; 0xdd6 <__LOCK_REGION_LENGTH__+0x9d6>
          else              { Can_set_std_id(cmd->id.std);}
     d76:	83 ef       	ldi	r24, 0xF3	; 243
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	29 85       	ldd	r18, Y+9	; 0x09
     d7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d7e:	2e 5f       	subi	r18, 0xFE	; 254
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	42 2f       	mov	r20, r18
     d8c:	42 95       	swap	r20
     d8e:	44 0f       	add	r20, r20
     d90:	40 7e       	andi	r20, 0xE0	; 224
     d92:	29 85       	ldd	r18, Y+9	; 0x09
     d94:	3a 85       	ldd	r19, Y+10	; 0x0a
     d96:	2e 5f       	subi	r18, 0xFE	; 254
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	f9 01       	movw	r30, r18
     d9c:	20 81       	ld	r18, Z
     d9e:	26 95       	lsr	r18
     da0:	26 95       	lsr	r18
     da2:	26 95       	lsr	r18
     da4:	24 0f       	add	r18, r20
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
     daa:	82 ef       	ldi	r24, 0xF2	; 242
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	29 85       	ldd	r18, Y+9	; 0x09
     db0:	3a 85       	ldd	r19, Y+10	; 0x0a
     db2:	2e 5f       	subi	r18, 0xFE	; 254
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	22 95       	swap	r18
     dbc:	22 0f       	add	r18, r18
     dbe:	20 7e       	andi	r18, 0xE0	; 224
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
     dc4:	8f ee       	ldi	r24, 0xEF	; 239
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	2f ee       	ldi	r18, 0xEF	; 239
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	2f 7e       	andi	r18, 0xEF	; 239
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	9f ef       	ldi	r25, 0xFF	; 255
     dda:	dc 01       	movw	r26, r24
     ddc:	8d 83       	std	Y+5, r24	; 0x05
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	af 83       	std	Y+7, r26	; 0x07
     de2:	b8 87       	std	Y+8, r27	; 0x08
     de4:	27 ef       	ldi	r18, 0xF7	; 247
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	ce 01       	movw	r24, r28
     dea:	05 96       	adiw	r24, 0x05	; 5
     dec:	03 96       	adiw	r24, 0x03	; 3
     dee:	fc 01       	movw	r30, r24
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	44 0f       	add	r20, r20
     df6:	44 0f       	add	r20, r20
     df8:	44 0f       	add	r20, r20
     dfa:	ce 01       	movw	r24, r28
     dfc:	05 96       	adiw	r24, 0x05	; 5
     dfe:	02 96       	adiw	r24, 0x02	; 2
     e00:	fc 01       	movw	r30, r24
     e02:	80 81       	ld	r24, Z
     e04:	82 95       	swap	r24
     e06:	86 95       	lsr	r24
     e08:	87 70       	andi	r24, 0x07	; 7
     e0a:	84 0f       	add	r24, r20
     e0c:	f9 01       	movw	r30, r18
     e0e:	80 83       	st	Z, r24
     e10:	26 ef       	ldi	r18, 0xF6	; 246
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	ce 01       	movw	r24, r28
     e16:	05 96       	adiw	r24, 0x05	; 5
     e18:	02 96       	adiw	r24, 0x02	; 2
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	44 0f       	add	r20, r20
     e22:	44 0f       	add	r20, r20
     e24:	44 0f       	add	r20, r20
     e26:	ce 01       	movw	r24, r28
     e28:	05 96       	adiw	r24, 0x05	; 5
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	82 95       	swap	r24
     e32:	86 95       	lsr	r24
     e34:	87 70       	andi	r24, 0x07	; 7
     e36:	84 0f       	add	r24, r20
     e38:	f9 01       	movw	r30, r18
     e3a:	80 83       	st	Z, r24
     e3c:	25 ef       	ldi	r18, 0xF5	; 245
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	ce 01       	movw	r24, r28
     e42:	05 96       	adiw	r24, 0x05	; 5
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	44 0f       	add	r20, r20
     e4e:	44 0f       	add	r20, r20
     e50:	44 0f       	add	r20, r20
     e52:	ce 01       	movw	r24, r28
     e54:	05 96       	adiw	r24, 0x05	; 5
     e56:	fc 01       	movw	r30, r24
     e58:	80 81       	ld	r24, Z
     e5a:	82 95       	swap	r24
     e5c:	86 95       	lsr	r24
     e5e:	87 70       	andi	r24, 0x07	; 7
     e60:	84 0f       	add	r24, r20
     e62:	f9 01       	movw	r30, r18
     e64:	80 83       	st	Z, r24
     e66:	84 ef       	ldi	r24, 0xF4	; 244
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9e 01       	movw	r18, r28
     e6c:	2b 5f       	subi	r18, 0xFB	; 251
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	f9 01       	movw	r30, r18
     e72:	20 81       	ld	r18, Z
     e74:	22 0f       	add	r18, r18
     e76:	22 0f       	add	r18, r18
     e78:	22 0f       	add	r18, r18
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e7e:	8f ee       	ldi	r24, 0xEF	; 239
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	2f ee       	ldi	r18, 0xEF	; 239
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	f9 01       	movw	r30, r18
     e88:	40 81       	ld	r20, Z
     e8a:	29 85       	ldd	r18, Y+9	; 0x09
     e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8e:	f9 01       	movw	r30, r18
     e90:	26 81       	ldd	r18, Z+6	; 0x06
     e92:	24 2b       	or	r18, r20
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     e98:	84 ef       	ldi	r24, 0xF4	; 244
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	24 ef       	ldi	r18, 0xF4	; 244
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	f9 01       	movw	r30, r18
     ea2:	20 81       	ld	r18, Z
     ea4:	2b 7f       	andi	r18, 0xFB	; 251
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 83       	st	Z, r18
          Can_set_idemsk();
     eaa:	84 ef       	ldi	r24, 0xF4	; 244
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	24 ef       	ldi	r18, 0xF4	; 244
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	21 60       	ori	r18, 0x01	; 1
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
          Can_config_rx();       
     ebc:	8f ee       	ldi	r24, 0xEF	; 239
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	2f ee       	ldi	r18, 0xEF	; 239
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	f9 01       	movw	r30, r18
     ec6:	20 81       	ld	r18, Z
     ec8:	2f 73       	andi	r18, 0x3F	; 63
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	8f ee       	ldi	r24, 0xEF	; 239
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2f ee       	ldi	r18, 0xEF	; 239
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	f9 01       	movw	r30, r18
     ed8:	20 81       	ld	r18, Z
     eda:	20 68       	ori	r18, 0x80	; 128
     edc:	fc 01       	movw	r30, r24
     ede:	20 83       	st	Z, r18
          break;
     ee0:	84 c4       	rjmp	.+2312   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	fc 01       	movw	r30, r24
     ee8:	83 85       	ldd	r24, Z+11	; 0x0b
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <__LOCK_REGION_LENGTH__+0xaf0>
     eee:	69 c0       	rjmp	.+210    	; 0xfc2 <__LOCK_REGION_LENGTH__+0xbc2>
     ef0:	83 ef       	ldi	r24, 0xF3	; 243
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	29 85       	ldd	r18, Y+9	; 0x09
     ef6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ef8:	2e 5f       	subi	r18, 0xFE	; 254
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	2d 5f       	subi	r18, 0xFD	; 253
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	42 2f       	mov	r20, r18
     f06:	44 0f       	add	r20, r20
     f08:	44 0f       	add	r20, r20
     f0a:	44 0f       	add	r20, r20
     f0c:	29 85       	ldd	r18, Y+9	; 0x09
     f0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f10:	2e 5f       	subi	r18, 0xFE	; 254
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	2e 5f       	subi	r18, 0xFE	; 254
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	22 95       	swap	r18
     f1e:	26 95       	lsr	r18
     f20:	27 70       	andi	r18, 0x07	; 7
     f22:	24 0f       	add	r18, r20
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
     f28:	82 ef       	ldi	r24, 0xF2	; 242
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	29 85       	ldd	r18, Y+9	; 0x09
     f2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f30:	2e 5f       	subi	r18, 0xFE	; 254
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	2e 5f       	subi	r18, 0xFE	; 254
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	42 2f       	mov	r20, r18
     f3e:	44 0f       	add	r20, r20
     f40:	44 0f       	add	r20, r20
     f42:	44 0f       	add	r20, r20
     f44:	29 85       	ldd	r18, Y+9	; 0x09
     f46:	3a 85       	ldd	r19, Y+10	; 0x0a
     f48:	2e 5f       	subi	r18, 0xFE	; 254
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	f9 01       	movw	r30, r18
     f52:	20 81       	ld	r18, Z
     f54:	22 95       	swap	r18
     f56:	26 95       	lsr	r18
     f58:	27 70       	andi	r18, 0x07	; 7
     f5a:	24 0f       	add	r18, r20
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
     f60:	81 ef       	ldi	r24, 0xF1	; 241
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	29 85       	ldd	r18, Y+9	; 0x09
     f66:	3a 85       	ldd	r19, Y+10	; 0x0a
     f68:	2e 5f       	subi	r18, 0xFE	; 254
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	f9 01       	movw	r30, r18
     f72:	20 81       	ld	r18, Z
     f74:	42 2f       	mov	r20, r18
     f76:	44 0f       	add	r20, r20
     f78:	44 0f       	add	r20, r20
     f7a:	44 0f       	add	r20, r20
     f7c:	29 85       	ldd	r18, Y+9	; 0x09
     f7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f80:	2e 5f       	subi	r18, 0xFE	; 254
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	f9 01       	movw	r30, r18
     f86:	20 81       	ld	r18, Z
     f88:	22 95       	swap	r18
     f8a:	26 95       	lsr	r18
     f8c:	27 70       	andi	r18, 0x07	; 7
     f8e:	24 0f       	add	r18, r20
     f90:	fc 01       	movw	r30, r24
     f92:	20 83       	st	Z, r18
     f94:	80 ef       	ldi	r24, 0xF0	; 240
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	29 85       	ldd	r18, Y+9	; 0x09
     f9a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f9c:	2e 5f       	subi	r18, 0xFE	; 254
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	22 0f       	add	r18, r18
     fa6:	22 0f       	add	r18, r18
     fa8:	22 0f       	add	r18, r18
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18
     fae:	8f ee       	ldi	r24, 0xEF	; 239
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	2f ee       	ldi	r18, 0xEF	; 239
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	f9 01       	movw	r30, r18
     fb8:	20 81       	ld	r18, Z
     fba:	20 61       	ori	r18, 0x10	; 16
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 83       	st	Z, r18
     fc0:	30 c0       	rjmp	.+96     	; 0x1022 <__LOCK_REGION_LENGTH__+0xc22>
          else              { Can_set_std_id(cmd->id.std);}
     fc2:	83 ef       	ldi	r24, 0xF3	; 243
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	29 85       	ldd	r18, Y+9	; 0x09
     fc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     fca:	2e 5f       	subi	r18, 0xFE	; 254
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	2f 5f       	subi	r18, 0xFF	; 255
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	f9 01       	movw	r30, r18
     fd4:	20 81       	ld	r18, Z
     fd6:	42 2f       	mov	r20, r18
     fd8:	42 95       	swap	r20
     fda:	44 0f       	add	r20, r20
     fdc:	40 7e       	andi	r20, 0xE0	; 224
     fde:	29 85       	ldd	r18, Y+9	; 0x09
     fe0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe2:	2e 5f       	subi	r18, 0xFE	; 254
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	f9 01       	movw	r30, r18
     fe8:	20 81       	ld	r18, Z
     fea:	26 95       	lsr	r18
     fec:	26 95       	lsr	r18
     fee:	26 95       	lsr	r18
     ff0:	24 0f       	add	r18, r20
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
     ff6:	82 ef       	ldi	r24, 0xF2	; 242
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	29 85       	ldd	r18, Y+9	; 0x09
     ffc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffe:	2e 5f       	subi	r18, 0xFE	; 254
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	f9 01       	movw	r30, r18
    1004:	20 81       	ld	r18, Z
    1006:	22 95       	swap	r18
    1008:	22 0f       	add	r18, r18
    100a:	20 7e       	andi	r18, 0xE0	; 224
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
    1010:	8f ee       	ldi	r24, 0xEF	; 239
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	2f ee       	ldi	r18, 0xEF	; 239
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	2f 7e       	andi	r18, 0xEF	; 239
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	9f ef       	ldi	r25, 0xFF	; 255
    1026:	dc 01       	movw	r26, r24
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	af 83       	std	Y+7, r26	; 0x07
    102e:	b8 87       	std	Y+8, r27	; 0x08
    1030:	27 ef       	ldi	r18, 0xF7	; 247
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	ce 01       	movw	r24, r28
    1036:	05 96       	adiw	r24, 0x05	; 5
    1038:	03 96       	adiw	r24, 0x03	; 3
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	44 0f       	add	r20, r20
    1042:	44 0f       	add	r20, r20
    1044:	44 0f       	add	r20, r20
    1046:	ce 01       	movw	r24, r28
    1048:	05 96       	adiw	r24, 0x05	; 5
    104a:	02 96       	adiw	r24, 0x02	; 2
    104c:	fc 01       	movw	r30, r24
    104e:	80 81       	ld	r24, Z
    1050:	82 95       	swap	r24
    1052:	86 95       	lsr	r24
    1054:	87 70       	andi	r24, 0x07	; 7
    1056:	84 0f       	add	r24, r20
    1058:	f9 01       	movw	r30, r18
    105a:	80 83       	st	Z, r24
    105c:	26 ef       	ldi	r18, 0xF6	; 246
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	ce 01       	movw	r24, r28
    1062:	05 96       	adiw	r24, 0x05	; 5
    1064:	02 96       	adiw	r24, 0x02	; 2
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	44 0f       	add	r20, r20
    106e:	44 0f       	add	r20, r20
    1070:	44 0f       	add	r20, r20
    1072:	ce 01       	movw	r24, r28
    1074:	05 96       	adiw	r24, 0x05	; 5
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	fc 01       	movw	r30, r24
    107a:	80 81       	ld	r24, Z
    107c:	82 95       	swap	r24
    107e:	86 95       	lsr	r24
    1080:	87 70       	andi	r24, 0x07	; 7
    1082:	84 0f       	add	r24, r20
    1084:	f9 01       	movw	r30, r18
    1086:	80 83       	st	Z, r24
    1088:	25 ef       	ldi	r18, 0xF5	; 245
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	ce 01       	movw	r24, r28
    108e:	05 96       	adiw	r24, 0x05	; 5
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	fc 01       	movw	r30, r24
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	44 0f       	add	r20, r20
    109a:	44 0f       	add	r20, r20
    109c:	44 0f       	add	r20, r20
    109e:	ce 01       	movw	r24, r28
    10a0:	05 96       	adiw	r24, 0x05	; 5
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	82 95       	swap	r24
    10a8:	86 95       	lsr	r24
    10aa:	87 70       	andi	r24, 0x07	; 7
    10ac:	84 0f       	add	r24, r20
    10ae:	f9 01       	movw	r30, r18
    10b0:	80 83       	st	Z, r24
    10b2:	84 ef       	ldi	r24, 0xF4	; 244
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9e 01       	movw	r18, r28
    10b8:	2b 5f       	subi	r18, 0xFB	; 251
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	f9 01       	movw	r30, r18
    10be:	20 81       	ld	r18, Z
    10c0:	22 0f       	add	r18, r18
    10c2:	22 0f       	add	r18, r18
    10c4:	22 0f       	add	r18, r18
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10ca:	8f ee       	ldi	r24, 0xEF	; 239
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	2f ee       	ldi	r18, 0xEF	; 239
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	f9 01       	movw	r30, r18
    10d4:	40 81       	ld	r20, Z
    10d6:	29 85       	ldd	r18, Y+9	; 0x09
    10d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10da:	f9 01       	movw	r30, r18
    10dc:	26 81       	ldd	r18, Z+6	; 0x06
    10de:	24 2b       	or	r18, r20
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	fc 01       	movw	r30, r24
    10ea:	12 86       	std	Z+10, r1	; 0x0a
    10ec:	84 ef       	ldi	r24, 0xF4	; 244
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	24 ef       	ldi	r18, 0xF4	; 244
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	f9 01       	movw	r30, r18
    10f6:	20 81       	ld	r18, Z
    10f8:	24 60       	ori	r18, 0x04	; 4
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
    10fe:	80 ef       	ldi	r24, 0xF0	; 240
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	20 ef       	ldi	r18, 0xF0	; 240
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	2b 7f       	andi	r18, 0xFB	; 251
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
          Can_set_idemsk();
    1110:	84 ef       	ldi	r24, 0xF4	; 244
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	24 ef       	ldi	r18, 0xF4	; 244
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	f9 01       	movw	r30, r18
    111a:	20 81       	ld	r18, Z
    111c:	21 60       	ori	r18, 0x01	; 1
    111e:	fc 01       	movw	r30, r24
    1120:	20 83       	st	Z, r18
          Can_config_rx();       
    1122:	8f ee       	ldi	r24, 0xEF	; 239
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	2f ee       	ldi	r18, 0xEF	; 239
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	f9 01       	movw	r30, r18
    112c:	20 81       	ld	r18, Z
    112e:	2f 73       	andi	r18, 0x3F	; 63
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
    1134:	8f ee       	ldi	r24, 0xEF	; 239
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	2f ee       	ldi	r18, 0xEF	; 239
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	f9 01       	movw	r30, r18
    113e:	20 81       	ld	r18, Z
    1140:	20 68       	ori	r18, 0x80	; 128
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
          break;
    1146:	51 c3       	rjmp	.+1698   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	9a 85       	ldd	r25, Y+10	; 0x0a
    114c:	fc 01       	movw	r30, r24
    114e:	83 85       	ldd	r24, Z+11	; 0x0b
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <__stack+0x57>
    1154:	69 c0       	rjmp	.+210    	; 0x1228 <__stack+0x129>
    1156:	83 ef       	ldi	r24, 0xF3	; 243
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	29 85       	ldd	r18, Y+9	; 0x09
    115c:	3a 85       	ldd	r19, Y+10	; 0x0a
    115e:	2e 5f       	subi	r18, 0xFE	; 254
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	2d 5f       	subi	r18, 0xFD	; 253
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	42 2f       	mov	r20, r18
    116c:	44 0f       	add	r20, r20
    116e:	44 0f       	add	r20, r20
    1170:	44 0f       	add	r20, r20
    1172:	29 85       	ldd	r18, Y+9	; 0x09
    1174:	3a 85       	ldd	r19, Y+10	; 0x0a
    1176:	2e 5f       	subi	r18, 0xFE	; 254
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	2e 5f       	subi	r18, 0xFE	; 254
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	f9 01       	movw	r30, r18
    1180:	20 81       	ld	r18, Z
    1182:	22 95       	swap	r18
    1184:	26 95       	lsr	r18
    1186:	27 70       	andi	r18, 0x07	; 7
    1188:	24 0f       	add	r18, r20
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
    118e:	82 ef       	ldi	r24, 0xF2	; 242
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	29 85       	ldd	r18, Y+9	; 0x09
    1194:	3a 85       	ldd	r19, Y+10	; 0x0a
    1196:	2e 5f       	subi	r18, 0xFE	; 254
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	2e 5f       	subi	r18, 0xFE	; 254
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	42 2f       	mov	r20, r18
    11a4:	44 0f       	add	r20, r20
    11a6:	44 0f       	add	r20, r20
    11a8:	44 0f       	add	r20, r20
    11aa:	29 85       	ldd	r18, Y+9	; 0x09
    11ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ae:	2e 5f       	subi	r18, 0xFE	; 254
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	2f 5f       	subi	r18, 0xFF	; 255
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	22 95       	swap	r18
    11bc:	26 95       	lsr	r18
    11be:	27 70       	andi	r18, 0x07	; 7
    11c0:	24 0f       	add	r18, r20
    11c2:	fc 01       	movw	r30, r24
    11c4:	20 83       	st	Z, r18
    11c6:	81 ef       	ldi	r24, 0xF1	; 241
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	29 85       	ldd	r18, Y+9	; 0x09
    11cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ce:	2e 5f       	subi	r18, 0xFE	; 254
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	2f 5f       	subi	r18, 0xFF	; 255
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	f9 01       	movw	r30, r18
    11d8:	20 81       	ld	r18, Z
    11da:	42 2f       	mov	r20, r18
    11dc:	44 0f       	add	r20, r20
    11de:	44 0f       	add	r20, r20
    11e0:	44 0f       	add	r20, r20
    11e2:	29 85       	ldd	r18, Y+9	; 0x09
    11e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e6:	2e 5f       	subi	r18, 0xFE	; 254
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	22 95       	swap	r18
    11f0:	26 95       	lsr	r18
    11f2:	27 70       	andi	r18, 0x07	; 7
    11f4:	24 0f       	add	r18, r20
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
    11fa:	80 ef       	ldi	r24, 0xF0	; 240
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	29 85       	ldd	r18, Y+9	; 0x09
    1200:	3a 85       	ldd	r19, Y+10	; 0x0a
    1202:	2e 5f       	subi	r18, 0xFE	; 254
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	f9 01       	movw	r30, r18
    1208:	20 81       	ld	r18, Z
    120a:	22 0f       	add	r18, r18
    120c:	22 0f       	add	r18, r18
    120e:	22 0f       	add	r18, r18
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18
    1214:	8f ee       	ldi	r24, 0xEF	; 239
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	2f ee       	ldi	r18, 0xEF	; 239
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	f9 01       	movw	r30, r18
    121e:	20 81       	ld	r18, Z
    1220:	20 61       	ori	r18, 0x10	; 16
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
    1226:	30 c0       	rjmp	.+96     	; 0x1288 <__stack+0x189>
          else              { Can_set_std_id(cmd->id.std);}
    1228:	83 ef       	ldi	r24, 0xF3	; 243
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	29 85       	ldd	r18, Y+9	; 0x09
    122e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1230:	2e 5f       	subi	r18, 0xFE	; 254
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	2f 5f       	subi	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	f9 01       	movw	r30, r18
    123a:	20 81       	ld	r18, Z
    123c:	42 2f       	mov	r20, r18
    123e:	42 95       	swap	r20
    1240:	44 0f       	add	r20, r20
    1242:	40 7e       	andi	r20, 0xE0	; 224
    1244:	29 85       	ldd	r18, Y+9	; 0x09
    1246:	3a 85       	ldd	r19, Y+10	; 0x0a
    1248:	2e 5f       	subi	r18, 0xFE	; 254
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	f9 01       	movw	r30, r18
    124e:	20 81       	ld	r18, Z
    1250:	26 95       	lsr	r18
    1252:	26 95       	lsr	r18
    1254:	26 95       	lsr	r18
    1256:	24 0f       	add	r18, r20
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
    125c:	82 ef       	ldi	r24, 0xF2	; 242
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	29 85       	ldd	r18, Y+9	; 0x09
    1262:	3a 85       	ldd	r19, Y+10	; 0x0a
    1264:	2e 5f       	subi	r18, 0xFE	; 254
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	f9 01       	movw	r30, r18
    126a:	20 81       	ld	r18, Z
    126c:	22 95       	swap	r18
    126e:	22 0f       	add	r18, r18
    1270:	20 7e       	andi	r18, 0xE0	; 224
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	8f ee       	ldi	r24, 0xEF	; 239
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	2f ee       	ldi	r18, 0xEF	; 239
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	20 81       	ld	r18, Z
    1282:	2f 7e       	andi	r18, 0xEF	; 239
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	9f ef       	ldi	r25, 0xFF	; 255
    128c:	dc 01       	movw	r26, r24
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	af 83       	std	Y+7, r26	; 0x07
    1294:	b8 87       	std	Y+8, r27	; 0x08
    1296:	27 ef       	ldi	r18, 0xF7	; 247
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	ce 01       	movw	r24, r28
    129c:	05 96       	adiw	r24, 0x05	; 5
    129e:	03 96       	adiw	r24, 0x03	; 3
    12a0:	fc 01       	movw	r30, r24
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	44 0f       	add	r20, r20
    12a8:	44 0f       	add	r20, r20
    12aa:	44 0f       	add	r20, r20
    12ac:	ce 01       	movw	r24, r28
    12ae:	05 96       	adiw	r24, 0x05	; 5
    12b0:	02 96       	adiw	r24, 0x02	; 2
    12b2:	fc 01       	movw	r30, r24
    12b4:	80 81       	ld	r24, Z
    12b6:	82 95       	swap	r24
    12b8:	86 95       	lsr	r24
    12ba:	87 70       	andi	r24, 0x07	; 7
    12bc:	84 0f       	add	r24, r20
    12be:	f9 01       	movw	r30, r18
    12c0:	80 83       	st	Z, r24
    12c2:	26 ef       	ldi	r18, 0xF6	; 246
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	ce 01       	movw	r24, r28
    12c8:	05 96       	adiw	r24, 0x05	; 5
    12ca:	02 96       	adiw	r24, 0x02	; 2
    12cc:	fc 01       	movw	r30, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	44 0f       	add	r20, r20
    12d4:	44 0f       	add	r20, r20
    12d6:	44 0f       	add	r20, r20
    12d8:	ce 01       	movw	r24, r28
    12da:	05 96       	adiw	r24, 0x05	; 5
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	82 95       	swap	r24
    12e4:	86 95       	lsr	r24
    12e6:	87 70       	andi	r24, 0x07	; 7
    12e8:	84 0f       	add	r24, r20
    12ea:	f9 01       	movw	r30, r18
    12ec:	80 83       	st	Z, r24
    12ee:	25 ef       	ldi	r18, 0xF5	; 245
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	ce 01       	movw	r24, r28
    12f4:	05 96       	adiw	r24, 0x05	; 5
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	fc 01       	movw	r30, r24
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	44 0f       	add	r20, r20
    1300:	44 0f       	add	r20, r20
    1302:	44 0f       	add	r20, r20
    1304:	ce 01       	movw	r24, r28
    1306:	05 96       	adiw	r24, 0x05	; 5
    1308:	fc 01       	movw	r30, r24
    130a:	80 81       	ld	r24, Z
    130c:	82 95       	swap	r24
    130e:	86 95       	lsr	r24
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	84 0f       	add	r24, r20
    1314:	f9 01       	movw	r30, r18
    1316:	80 83       	st	Z, r24
    1318:	84 ef       	ldi	r24, 0xF4	; 244
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9e 01       	movw	r18, r28
    131e:	2b 5f       	subi	r18, 0xFB	; 251
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	22 0f       	add	r18, r18
    1328:	22 0f       	add	r18, r18
    132a:	22 0f       	add	r18, r18
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1330:	8f ee       	ldi	r24, 0xEF	; 239
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	2f ee       	ldi	r18, 0xEF	; 239
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	f9 01       	movw	r30, r18
    133a:	40 81       	ld	r20, Z
    133c:	29 85       	ldd	r18, Y+9	; 0x09
    133e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1340:	f9 01       	movw	r30, r18
    1342:	26 81       	ldd	r18, Z+6	; 0x06
    1344:	24 2b       	or	r18, r20
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	fc 01       	movw	r30, r24
    1352:	22 87       	std	Z+10, r18	; 0x0a
    1354:	84 ef       	ldi	r24, 0xF4	; 244
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	24 ef       	ldi	r18, 0xF4	; 244
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	24 60       	ori	r18, 0x04	; 4
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	80 ef       	ldi	r24, 0xF0	; 240
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	20 ef       	ldi	r18, 0xF0	; 240
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	f9 01       	movw	r30, r18
    1370:	20 81       	ld	r18, Z
    1372:	24 60       	ori	r18, 0x04	; 4
    1374:	fc 01       	movw	r30, r24
    1376:	20 83       	st	Z, r18
          Can_clear_rplv();
    1378:	8f ee       	ldi	r24, 0xEF	; 239
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	2f ee       	ldi	r18, 0xEF	; 239
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	2f 7d       	andi	r18, 0xDF	; 223
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
          Can_set_idemsk();
    138a:	84 ef       	ldi	r24, 0xF4	; 244
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	24 ef       	ldi	r18, 0xF4	; 244
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	f9 01       	movw	r30, r18
    1394:	20 81       	ld	r18, Z
    1396:	21 60       	ori	r18, 0x01	; 1
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
          Can_config_rx();       
    139c:	8f ee       	ldi	r24, 0xEF	; 239
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	2f ee       	ldi	r18, 0xEF	; 239
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	f9 01       	movw	r30, r18
    13a6:	20 81       	ld	r18, Z
    13a8:	2f 73       	andi	r18, 0x3F	; 63
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
    13ae:	8f ee       	ldi	r24, 0xEF	; 239
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	2f ee       	ldi	r18, 0xEF	; 239
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	f9 01       	movw	r30, r18
    13b8:	20 81       	ld	r18, Z
    13ba:	20 68       	ori	r18, 0x80	; 128
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
          break;
    13c0:	14 c2       	rjmp	.+1064   	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    13c2:	19 82       	std	Y+1, r1	; 0x01
    13c4:	13 c0       	rjmp	.+38     	; 0x13ec <__stack+0x2ed>
    13c6:	8a ef       	ldi	r24, 0xFA	; 250
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	29 85       	ldd	r18, Y+9	; 0x09
    13cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ce:	f9 01       	movw	r30, r18
    13d0:	47 81       	ldd	r20, Z+7	; 0x07
    13d2:	50 85       	ldd	r21, Z+8	; 0x08
    13d4:	29 81       	ldd	r18, Y+1	; 0x01
    13d6:	22 2f       	mov	r18, r18
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	24 0f       	add	r18, r20
    13dc:	35 1f       	adc	r19, r21
    13de:	f9 01       	movw	r30, r18
    13e0:	20 81       	ld	r18, Z
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	fc 01       	movw	r30, r24
    13f2:	96 81       	ldd	r25, Z+6	; 0x06
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	89 17       	cp	r24, r25
    13f8:	30 f3       	brcs	.-52     	; 0x13c6 <__stack+0x2c7>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    13fa:	1d 82       	std	Y+5, r1	; 0x05
    13fc:	1e 82       	std	Y+6, r1	; 0x06
    13fe:	1f 82       	std	Y+7, r1	; 0x07
    1400:	18 86       	std	Y+8, r1	; 0x08
    1402:	27 ef       	ldi	r18, 0xF7	; 247
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	ce 01       	movw	r24, r28
    1408:	05 96       	adiw	r24, 0x05	; 5
    140a:	03 96       	adiw	r24, 0x03	; 3
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	44 0f       	add	r20, r20
    1414:	44 0f       	add	r20, r20
    1416:	44 0f       	add	r20, r20
    1418:	ce 01       	movw	r24, r28
    141a:	05 96       	adiw	r24, 0x05	; 5
    141c:	02 96       	adiw	r24, 0x02	; 2
    141e:	fc 01       	movw	r30, r24
    1420:	80 81       	ld	r24, Z
    1422:	82 95       	swap	r24
    1424:	86 95       	lsr	r24
    1426:	87 70       	andi	r24, 0x07	; 7
    1428:	84 0f       	add	r24, r20
    142a:	f9 01       	movw	r30, r18
    142c:	80 83       	st	Z, r24
    142e:	26 ef       	ldi	r18, 0xF6	; 246
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	ce 01       	movw	r24, r28
    1434:	05 96       	adiw	r24, 0x05	; 5
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	fc 01       	movw	r30, r24
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	44 0f       	add	r20, r20
    1440:	44 0f       	add	r20, r20
    1442:	44 0f       	add	r20, r20
    1444:	ce 01       	movw	r24, r28
    1446:	05 96       	adiw	r24, 0x05	; 5
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	fc 01       	movw	r30, r24
    144c:	80 81       	ld	r24, Z
    144e:	82 95       	swap	r24
    1450:	86 95       	lsr	r24
    1452:	87 70       	andi	r24, 0x07	; 7
    1454:	84 0f       	add	r24, r20
    1456:	f9 01       	movw	r30, r18
    1458:	80 83       	st	Z, r24
    145a:	25 ef       	ldi	r18, 0xF5	; 245
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	05 96       	adiw	r24, 0x05	; 5
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	44 0f       	add	r20, r20
    146c:	44 0f       	add	r20, r20
    146e:	44 0f       	add	r20, r20
    1470:	ce 01       	movw	r24, r28
    1472:	05 96       	adiw	r24, 0x05	; 5
    1474:	fc 01       	movw	r30, r24
    1476:	80 81       	ld	r24, Z
    1478:	82 95       	swap	r24
    147a:	86 95       	lsr	r24
    147c:	87 70       	andi	r24, 0x07	; 7
    147e:	84 0f       	add	r24, r20
    1480:	f9 01       	movw	r30, r18
    1482:	80 83       	st	Z, r24
    1484:	84 ef       	ldi	r24, 0xF4	; 244
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9e 01       	movw	r18, r28
    148a:	2b 5f       	subi	r18, 0xFB	; 251
    148c:	3f 4f       	sbci	r19, 0xFF	; 255
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	22 0f       	add	r18, r18
    1494:	22 0f       	add	r18, r18
    1496:	22 0f       	add	r18, r18
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    149c:	8f ee       	ldi	r24, 0xEF	; 239
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	2f ee       	ldi	r18, 0xEF	; 239
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	f9 01       	movw	r30, r18
    14a6:	40 81       	ld	r20, Z
    14a8:	29 85       	ldd	r18, Y+9	; 0x09
    14aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ac:	f9 01       	movw	r30, r18
    14ae:	26 81       	ldd	r18, Z+6	; 0x06
    14b0:	24 2b       	or	r18, r20
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	fc 01       	movw	r30, r24
    14be:	22 87       	std	Z+10, r18	; 0x0a
    14c0:	84 ef       	ldi	r24, 0xF4	; 244
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	24 ef       	ldi	r18, 0xF4	; 244
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	24 60       	ori	r18, 0x04	; 4
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
    14d2:	80 ef       	ldi	r24, 0xF0	; 240
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	20 ef       	ldi	r18, 0xF0	; 240
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	f9 01       	movw	r30, r18
    14dc:	20 81       	ld	r18, Z
    14de:	24 60       	ori	r18, 0x04	; 4
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
          Can_set_rplv();
    14e4:	8f ee       	ldi	r24, 0xEF	; 239
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	2f ee       	ldi	r18, 0xEF	; 239
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	f9 01       	movw	r30, r18
    14ee:	20 81       	ld	r18, Z
    14f0:	20 62       	ori	r18, 0x20	; 32
    14f2:	fc 01       	movw	r30, r24
    14f4:	20 83       	st	Z, r18
          Can_clear_idemsk();
    14f6:	84 ef       	ldi	r24, 0xF4	; 244
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	24 ef       	ldi	r18, 0xF4	; 244
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	f9 01       	movw	r30, r18
    1500:	20 81       	ld	r18, Z
    1502:	2e 7f       	andi	r18, 0xFE	; 254
    1504:	fc 01       	movw	r30, r24
    1506:	20 83       	st	Z, r18
          Can_config_rx();       
    1508:	8f ee       	ldi	r24, 0xEF	; 239
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	2f ee       	ldi	r18, 0xEF	; 239
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	f9 01       	movw	r30, r18
    1512:	20 81       	ld	r18, Z
    1514:	2f 73       	andi	r18, 0x3F	; 63
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
    151a:	8f ee       	ldi	r24, 0xEF	; 239
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	2f ee       	ldi	r18, 0xEF	; 239
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	f9 01       	movw	r30, r18
    1524:	20 81       	ld	r18, Z
    1526:	20 68       	ori	r18, 0x80	; 128
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
          break;
    152c:	5e c1       	rjmp	.+700    	; 0x17ea <__stack+0x6eb>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	9a 85       	ldd	r25, Y+10	; 0x0a
    1532:	fc 01       	movw	r30, r24
    1534:	83 85       	ldd	r24, Z+11	; 0x0b
    1536:	88 23       	and	r24, r24
    1538:	09 f4       	brne	.+2      	; 0x153c <__stack+0x43d>
    153a:	69 c0       	rjmp	.+210    	; 0x160e <__stack+0x50f>
    153c:	83 ef       	ldi	r24, 0xF3	; 243
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	29 85       	ldd	r18, Y+9	; 0x09
    1542:	3a 85       	ldd	r19, Y+10	; 0x0a
    1544:	2e 5f       	subi	r18, 0xFE	; 254
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	2d 5f       	subi	r18, 0xFD	; 253
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	f9 01       	movw	r30, r18
    154e:	20 81       	ld	r18, Z
    1550:	42 2f       	mov	r20, r18
    1552:	44 0f       	add	r20, r20
    1554:	44 0f       	add	r20, r20
    1556:	44 0f       	add	r20, r20
    1558:	29 85       	ldd	r18, Y+9	; 0x09
    155a:	3a 85       	ldd	r19, Y+10	; 0x0a
    155c:	2e 5f       	subi	r18, 0xFE	; 254
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	2e 5f       	subi	r18, 0xFE	; 254
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	f9 01       	movw	r30, r18
    1566:	20 81       	ld	r18, Z
    1568:	22 95       	swap	r18
    156a:	26 95       	lsr	r18
    156c:	27 70       	andi	r18, 0x07	; 7
    156e:	24 0f       	add	r18, r20
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
    1574:	82 ef       	ldi	r24, 0xF2	; 242
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	29 85       	ldd	r18, Y+9	; 0x09
    157a:	3a 85       	ldd	r19, Y+10	; 0x0a
    157c:	2e 5f       	subi	r18, 0xFE	; 254
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	2e 5f       	subi	r18, 0xFE	; 254
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	42 2f       	mov	r20, r18
    158a:	44 0f       	add	r20, r20
    158c:	44 0f       	add	r20, r20
    158e:	44 0f       	add	r20, r20
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	2e 5f       	subi	r18, 0xFE	; 254
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	f9 01       	movw	r30, r18
    159e:	20 81       	ld	r18, Z
    15a0:	22 95       	swap	r18
    15a2:	26 95       	lsr	r18
    15a4:	27 70       	andi	r18, 0x07	; 7
    15a6:	24 0f       	add	r18, r20
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
    15ac:	81 ef       	ldi	r24, 0xF1	; 241
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	29 85       	ldd	r18, Y+9	; 0x09
    15b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15b4:	2e 5f       	subi	r18, 0xFE	; 254
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	2f 5f       	subi	r18, 0xFF	; 255
    15ba:	3f 4f       	sbci	r19, 0xFF	; 255
    15bc:	f9 01       	movw	r30, r18
    15be:	20 81       	ld	r18, Z
    15c0:	42 2f       	mov	r20, r18
    15c2:	44 0f       	add	r20, r20
    15c4:	44 0f       	add	r20, r20
    15c6:	44 0f       	add	r20, r20
    15c8:	29 85       	ldd	r18, Y+9	; 0x09
    15ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    15cc:	2e 5f       	subi	r18, 0xFE	; 254
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	f9 01       	movw	r30, r18
    15d2:	20 81       	ld	r18, Z
    15d4:	22 95       	swap	r18
    15d6:	26 95       	lsr	r18
    15d8:	27 70       	andi	r18, 0x07	; 7
    15da:	24 0f       	add	r18, r20
    15dc:	fc 01       	movw	r30, r24
    15de:	20 83       	st	Z, r18
    15e0:	80 ef       	ldi	r24, 0xF0	; 240
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	29 85       	ldd	r18, Y+9	; 0x09
    15e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    15e8:	2e 5f       	subi	r18, 0xFE	; 254
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	f9 01       	movw	r30, r18
    15ee:	20 81       	ld	r18, Z
    15f0:	22 0f       	add	r18, r18
    15f2:	22 0f       	add	r18, r18
    15f4:	22 0f       	add	r18, r18
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 83       	st	Z, r18
    15fa:	8f ee       	ldi	r24, 0xEF	; 239
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	2f ee       	ldi	r18, 0xEF	; 239
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	f9 01       	movw	r30, r18
    1604:	20 81       	ld	r18, Z
    1606:	20 61       	ori	r18, 0x10	; 16
    1608:	fc 01       	movw	r30, r24
    160a:	20 83       	st	Z, r18
    160c:	30 c0       	rjmp	.+96     	; 0x166e <__stack+0x56f>
          else              { Can_set_std_id(cmd->id.std);}
    160e:	83 ef       	ldi	r24, 0xF3	; 243
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	29 85       	ldd	r18, Y+9	; 0x09
    1614:	3a 85       	ldd	r19, Y+10	; 0x0a
    1616:	2e 5f       	subi	r18, 0xFE	; 254
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	f9 01       	movw	r30, r18
    1620:	20 81       	ld	r18, Z
    1622:	42 2f       	mov	r20, r18
    1624:	42 95       	swap	r20
    1626:	44 0f       	add	r20, r20
    1628:	40 7e       	andi	r20, 0xE0	; 224
    162a:	29 85       	ldd	r18, Y+9	; 0x09
    162c:	3a 85       	ldd	r19, Y+10	; 0x0a
    162e:	2e 5f       	subi	r18, 0xFE	; 254
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	f9 01       	movw	r30, r18
    1634:	20 81       	ld	r18, Z
    1636:	26 95       	lsr	r18
    1638:	26 95       	lsr	r18
    163a:	26 95       	lsr	r18
    163c:	24 0f       	add	r18, r20
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18
    1642:	82 ef       	ldi	r24, 0xF2	; 242
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	29 85       	ldd	r18, Y+9	; 0x09
    1648:	3a 85       	ldd	r19, Y+10	; 0x0a
    164a:	2e 5f       	subi	r18, 0xFE	; 254
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	f9 01       	movw	r30, r18
    1650:	20 81       	ld	r18, Z
    1652:	22 95       	swap	r18
    1654:	22 0f       	add	r18, r18
    1656:	20 7e       	andi	r18, 0xE0	; 224
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
    165c:	8f ee       	ldi	r24, 0xEF	; 239
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	2f ee       	ldi	r18, 0xEF	; 239
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	2f 7e       	andi	r18, 0xEF	; 239
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <__stack+0x599>
    1672:	8a ef       	ldi	r24, 0xFA	; 250
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	29 85       	ldd	r18, Y+9	; 0x09
    1678:	3a 85       	ldd	r19, Y+10	; 0x0a
    167a:	f9 01       	movw	r30, r18
    167c:	47 81       	ldd	r20, Z+7	; 0x07
    167e:	50 85       	ldd	r21, Z+8	; 0x08
    1680:	29 81       	ldd	r18, Y+1	; 0x01
    1682:	22 2f       	mov	r18, r18
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	24 0f       	add	r18, r20
    1688:	35 1f       	adc	r19, r21
    168a:	f9 01       	movw	r30, r18
    168c:	20 81       	ld	r18, Z
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	fc 01       	movw	r30, r24
    169e:	96 81       	ldd	r25, Z+6	; 0x06
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	89 17       	cp	r24, r25
    16a4:	30 f3       	brcs	.-52     	; 0x1672 <__stack+0x573>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	dc 01       	movw	r26, r24
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	af 83       	std	Y+7, r26	; 0x07
    16b2:	b8 87       	std	Y+8, r27	; 0x08
    16b4:	27 ef       	ldi	r18, 0xF7	; 247
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	ce 01       	movw	r24, r28
    16ba:	05 96       	adiw	r24, 0x05	; 5
    16bc:	03 96       	adiw	r24, 0x03	; 3
    16be:	fc 01       	movw	r30, r24
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	44 0f       	add	r20, r20
    16c6:	44 0f       	add	r20, r20
    16c8:	44 0f       	add	r20, r20
    16ca:	ce 01       	movw	r24, r28
    16cc:	05 96       	adiw	r24, 0x05	; 5
    16ce:	02 96       	adiw	r24, 0x02	; 2
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	82 95       	swap	r24
    16d6:	86 95       	lsr	r24
    16d8:	87 70       	andi	r24, 0x07	; 7
    16da:	84 0f       	add	r24, r20
    16dc:	f9 01       	movw	r30, r18
    16de:	80 83       	st	Z, r24
    16e0:	26 ef       	ldi	r18, 0xF6	; 246
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	ce 01       	movw	r24, r28
    16e6:	05 96       	adiw	r24, 0x05	; 5
    16e8:	02 96       	adiw	r24, 0x02	; 2
    16ea:	fc 01       	movw	r30, r24
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	44 0f       	add	r20, r20
    16f2:	44 0f       	add	r20, r20
    16f4:	44 0f       	add	r20, r20
    16f6:	ce 01       	movw	r24, r28
    16f8:	05 96       	adiw	r24, 0x05	; 5
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	fc 01       	movw	r30, r24
    16fe:	80 81       	ld	r24, Z
    1700:	82 95       	swap	r24
    1702:	86 95       	lsr	r24
    1704:	87 70       	andi	r24, 0x07	; 7
    1706:	84 0f       	add	r24, r20
    1708:	f9 01       	movw	r30, r18
    170a:	80 83       	st	Z, r24
    170c:	25 ef       	ldi	r18, 0xF5	; 245
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	ce 01       	movw	r24, r28
    1712:	05 96       	adiw	r24, 0x05	; 5
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	fc 01       	movw	r30, r24
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	44 0f       	add	r20, r20
    171e:	44 0f       	add	r20, r20
    1720:	44 0f       	add	r20, r20
    1722:	ce 01       	movw	r24, r28
    1724:	05 96       	adiw	r24, 0x05	; 5
    1726:	fc 01       	movw	r30, r24
    1728:	80 81       	ld	r24, Z
    172a:	82 95       	swap	r24
    172c:	86 95       	lsr	r24
    172e:	87 70       	andi	r24, 0x07	; 7
    1730:	84 0f       	add	r24, r20
    1732:	f9 01       	movw	r30, r18
    1734:	80 83       	st	Z, r24
    1736:	84 ef       	ldi	r24, 0xF4	; 244
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9e 01       	movw	r18, r28
    173c:	2b 5f       	subi	r18, 0xFB	; 251
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	f9 01       	movw	r30, r18
    1742:	20 81       	ld	r18, Z
    1744:	22 0f       	add	r18, r18
    1746:	22 0f       	add	r18, r18
    1748:	22 0f       	add	r18, r18
    174a:	fc 01       	movw	r30, r24
    174c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    174e:	8f ee       	ldi	r24, 0xEF	; 239
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	2f ee       	ldi	r18, 0xEF	; 239
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	f9 01       	movw	r30, r18
    1758:	40 81       	ld	r20, Z
    175a:	29 85       	ldd	r18, Y+9	; 0x09
    175c:	3a 85       	ldd	r19, Y+10	; 0x0a
    175e:	f9 01       	movw	r30, r18
    1760:	26 81       	ldd	r18, Z+6	; 0x06
    1762:	24 2b       	or	r18, r20
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	fc 01       	movw	r30, r24
    1770:	22 87       	std	Z+10, r18	; 0x0a
    1772:	84 ef       	ldi	r24, 0xF4	; 244
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	24 ef       	ldi	r18, 0xF4	; 244
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	f9 01       	movw	r30, r18
    177c:	20 81       	ld	r18, Z
    177e:	24 60       	ori	r18, 0x04	; 4
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    1784:	80 ef       	ldi	r24, 0xF0	; 240
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	20 ef       	ldi	r18, 0xF0	; 240
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	24 60       	ori	r18, 0x04	; 4
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
          Can_set_rplv();
    1796:	8f ee       	ldi	r24, 0xEF	; 239
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	2f ee       	ldi	r18, 0xEF	; 239
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	20 62       	ori	r18, 0x20	; 32
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
          Can_set_idemsk();
    17a8:	84 ef       	ldi	r24, 0xF4	; 244
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	24 ef       	ldi	r18, 0xF4	; 244
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	f9 01       	movw	r30, r18
    17b2:	20 81       	ld	r18, Z
    17b4:	21 60       	ori	r18, 0x01	; 1
    17b6:	fc 01       	movw	r30, r24
    17b8:	20 83       	st	Z, r18
          Can_config_rx();       
    17ba:	8f ee       	ldi	r24, 0xEF	; 239
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	2f ee       	ldi	r18, 0xEF	; 239
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	f9 01       	movw	r30, r18
    17c4:	20 81       	ld	r18, Z
    17c6:	2f 73       	andi	r18, 0x3F	; 63
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 83       	st	Z, r18
    17cc:	8f ee       	ldi	r24, 0xEF	; 239
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	2f ee       	ldi	r18, 0xEF	; 239
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	f9 01       	movw	r30, r18
    17d6:	20 81       	ld	r18, Z
    17d8:	20 68       	ori	r18, 0x80	; 128
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
          break;
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <__stack+0x6eb>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	fc 01       	movw	r30, r24
    17e6:	11 86       	std	Z+9, r1	; 0x09
          break;
    17e8:	00 00       	nop
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <__stack+0x6fb>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	2f e1       	ldi	r18, 0x1F	; 31
    17f2:	fc 01       	movw	r30, r24
    17f4:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <__stack+0x6fd>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
}
    17fc:	2a 96       	adiw	r28, 0x0a	; 10
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	00 d0       	rcall	.+0      	; 0x1814 <can_get_status+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <can_get_status+0x8>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	fc 01       	movw	r30, r24
    1824:	81 85       	ldd	r24, Z+9	; 0x09
    1826:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	88 23       	and	r24, r24
    182c:	31 f0       	breq	.+12     	; 0x183a <can_get_status+0x2c>
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	8f 31       	cpi	r24, 0x1F	; 31
    1832:	19 f0       	breq	.+6      	; 0x183a <can_get_status+0x2c>
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	8f 3f       	cpi	r24, 0xFF	; 255
    1838:	11 f4       	brne	.+4      	; 0x183e <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	11 c1       	rjmp	.+546    	; 0x1a60 <can_get_status+0x252>
    }

    Can_set_mob(cmd->handle);
    183e:	8d ee       	ldi	r24, 0xED	; 237
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	2b 81       	ldd	r18, Y+3	; 0x03
    1844:	3c 81       	ldd	r19, Y+4	; 0x04
    1846:	f9 01       	movw	r30, r18
    1848:	20 81       	ld	r18, Z
    184a:	22 95       	swap	r18
    184c:	20 7f       	andi	r18, 0xF0	; 240
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    1852:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <can_get_mob_status>
    1856:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	80 32       	cpi	r24, 0x20	; 32
    1860:	91 05       	cpc	r25, r1
    1862:	89 f0       	breq	.+34     	; 0x1886 <can_get_status+0x78>
    1864:	81 32       	cpi	r24, 0x21	; 33
    1866:	91 05       	cpc	r25, r1
    1868:	1c f4       	brge	.+6      	; 0x1870 <can_get_status+0x62>
    186a:	89 2b       	or	r24, r25
    186c:	49 f0       	breq	.+18     	; 0x1880 <can_get_status+0x72>
    186e:	e2 c0       	rjmp	.+452    	; 0x1a34 <can_get_status+0x226>
    1870:	80 34       	cpi	r24, 0x40	; 64
    1872:	91 05       	cpc	r25, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <can_get_status+0x6a>
    1876:	ca c0       	rjmp	.+404    	; 0x1a0c <can_get_status+0x1fe>
    1878:	80 3a       	cpi	r24, 0xA0	; 160
    187a:	91 05       	cpc	r25, r1
    187c:	21 f0       	breq	.+8      	; 0x1886 <can_get_status+0x78>
    187e:	da c0       	rjmp	.+436    	; 0x1a34 <can_get_status+0x226>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
            break;
    1884:	ec c0       	rjmp	.+472    	; 0x1a5e <can_get_status+0x250>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1886:	8f ee       	ldi	r24, 0xEF	; 239
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	80 81       	ld	r24, Z
    188e:	28 2f       	mov	r18, r24
    1890:	2f 70       	andi	r18, 0x0F	; 15
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	fc 01       	movw	r30, r24
    1898:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	fc 01       	movw	r30, r24
    18a0:	87 81       	ldd	r24, Z+7	; 0x07
    18a2:	90 85       	ldd	r25, Z+8	; 0x08
    18a4:	0e 94 0a 01 	call	0x214	; 0x214 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    18a8:	80 ef       	ldi	r24, 0xF0	; 240
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	fc 01       	movw	r30, r24
    18ae:	80 81       	ld	r24, Z
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	84 70       	andi	r24, 0x04	; 4
    18b6:	99 27       	eor	r25, r25
    18b8:	95 95       	asr	r25
    18ba:	87 95       	ror	r24
    18bc:	95 95       	asr	r25
    18be:	87 95       	ror	r24
    18c0:	28 2f       	mov	r18, r24
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	fc 01       	movw	r30, r24
    18c8:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    18ca:	8f ee       	ldi	r24, 0xEF	; 239
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	80 71       	andi	r24, 0x10	; 16
    18d8:	99 27       	eor	r25, r25
    18da:	95 95       	asr	r25
    18dc:	87 95       	ror	r24
    18de:	95 95       	asr	r25
    18e0:	87 95       	ror	r24
    18e2:	95 95       	asr	r25
    18e4:	87 95       	ror	r24
    18e6:	95 95       	asr	r25
    18e8:	87 95       	ror	r24
    18ea:	89 2b       	or	r24, r25
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <can_get_status+0xe2>
    18ee:	54 c0       	rjmp	.+168    	; 0x1998 <can_get_status+0x18a>
            {
                cmd->ctrl.ide = 1; // extended frame
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	fc 01       	movw	r30, r24
    18f8:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	02 96       	adiw	r24, 0x02	; 2
    1900:	03 96       	adiw	r24, 0x03	; 3
    1902:	23 ef       	ldi	r18, 0xF3	; 243
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	20 81       	ld	r18, Z
    190a:	26 95       	lsr	r18
    190c:	26 95       	lsr	r18
    190e:	26 95       	lsr	r18
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	02 96       	adiw	r24, 0x02	; 2
    191a:	02 96       	adiw	r24, 0x02	; 2
    191c:	22 ef       	ldi	r18, 0xF2	; 242
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	42 2f       	mov	r20, r18
    1926:	46 95       	lsr	r20
    1928:	46 95       	lsr	r20
    192a:	46 95       	lsr	r20
    192c:	23 ef       	ldi	r18, 0xF3	; 243
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	f9 01       	movw	r30, r18
    1932:	20 81       	ld	r18, Z
    1934:	22 95       	swap	r18
    1936:	22 0f       	add	r18, r18
    1938:	20 7e       	andi	r18, 0xE0	; 224
    193a:	24 0f       	add	r18, r20
    193c:	fc 01       	movw	r30, r24
    193e:	20 83       	st	Z, r18
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	02 96       	adiw	r24, 0x02	; 2
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	21 ef       	ldi	r18, 0xF1	; 241
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	f9 01       	movw	r30, r18
    194e:	20 81       	ld	r18, Z
    1950:	42 2f       	mov	r20, r18
    1952:	46 95       	lsr	r20
    1954:	46 95       	lsr	r20
    1956:	46 95       	lsr	r20
    1958:	22 ef       	ldi	r18, 0xF2	; 242
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	f9 01       	movw	r30, r18
    195e:	20 81       	ld	r18, Z
    1960:	22 95       	swap	r18
    1962:	22 0f       	add	r18, r18
    1964:	20 7e       	andi	r18, 0xE0	; 224
    1966:	24 0f       	add	r18, r20
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	02 96       	adiw	r24, 0x02	; 2
    1972:	20 ef       	ldi	r18, 0xF0	; 240
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	f9 01       	movw	r30, r18
    1978:	20 81       	ld	r18, Z
    197a:	42 2f       	mov	r20, r18
    197c:	46 95       	lsr	r20
    197e:	46 95       	lsr	r20
    1980:	46 95       	lsr	r20
    1982:	21 ef       	ldi	r18, 0xF1	; 241
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	f9 01       	movw	r30, r18
    1988:	20 81       	ld	r18, Z
    198a:	22 95       	swap	r18
    198c:	22 0f       	add	r18, r18
    198e:	20 7e       	andi	r18, 0xE0	; 224
    1990:	24 0f       	add	r18, r20
    1992:	fc 01       	movw	r30, r24
    1994:	20 83       	st	Z, r18
    1996:	26 c0       	rjmp	.+76     	; 0x19e4 <can_get_status+0x1d6>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	fc 01       	movw	r30, r24
    199e:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	02 96       	adiw	r24, 0x02	; 2
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	23 ef       	ldi	r18, 0xF3	; 243
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	f9 01       	movw	r30, r18
    19ae:	20 81       	ld	r18, Z
    19b0:	22 95       	swap	r18
    19b2:	26 95       	lsr	r18
    19b4:	27 70       	andi	r18, 0x07	; 7
    19b6:	fc 01       	movw	r30, r24
    19b8:	20 83       	st	Z, r18
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	02 96       	adiw	r24, 0x02	; 2
    19c0:	22 ef       	ldi	r18, 0xF2	; 242
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	42 2f       	mov	r20, r18
    19ca:	42 95       	swap	r20
    19cc:	46 95       	lsr	r20
    19ce:	47 70       	andi	r20, 0x07	; 7
    19d0:	23 ef       	ldi	r18, 0xF3	; 243
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	f9 01       	movw	r30, r18
    19d6:	20 81       	ld	r18, Z
    19d8:	22 0f       	add	r18, r18
    19da:	22 0f       	add	r18, r18
    19dc:	22 0f       	add	r18, r18
    19de:	24 0f       	add	r18, r20
    19e0:	fc 01       	movw	r30, r24
    19e2:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ea:	fc 01       	movw	r30, r24
    19ec:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    19ee:	8f ee       	ldi	r24, 0xEF	; 239
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	2f ee       	ldi	r18, 0xEF	; 239
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	f9 01       	movw	r30, r18
    19f8:	20 81       	ld	r18, Z
    19fa:	2f 73       	andi	r18, 0x3F	; 63
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a00:	8e ee       	ldi	r24, 0xEE	; 238
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	fc 01       	movw	r30, r24
    1a06:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1a08:	19 82       	std	Y+1, r1	; 0x01
            break;
    1a0a:	29 c0       	rjmp	.+82     	; 0x1a5e <can_get_status+0x250>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	2a 81       	ldd	r18, Y+2	; 0x02
    1a12:	fc 01       	movw	r30, r24
    1a14:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a16:	8f ee       	ldi	r24, 0xEF	; 239
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	2f ee       	ldi	r18, 0xEF	; 239
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	f9 01       	movw	r30, r18
    1a20:	20 81       	ld	r18, Z
    1a22:	2f 73       	andi	r18, 0x3F	; 63
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a28:	8e ee       	ldi	r24, 0xEE	; 238
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1a30:	19 82       	std	Y+1, r1	; 0x01
            break;
    1a32:	15 c0       	rjmp	.+42     	; 0x1a5e <can_get_status+0x250>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1a3e:	8f ee       	ldi	r24, 0xEF	; 239
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	2f ee       	ldi	r18, 0xEF	; 239
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	f9 01       	movw	r30, r18
    1a48:	20 81       	ld	r18, Z
    1a4a:	2f 73       	andi	r18, 0x3F	; 63
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1a50:	8e ee       	ldi	r24, 0xEE	; 238
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	fc 01       	movw	r30, r24
    1a56:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	89 83       	std	Y+1, r24	; 0x01
            break;
    1a5c:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <systimer_10ms_restart>:
#include "systimer.h"

uint32_t systimer_10ms = 0;

void systimer_10ms_restart(uint8_t offset)
{
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	1f 92       	push	r1
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
	//Clear counter
	TCNT1 = 0;
    1a7a:	84 e8       	ldi	r24, 0x84	; 132
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	fc 01       	movw	r30, r24
    1a80:	11 82       	std	Z+1, r1	; 0x01
    1a82:	10 82       	st	Z, r1
	// Set for slot delay (using OCRnB)
	if(offset != 0)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	88 23       	and	r24, r24
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <systimer_10ms_restart+0x3c>
	{
		OCR1A = 250 * offset; //1ms*offset
    1a8a:	88 e8       	ldi	r24, 0x88	; 136
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	29 81       	ldd	r18, Y+1	; 0x01
    1a90:	22 2f       	mov	r18, r18
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	6a ef       	ldi	r22, 0xFA	; 250
    1a96:	62 9f       	mul	r22, r18
    1a98:	a0 01       	movw	r20, r0
    1a9a:	63 9f       	mul	r22, r19
    1a9c:	50 0d       	add	r21, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	9a 01       	movw	r18, r20
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	31 83       	std	Z+1, r19	; 0x01
    1aa6:	20 83       	st	Z, r18
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <systimer_10ms_restart+0x4a>
	}
	else
	{
		OCR1A = 2500;
    1aaa:	88 e8       	ldi	r24, 0x88	; 136
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	24 ec       	ldi	r18, 0xC4	; 196
    1ab0:	39 e0       	ldi	r19, 0x09	; 9
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	31 83       	std	Z+1, r19	; 0x01
    1ab6:	20 83       	st	Z, r18
	}
	TIMSK1 = (1<<OCIE1A);
    1ab8:	8f e6       	ldi	r24, 0x6F	; 111
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	22 e0       	ldi	r18, 0x02	; 2
    1abe:	fc 01       	movw	r30, r24
    1ac0:	20 83       	st	Z, r18
	TCCR1B = 0x0B; // CTC mode and clk/64
    1ac2:	81 e8       	ldi	r24, 0x81	; 129
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	2b e0       	ldi	r18, 0x0B	; 11
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 83       	st	Z, r18

	if(offset == 0)
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	88 23       	and	r24, r24
    1ad0:	a1 f4       	brne	.+40     	; 0x1afa <systimer_10ms_restart+0x8c>
	{
		systimer_10ms += 10;
    1ad2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
    1ad6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
    1ada:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <__data_end+0x2>
    1ade:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <__data_end+0x3>
    1ae2:	0a 96       	adiw	r24, 0x0a	; 10
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	b1 1d       	adc	r27, r1
    1ae8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
    1aec:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
    1af0:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <__data_end+0x2>
    1af4:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <__data_end+0x3>
		handle_10ms_tick();
    1af8:	bc d4       	rcall	.+2424   	; 0x2472 <handle_10ms_tick>

	}
}
    1afa:	0f 90       	pop	r0
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    1b02:	1f 92       	push	r1
    1b04:	0f 92       	push	r0
    1b06:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1b12:	0f 92       	push	r0
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	TIMSK1 &= (0<<OCIE1A);
    1b34:	8f e6       	ldi	r24, 0x6F	; 111
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	fc 01       	movw	r30, r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f e6       	ldi	r24, 0x6F	; 111
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	fc 01       	movw	r30, r24
    1b42:	10 82       	st	Z, r1
	OCR1A = 2500; // Reset Output compare to 10ms
    1b44:	88 e8       	ldi	r24, 0x88	; 136
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	24 ec       	ldi	r18, 0xC4	; 196
    1b4a:	39 e0       	ldi	r19, 0x09	; 9
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	31 83       	std	Z+1, r19	; 0x01
    1b50:	20 83       	st	Z, r18
	systimer_10ms += 10;
    1b52:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
    1b56:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
    1b5a:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <__data_end+0x2>
    1b5e:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <__data_end+0x3>
    1b62:	0a 96       	adiw	r24, 0x0a	; 10
    1b64:	a1 1d       	adc	r26, r1
    1b66:	b1 1d       	adc	r27, r1
    1b68:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
    1b6c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
    1b70:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <__data_end+0x2>
    1b74:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <__data_end+0x3>
	handle_10ms_tick(); // Call the tick handling function
    1b78:	7c d4       	rcall	.+2296   	; 0x2472 <handle_10ms_tick>
	TIMSK1 |= (1<<OCIE1A);
    1b7a:	8f e6       	ldi	r24, 0x6F	; 111
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	2f e6       	ldi	r18, 0x6F	; 111
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	f9 01       	movw	r30, r18
    1b84:	20 81       	ld	r18, Z
    1b86:	22 60       	ori	r18, 0x02	; 2
    1b88:	fc 01       	movw	r30, r24
    1b8a:	20 83       	st	Z, r18
}
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	ff 91       	pop	r31
    1b92:	ef 91       	pop	r30
    1b94:	bf 91       	pop	r27
    1b96:	af 91       	pop	r26
    1b98:	9f 91       	pop	r25
    1b9a:	8f 91       	pop	r24
    1b9c:	7f 91       	pop	r23
    1b9e:	6f 91       	pop	r22
    1ba0:	5f 91       	pop	r21
    1ba2:	4f 91       	pop	r20
    1ba4:	3f 91       	pop	r19
    1ba6:	2f 91       	pop	r18
    1ba8:	0f 90       	pop	r0
    1baa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1bae:	0f 90       	pop	r0
    1bb0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <uart_init>:
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
    return (Uart_rx_ready());
}
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <uart_init+0x6>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <uart_init+0x8>
    1bc2:	1f 92       	push	r1
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	4a 83       	std	Y+2, r20	; 0x02
    1bcc:	5b 83       	std	Y+3, r21	; 0x03
    1bce:	6c 83       	std	Y+4, r22	; 0x04
    1bd0:	7d 83       	std	Y+5, r23	; 0x05
    1bd2:	89 ec       	ldi	r24, 0xC9	; 201
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	10 82       	st	Z, r1
    1bda:	8a ec       	ldi	r24, 0xCA	; 202
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	2e ec       	ldi	r18, 0xCE	; 206
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	f9 01       	movw	r30, r18
    1be4:	20 81       	ld	r18, Z
    1be6:	fc 01       	movw	r30, r24
    1be8:	20 83       	st	Z, r18
    1bea:	88 ec       	ldi	r24, 0xC8	; 200
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	20 e4       	ldi	r18, 0x40	; 64
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
    1bf4:	8a ec       	ldi	r24, 0xCA	; 202
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	26 e0       	ldi	r18, 0x06	; 6
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 83       	st	Z, r18
    1bfe:	8d ec       	ldi	r24, 0xCD	; 205
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	fc 01       	movw	r30, r24
    1c04:	10 82       	st	Z, r1
    1c06:	8c ec       	ldi	r24, 0xCC	; 204
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	10 82       	st	Z, r1
    1c0e:	8d ec       	ldi	r24, 0xCD	; 205
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	fc 01       	movw	r30, r24
    1c14:	10 82       	st	Z, r1
    1c16:	8c ec       	ldi	r24, 0xCC	; 204
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	2f ec       	ldi	r18, 0xCF	; 207
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
    1c20:	88 ec       	ldi	r24, 0xC8	; 200
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	28 ec       	ldi	r18, 0xC8	; 200
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	f9 01       	movw	r30, r18
    1c2a:	20 81       	ld	r18, Z
    1c2c:	22 60       	ori	r18, 0x02	; 2
    1c2e:	fc 01       	movw	r30, r24
    1c30:	20 83       	st	Z, r18
    1c32:	82 2f       	mov	r24, r18
    1c34:	88 23       	and	r24, r24
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <uart_init+0x82>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <uart_init+0x100>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	28 ec       	ldi	r18, 0xC8	; 200
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	f9 01       	movw	r30, r18
    1c46:	20 81       	ld	r18, Z
    1c48:	20 62       	ori	r18, 0x20	; 32
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 83       	st	Z, r18
    1c4e:	89 ec       	ldi	r24, 0xC9	; 201
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	29 ec       	ldi	r18, 0xC9	; 201
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	20 81       	ld	r18, Z
    1c5a:	2b 7f       	andi	r18, 0xFB	; 251
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18
    1c60:	81 ec       	ldi	r24, 0xC1	; 193
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	21 ec       	ldi	r18, 0xC1	; 193
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	f9 01       	movw	r30, r18
    1c6a:	20 81       	ld	r18, Z
    1c6c:	32 2f       	mov	r19, r18
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	24 70       	andi	r18, 0x04	; 4
    1c72:	23 2b       	or	r18, r19
    1c74:	fc 01       	movw	r30, r24
    1c76:	20 83       	st	Z, r18
    1c78:	8a ec       	ldi	r24, 0xCA	; 202
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	28 73       	andi	r18, 0x38	; 56
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
    1c84:	8a ec       	ldi	r24, 0xCA	; 202
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	2a ec       	ldi	r18, 0xCA	; 202
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	20 81       	ld	r18, Z
    1c90:	42 2f       	mov	r20, r18
    1c92:	29 81       	ldd	r18, Y+1	; 0x01
    1c94:	22 2f       	mov	r18, r18
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	23 70       	andi	r18, 0x03	; 3
    1c9a:	33 27       	eor	r19, r19
    1c9c:	22 0f       	add	r18, r18
    1c9e:	33 1f       	adc	r19, r19
    1ca0:	24 2b       	or	r18, r20
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
    1ca6:	89 ec       	ldi	r24, 0xC9	; 201
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	29 ec       	ldi	r18, 0xC9	; 201
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	f9 01       	movw	r30, r18
    1cb0:	20 81       	ld	r18, Z
    1cb2:	28 61       	ori	r18, 0x18	; 24
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	20 83       	st	Z, r18
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <uart_putchar>:
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	1f 92       	push	r1
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    while(!Uart_tx_ready());
    1cd6:	00 00       	nop
    1cd8:	88 ec       	ldi	r24, 0xC8	; 200
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	fc 01       	movw	r30, r24
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	80 72       	andi	r24, 0x20	; 32
    1ce6:	99 27       	eor	r25, r25
    1ce8:	95 95       	asr	r25
    1cea:	87 95       	ror	r24
    1cec:	95 95       	asr	r25
    1cee:	87 95       	ror	r24
    1cf0:	95 95       	asr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	95 95       	asr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	95 95       	asr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	89 2b       	or	r24, r25
    1cfe:	61 f3       	breq	.-40     	; 0x1cd8 <uart_putchar+0xe>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    1d00:	8e ec       	ldi	r24, 0xCE	; 206
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	29 81       	ldd	r18, Y+1	; 0x01
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 83       	st	Z, r18
    return (ch);
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <uart_getchar>:
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	1f 92       	push	r1
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    U8 ch;

    while(!Uart_rx_ready());
    1d1e:	00 00       	nop
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	80 81       	ld	r24, Z
    1d28:	88 1f       	adc	r24, r24
    1d2a:	88 27       	eor	r24, r24
    1d2c:	88 1f       	adc	r24, r24
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	99 27       	eor	r25, r25
    1d34:	89 2b       	or	r24, r25
    1d36:	a1 f3       	breq	.-24     	; 0x1d20 <uart_getchar+0xc>
    ch = Uart_get_byte();
    1d38:	8e ec       	ldi	r24, 0xCE	; 206
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	80 81       	ld	r24, Z
    1d40:	89 83       	std	Y+1, r24	; 0x01
    Uart_ack_rx_byte();
    return ch;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	0f 90       	pop	r0
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    cli();
    1d54:	f8 94       	cli
    return 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
}
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	08 95       	ret

00001d5e <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <__iRestore+0x6>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    1d6c:	8f e5       	ldi	r24, 0x5F	; 95
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	29 81       	ldd	r18, Y+1	; 0x01
    1d72:	3a 81       	ldd	r19, Y+2	; 0x02
    1d74:	f9 01       	movw	r30, r18
    1d76:	20 81       	ld	r18, Z
    1d78:	fc 01       	movw	r30, r24
    1d7a:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <gyro_init>:
int16_t gyro_x = 0;
int16_t gyro_y = 0;
int16_t gyro_z = 0;

uint8_t gyro_init(void)
{	
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62

	gyro_write(GYRO_PWR_MGM, 0x80);		// reset gyro for init
    1d8e:	60 e8       	ldi	r22, 0x80	; 128
    1d90:	8e e3       	ldi	r24, 0x3E	; 62
    1d92:	11 d0       	rcall	.+34     	; 0x1db6 <gyro_write>
	gyro_write(GYRO_SMPLRT_DIV, 0x00);		// set sample rate divider to 0
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	85 e1       	ldi	r24, 0x15	; 21
    1d98:	0e d0       	rcall	.+28     	; 0x1db6 <gyro_write>
	gyro_write(GYRO_INT_CFG, 0x00);		// set interrupt configuration
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	87 e1       	ldi	r24, 0x17	; 23
    1d9e:	0b d0       	rcall	.+22     	; 0x1db6 <gyro_write>

	/*
	*	Set Digital Low Pass Filter and Sample Rate
	*	DLPF and Sample rate must be set for proper operation
	*/
	if(gyro_write(GYRO_DLPF_FS,FILTER_20_RATE_1))
    1da0:	6c e1       	ldi	r22, 0x1C	; 28
    1da2:	86 e1       	ldi	r24, 0x16	; 22
    1da4:	08 d0       	rcall	.+16     	; 0x1db6 <gyro_write>
    1da6:	88 23       	and	r24, r24
    1da8:	11 f0       	breq	.+4      	; 0x1dae <gyro_init+0x28>
	{
		return 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <gyro_init+0x2a>
	}

	//if unable to write sample rate, init fail
	return 0;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
}
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <gyro_write>:
* Function to Write data to Gyro
* Reg: register address to be written to 
* Val: Value to be written to register
*/
uint8_t gyro_write(uint8_t reg,uint8_t val)
{	
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <gyro_write+0x6>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	6a 83       	std	Y+2, r22	; 0x02
	//Write sequence start+write, Register address,data, stop

	if(i2c_start(GYRO_ADDR+I2C_WRITE))
    1dc4:	80 ed       	ldi	r24, 0xD0	; 208
    1dc6:	c9 d3       	rcall	.+1938   	; 0x255a <i2c_start>
    1dc8:	88 23       	and	r24, r24
    1dca:	19 f0       	breq	.+6      	; 0x1dd2 <gyro_write+0x1c>
	{
		i2c_stop();
    1dcc:	17 d4       	rcall	.+2094   	; 0x25fc <i2c_stop>
		return 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <gyro_write+0x28>
	}

	i2c_write(reg);
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	2a d4       	rcall	.+2132   	; 0x262a <i2c_write>
	i2c_write(val);
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 d4       	rcall	.+2128   	; 0x262a <i2c_write>
	i2c_stop();
    1dda:	10 d4       	rcall	.+2080   	; 0x25fc <i2c_stop>

	return 0;
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	08 95       	ret

00001de8 <gyro_read>:
* buf: pointer to buffer to store data 
* num: number of bytes to read
* Return: 0 on success
*/
uint8_t gyro_read(uint8_t start_reg,uint8_t *buf,uint8_t num)
{
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <gyro_read+0xa>
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <gyro_read+0xc>
    1df4:	1f 92       	push	r1
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
    1dfc:	7c 83       	std	Y+4, r23	; 0x04
    1dfe:	6b 83       	std	Y+3, r22	; 0x03
    1e00:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t i;

	if(i2c_start(GYRO_ADDR+I2C_WRITE))
    1e02:	80 ed       	ldi	r24, 0xD0	; 208
    1e04:	aa d3       	rcall	.+1876   	; 0x255a <i2c_start>
    1e06:	88 23       	and	r24, r24
    1e08:	11 f0       	breq	.+4      	; 0x1e0e <gyro_read+0x26>
	{
		return 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	31 c0       	rjmp	.+98     	; 0x1e70 <gyro_read+0x88>
	}

	i2c_write(start_reg);
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	0c d4       	rcall	.+2072   	; 0x262a <i2c_write>
	if(i2c_rep_start(GYRO_ADDR+I2C_READ))
    1e12:	81 ed       	ldi	r24, 0xD1	; 209
    1e14:	e7 d3       	rcall	.+1998   	; 0x25e4 <i2c_rep_start>
    1e16:	88 23       	and	r24, r24
    1e18:	19 f0       	breq	.+6      	; 0x1e20 <gyro_read+0x38>
	{
		i2c_stop();
    1e1a:	f0 d3       	rcall	.+2016   	; 0x25fc <i2c_stop>
		return 2;
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	28 c0       	rjmp	.+80     	; 0x1e70 <gyro_read+0x88>
	}
	for(i = 0;i < num-1;i++)
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <gyro_read+0x58>
	{
		buf[i] = i2c_read(ACK);
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2e:	89 01       	movw	r16, r18
    1e30:	08 0f       	add	r16, r24
    1e32:	19 1f       	adc	r17, r25
    1e34:	22 d4       	rcall	.+2116   	; 0x267a <i2c_readAck>
    1e36:	f8 01       	movw	r30, r16
    1e38:	80 83       	st	Z, r24
	if(i2c_rep_start(GYRO_ADDR+I2C_READ))
	{
		i2c_stop();
		return 2;
	}
	for(i = 0;i < num-1;i++)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	28 17       	cp	r18, r24
    1e50:	39 07       	cpc	r19, r25
    1e52:	44 f3       	brlt	.-48     	; 0x1e24 <gyro_read+0x3c>
	{
		buf[i] = i2c_read(ACK);
	}

	buf[num-1] = i2c_read(NACK);
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e60:	89 01       	movw	r16, r18
    1e62:	08 0f       	add	r16, r24
    1e64:	19 1f       	adc	r17, r25
    1e66:	20 d4       	rcall	.+2112   	; 0x26a8 <i2c_readNak>
    1e68:	f8 01       	movw	r30, r16
    1e6a:	80 83       	st	Z, r24

	i2c_stop();
    1e6c:	c7 d3       	rcall	.+1934   	; 0x25fc <i2c_stop>

	return 0;
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <gyro_get_values>:
* Scales value to degrees/sec, 14.375 degrees/sec per LSB
* Input: Void
* Return: Void
*/
void gyro_get_values(void)
{
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	65 97       	sbiw	r28, 0x15	; 21
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[7];
	int32_t x,y,z;
	
#ifdef DEBUG
	data[0] = 0xff;
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	8e 87       	std	Y+14, r24	; 0x0e
	data[1] = 0xff;
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	8f 87       	std	Y+15, r24	; 0x0f
	data[2] = 0xff;
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	88 8b       	std	Y+16, r24	; 0x10
	data[3] = 0xff;
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	89 8b       	std	Y+17, r24	; 0x11
	data[4] = 0xff;
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	8a 8b       	std	Y+18, r24	; 0x12
	data[5] = 0xff;
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	8b 8b       	std	Y+19, r24	; 0x13
	data[6] = 0xff;
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	8c 8b       	std	Y+20, r24	; 0x14
#endif

	gyro_read(GYRO_XOUT_H,&data,7);
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	0e 96       	adiw	r24, 0x0e	; 14
    1eb8:	47 e0       	ldi	r20, 0x07	; 7
    1eba:	bc 01       	movw	r22, r24
    1ebc:	8d e1       	ldi	r24, 0x1D	; 29
    1ebe:	94 df       	rcall	.-216    	; 0x1de8 <gyro_read>

	x = ((((int16_t)(data[0])) << 8) &0xFF00) + (((int16_t)data[1]) & 0x00FF);
    1ec0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	88 27       	eor	r24, r24
    1eca:	9c 01       	movw	r18, r24
    1ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	99 27       	eor	r25, r25
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	cc 01       	movw	r24, r24
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	9b 83       	std	Y+3, r25	; 0x03
    1ee2:	ac 83       	std	Y+4, r26	; 0x04
    1ee4:	bd 83       	std	Y+5, r27	; 0x05
	y = ((((int16_t)(data[2])) << 8) &0xFF00) + (((int16_t)data[3]) & 0x00FF);
    1ee6:	88 89       	ldd	r24, Y+16	; 0x10
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	98 2f       	mov	r25, r24
    1eee:	88 27       	eor	r24, r24
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	99 27       	eor	r25, r25
    1efa:	82 0f       	add	r24, r18
    1efc:	93 1f       	adc	r25, r19
    1efe:	cc 01       	movw	r24, r24
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	8e 83       	std	Y+6, r24	; 0x06
    1f06:	9f 83       	std	Y+7, r25	; 0x07
    1f08:	a8 87       	std	Y+8, r26	; 0x08
    1f0a:	b9 87       	std	Y+9, r27	; 0x09
	z = ((((int16_t)(data[4])) << 8) &0xFF00) + (((int16_t)data[5]) & 0x00FF);
    1f0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 2f       	mov	r25, r24
    1f14:	88 27       	eor	r24, r24
    1f16:	9c 01       	movw	r18, r24
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	99 27       	eor	r25, r25
    1f20:	82 0f       	add	r24, r18
    1f22:	93 1f       	adc	r25, r19
    1f24:	cc 01       	movw	r24, r24
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	8a 87       	std	Y+10, r24	; 0x0a
    1f2c:	9b 87       	std	Y+11, r25	; 0x0b
    1f2e:	ac 87       	std	Y+12, r26	; 0x0c
    1f30:	bd 87       	std	Y+13, r27	; 0x0d
	//x = (GYRO_SCALE_NUM*((int32_t)(x)))/GYRO_SCALE_DEN;
	//y = (GYRO_SCALE_NUM*((int32_t)(y)))/GYRO_SCALE_DEN;
	//z = (GYRO_SCALE_NUM*((int32_t)(z)))/GYRO_SCALE_DEN;

	// Guarantee atomic write
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1f32:	8f e5       	ldi	r24, 0x5F	; 95
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	fc 01       	movw	r30, r24
    1f38:	80 81       	ld	r24, Z
    1f3a:	8d 8b       	std	Y+21, r24	; 0x15
    1f3c:	07 df       	rcall	.-498    	; 0x1d4c <__iCliRetVal>
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	13 c0       	rjmp	.+38     	; 0x1f68 <gyro_get_values+0xe4>
	{	
		gyro_x = (int16_t)x;
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <gyro_x+0x1>
    1f4a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <gyro_x>
		gyro_y = (int16_t)y;
    1f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f50:	9f 81       	ldd	r25, Y+7	; 0x07
    1f52:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <gyro_y+0x1>
    1f56:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <gyro_y>
		gyro_z = (int16_t)z;
    1f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_z+0x1>
    1f62:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_z>
	//x = (GYRO_SCALE_NUM*((int32_t)(x)))/GYRO_SCALE_DEN;
	//y = (GYRO_SCALE_NUM*((int32_t)(y)))/GYRO_SCALE_DEN;
	//z = (GYRO_SCALE_NUM*((int32_t)(z)))/GYRO_SCALE_DEN;

	// Guarantee atomic write
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1f66:	19 82       	std	Y+1, r1	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	88 23       	and	r24, r24
    1f6c:	51 f7       	brne	.-44     	; 0x1f42 <gyro_get_values+0xbe>
    1f6e:	ce 01       	movw	r24, r28
    1f70:	45 96       	adiw	r24, 0x15	; 21
    1f72:	f5 de       	rcall	.-534    	; 0x1d5e <__iRestore>
		gyro_y = (int16_t)y;
		gyro_z = (int16_t)z;

	}

}
    1f74:	65 96       	adiw	r28, 0x15	; 21
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <mcu_init>:
 */


#include "IMU.h"

int mcu_init(){
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	a1 97       	sbiw	r28, 0x21	; 33
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	Disable_interrupt();
    1f9a:	f8 94       	cli
	//Set DDR for port D and E for LEDs
	DDRD|= (1<<PD7);
    1f9c:	8a e2       	ldi	r24, 0x2A	; 42
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	2a e2       	ldi	r18, 0x2A	; 42
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	20 81       	ld	r18, Z
    1fa8:	20 68       	ori	r18, 0x80	; 128
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
	DDRE|= (1<<PE6);
    1fae:	8d e2       	ldi	r24, 0x2D	; 45
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	2d e2       	ldi	r18, 0x2D	; 45
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	20 81       	ld	r18, Z
    1fba:	20 64       	ori	r18, 0x40	; 64
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	20 83       	st	Z, r18
	
		

#ifdef DEBUG
	stdout = stdin = &uart_str;
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__iob+0x1>
    1fc8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__iob>
    1fcc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__iob>
    1fd0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__iob+0x1>
    1fd4:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__iob+0x3>
    1fd8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__iob+0x2>
	uart_init(CONF_8BIT_NOPAR_1STOP, UART_BAUDRATE);
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	55 e2       	ldi	r21, 0x25	; 37
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	e9 dd       	rcall	.-1070   	; 0x1bba <uart_init>
	//uart only utilized for usb/serial debugging purposes
	uint8_t resp;
#endif

	//CAN Init section
	Can_reset();
    1fe8:	88 ed       	ldi	r24, 0xD8	; 216
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	21 e0       	ldi	r18, 0x01	; 1
    1fee:	fc 01       	movw	r30, r24
    1ff0:	20 83       	st	Z, r18
	can_init(1);
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	0e 94 57 01 	call	0x2ae	; 0x2ae <can_init>
	while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    1ff8:	00 00       	nop
    1ffa:	89 ed       	ldi	r24, 0xD9	; 217
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	fc 01       	movw	r30, r24
    2000:	80 81       	ld	r24, Z
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	84 70       	andi	r24, 0x04	; 4
    2008:	99 27       	eor	r25, r25
    200a:	89 2b       	or	r24, r25
    200c:	b1 f3       	breq	.-20     	; 0x1ffa <mcu_init+0x74>
	CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    200e:	8a ed       	ldi	r24, 0xDA	; 218
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	2f ef       	ldi	r18, 0xFF	; 255
    2014:	fc 01       	movw	r30, r24
    2016:	20 83       	st	Z, r18
	can_clear_all_mob();				//Clear all Mobs
    2018:	0e 94 75 00 	call	0xea	; 0xea <can_clear_all_mob>

	//InitCanMsgs();
	imu.id.std = IMU;
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e7       	ldi	r25, 0x70	; 112
    2020:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <imu+0x3>
    2024:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <imu+0x2>
	imu.pt_data = &data[0];//point msg data to data buffer
    2028:	86 e5       	ldi	r24, 0x56	; 86
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <imu+0x8>
    2030:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <imu+0x7>
	imu.cmd = CMD_TX;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <imu+0x1>
	imu.dlc = 6;
    203a:	86 e0       	ldi	r24, 0x06	; 6
    203c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <imu+0x6>


i2c_init();
    2040:	7c d2       	rcall	.+1272   	; 0x253a <i2c_init>

#ifdef DEBUG
	printf("Start\n");
    2042:	8e e0       	ldi	r24, 0x0E	; 14
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	f9 d4       	rcall	.+2546   	; 0x2a3a <puts>

//	if((resp = acl_init())!= 0)	printf("ACL initialization error: %u\n",resp);
//	_delay_us(1000);
	if((resp = gyro_init())!= 0) printf("Gyro initialization error: %u\n", resp);
    2048:	9e de       	rcall	.-708    	; 0x1d86 <gyro_init>
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	88 23       	and	r24, r24
    2050:	99 f0       	breq	.+38     	; 0x2078 <mcu_init+0xf2>
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	29 2f       	mov	r18, r25
    205a:	2f 93       	push	r18
    205c:	8f 93       	push	r24
    205e:	84 e1       	ldi	r24, 0x14	; 20
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	89 2f       	mov	r24, r25
    2064:	8f 93       	push	r24
    2066:	84 e1       	ldi	r24, 0x14	; 20
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	8f 93       	push	r24
    206c:	d3 d4       	rcall	.+2470   	; 0x2a14 <printf>
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	03 c0       	rjmp	.+6      	; 0x207e <mcu_init+0xf8>
	else printf("gyro Init ok\n");
    2078:	83 e3       	ldi	r24, 0x33	; 51
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	de d4       	rcall	.+2492   	; 0x2a3a <puts>
	gyro_x = 0xCA;
    207e:	8a ec       	ldi	r24, 0xCA	; 202
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <gyro_x+0x1>
    2086:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <gyro_x>
	gyro_y = 0xCA;
    208a:	8a ec       	ldi	r24, 0xCA	; 202
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <gyro_y+0x1>
    2092:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <gyro_y>
	gyro_z = 0xCA;	
    2096:	8a ec       	ldi	r24, 0xCA	; 202
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <gyro_z+0x1>
    209e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <gyro_z>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a8 ec       	ldi	r26, 0xC8	; 200
    20a8:	b2 e4       	ldi	r27, 0x42	; 66
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	9b 83       	std	Y+3, r25	; 0x03
    20ae:	ac 83       	std	Y+4, r26	; 0x04
    20b0:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    20b2:	2b ea       	ldi	r18, 0xAB	; 171
    20b4:	3a ea       	ldi	r19, 0xAA	; 170
    20b6:	4a ea       	ldi	r20, 0xAA	; 170
    20b8:	5e e3       	ldi	r21, 0x3E	; 62
    20ba:	6a 81       	ldd	r22, Y+2	; 0x02
    20bc:	7b 81       	ldd	r23, Y+3	; 0x03
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	1a d4       	rcall	.+2100   	; 0x28f8 <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e 83       	std	Y+6, r24	; 0x06
    20ca:	9f 83       	std	Y+7, r25	; 0x07
    20cc:	a8 87       	std	Y+8, r26	; 0x08
    20ce:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5e e3       	ldi	r21, 0x3E	; 62
    20d8:	6a 81       	ldd	r22, Y+2	; 0x02
    20da:	7b 81       	ldd	r23, Y+3	; 0x03
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	9d 81       	ldd	r25, Y+5	; 0x05
    20e0:	0b d4       	rcall	.+2070   	; 0x28f8 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8a 87       	std	Y+10, r24	; 0x0a
    20e8:	9b 87       	std	Y+11, r25	; 0x0b
    20ea:	ac 87       	std	Y+12, r26	; 0x0c
    20ec:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	6e 81       	ldd	r22, Y+6	; 0x06
    20f8:	7f 81       	ldd	r23, Y+7	; 0x07
    20fa:	88 85       	ldd	r24, Y+8	; 0x08
    20fc:	99 85       	ldd	r25, Y+9	; 0x09
    20fe:	eb d2       	rcall	.+1494   	; 0x26d6 <__cmpsf2>
    2100:	88 23       	and	r24, r24
    2102:	1c f4       	brge	.+6      	; 0x210a <mcu_init+0x184>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8e 87       	std	Y+14, r24	; 0x0e
    2108:	a7 c0       	rjmp	.+334    	; 0x2258 <mcu_init+0x2d2>
	else if (__tmp2 > 65535)
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	6a 85       	ldd	r22, Y+10	; 0x0a
    2114:	7b 85       	ldd	r23, Y+11	; 0x0b
    2116:	8c 85       	ldd	r24, Y+12	; 0x0c
    2118:	9d 85       	ldd	r25, Y+13	; 0x0d
    211a:	ea d3       	rcall	.+2004   	; 0x28f0 <__gesf2>
    211c:	18 16       	cp	r1, r24
    211e:	0c f0       	brlt	.+2      	; 0x2122 <mcu_init+0x19c>
    2120:	74 c0       	rjmp	.+232    	; 0x220a <mcu_init+0x284>
	{
		_delay_ms(__us / 1000.0);
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a e7       	ldi	r20, 0x7A	; 122
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	6a 81       	ldd	r22, Y+2	; 0x02
    212c:	7b 81       	ldd	r23, Y+3	; 0x03
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	9d 81       	ldd	r25, Y+5	; 0x05
    2132:	d5 d2       	rcall	.+1450   	; 0x26de <__divsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8f 87       	std	Y+15, r24	; 0x0f
    213a:	98 8b       	std	Y+16, r25	; 0x10
    213c:	a9 8b       	std	Y+17, r26	; 0x11
    213e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a e7       	ldi	r20, 0x7A	; 122
    2146:	53 e4       	ldi	r21, 0x43	; 67
    2148:	6f 85       	ldd	r22, Y+15	; 0x0f
    214a:	78 89       	ldd	r23, Y+16	; 0x10
    214c:	89 89       	ldd	r24, Y+17	; 0x11
    214e:	9a 89       	ldd	r25, Y+18	; 0x12
    2150:	d3 d3       	rcall	.+1958   	; 0x28f8 <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8b 8b       	std	Y+19, r24	; 0x13
    2158:	9c 8b       	std	Y+20, r25	; 0x14
    215a:	ad 8b       	std	Y+21, r26	; 0x15
    215c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	6b 89       	ldd	r22, Y+19	; 0x13
    2168:	7c 89       	ldd	r23, Y+20	; 0x14
    216a:	8d 89       	ldd	r24, Y+21	; 0x15
    216c:	9e 89       	ldd	r25, Y+22	; 0x16
    216e:	b3 d2       	rcall	.+1382   	; 0x26d6 <__cmpsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <mcu_init+0x1f8>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	98 8f       	std	Y+24, r25	; 0x18
    217a:	8f 8b       	std	Y+23, r24	; 0x17
    217c:	3b c0       	rjmp	.+118    	; 0x21f4 <mcu_init+0x26e>
	else if (__tmp > 65535)
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	3f ef       	ldi	r19, 0xFF	; 255
    2182:	4f e7       	ldi	r20, 0x7F	; 127
    2184:	57 e4       	ldi	r21, 0x47	; 71
    2186:	6b 89       	ldd	r22, Y+19	; 0x13
    2188:	7c 89       	ldd	r23, Y+20	; 0x14
    218a:	8d 89       	ldd	r24, Y+21	; 0x15
    218c:	9e 89       	ldd	r25, Y+22	; 0x16
    218e:	b0 d3       	rcall	.+1888   	; 0x28f0 <__gesf2>
    2190:	18 16       	cp	r1, r24
    2192:	3c f5       	brge	.+78     	; 0x21e2 <mcu_init+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	6f 85       	ldd	r22, Y+15	; 0x0f
    219e:	78 89       	ldd	r23, Y+16	; 0x10
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	9a 89       	ldd	r25, Y+18	; 0x12
    21a4:	a9 d3       	rcall	.+1874   	; 0x28f8 <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	ff d2       	rcall	.+1534   	; 0x27ae <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	98 8f       	std	Y+24, r25	; 0x18
    21b6:	8f 8b       	std	Y+23, r24	; 0x17
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <mcu_init+0x252>
    21ba:	89 e1       	ldi	r24, 0x19	; 25
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9a 8f       	std	Y+26, r25	; 0x1a
    21c0:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c2:	89 8d       	ldd	r24, Y+25	; 0x19
    21c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <mcu_init+0x240>
    21ca:	9a 8f       	std	Y+26, r25	; 0x1a
    21cc:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8f 89       	ldd	r24, Y+23	; 0x17
    21d0:	98 8d       	ldd	r25, Y+24	; 0x18
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	98 8f       	std	Y+24, r25	; 0x18
    21d6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	89 2b       	or	r24, r25
    21de:	69 f7       	brne	.-38     	; 0x21ba <mcu_init+0x234>
    21e0:	3b c0       	rjmp	.+118    	; 0x2258 <mcu_init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6b 89       	ldd	r22, Y+19	; 0x13
    21e4:	7c 89       	ldd	r23, Y+20	; 0x14
    21e6:	8d 89       	ldd	r24, Y+21	; 0x15
    21e8:	9e 89       	ldd	r25, Y+22	; 0x16
    21ea:	e1 d2       	rcall	.+1474   	; 0x27ae <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	98 8f       	std	Y+24, r25	; 0x18
    21f2:	8f 8b       	std	Y+23, r24	; 0x17
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	9c 8f       	std	Y+28, r25	; 0x1c
    21fa:	8b 8f       	std	Y+27, r24	; 0x1b
    21fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <mcu_init+0x27a>
    2204:	9c 8f       	std	Y+28, r25	; 0x1c
    2206:	8b 8f       	std	Y+27, r24	; 0x1b
    2208:	27 c0       	rjmp	.+78     	; 0x2258 <mcu_init+0x2d2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	53 e4       	ldi	r21, 0x43	; 67
    2212:	6e 81       	ldd	r22, Y+6	; 0x06
    2214:	7f 81       	ldd	r23, Y+7	; 0x07
    2216:	88 85       	ldd	r24, Y+8	; 0x08
    2218:	99 85       	ldd	r25, Y+9	; 0x09
    221a:	6a d3       	rcall	.+1748   	; 0x28f0 <__gesf2>
    221c:	18 16       	cp	r1, r24
    221e:	a4 f4       	brge	.+40     	; 0x2248 <mcu_init+0x2c2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2220:	6a 85       	ldd	r22, Y+10	; 0x0a
    2222:	7b 85       	ldd	r23, Y+11	; 0x0b
    2224:	8c 85       	ldd	r24, Y+12	; 0x0c
    2226:	9d 85       	ldd	r25, Y+13	; 0x0d
    2228:	c2 d2       	rcall	.+1412   	; 0x27ae <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 8f       	std	Y+30, r25	; 0x1e
    2230:	8d 8f       	std	Y+29, r24	; 0x1d
    2232:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2234:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2236:	98 a3       	std	Y+32, r25	; 0x20
    2238:	8f 8f       	std	Y+31, r24	; 0x1f
    223a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    223c:	98 a1       	ldd	r25, Y+32	; 0x20
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <mcu_init+0x2b8>
    2242:	98 a3       	std	Y+32, r25	; 0x20
    2244:	8f 8f       	std	Y+31, r24	; 0x1f
    2246:	0e c0       	rjmp	.+28     	; 0x2264 <mcu_init+0x2de>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2248:	6e 81       	ldd	r22, Y+6	; 0x06
    224a:	7f 81       	ldd	r23, Y+7	; 0x07
    224c:	88 85       	ldd	r24, Y+8	; 0x08
    224e:	99 85       	ldd	r25, Y+9	; 0x09
    2250:	ae d2       	rcall	.+1372   	; 0x27ae <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8e 87       	std	Y+14, r24	; 0x0e
    2258:	8e 85       	ldd	r24, Y+14	; 0x0e
    225a:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    225c:	89 a1       	ldd	r24, Y+33	; 0x21
    225e:	8a 95       	dec	r24
    2260:	f1 f7       	brne	.-4      	; 0x225e <mcu_init+0x2d8>
    2262:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(100);
#endif
 
	

	systimer_10ms_restart(10);
    2264:	8a e0       	ldi	r24, 0x0A	; 10
    2266:	03 dc       	rcall	.-2042   	; 0x1a6e <systimer_10ms_restart>
	
	return 0;
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
}
    226c:	a1 96       	adiw	r28, 0x21	; 33
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	08 95       	ret

0000227e <main>:

int main(void)
{	
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	a3 97       	sbiw	r28, 0x23	; 35
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
	mcu_init();
    2292:	79 de       	rcall	.-782    	; 0x1f86 <mcu_init>
	int i = 0;
    2294:	1a 82       	std	Y+2, r1	; 0x02
    2296:	19 82       	std	Y+1, r1	; 0x01
	
	Enable_interrupt();
    2298:	78 94       	sei
	while(1)
	{
		//	acl_get_values();
		//	_delay_us(100);
			gyro_get_values();
    229a:	f4 dd       	rcall	.-1048   	; 0x1e84 <gyro_get_values>
		i++;
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a8 ec       	ldi	r26, 0xC8	; 200
    22ac:	b2 e4       	ldi	r27, 0x42	; 66
    22ae:	8b 83       	std	Y+3, r24	; 0x03
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	ad 83       	std	Y+5, r26	; 0x05
    22b4:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    22b6:	2b ea       	ldi	r18, 0xAB	; 171
    22b8:	3a ea       	ldi	r19, 0xAA	; 170
    22ba:	4a ea       	ldi	r20, 0xAA	; 170
    22bc:	5e e3       	ldi	r21, 0x3E	; 62
    22be:	6b 81       	ldd	r22, Y+3	; 0x03
    22c0:	7c 81       	ldd	r23, Y+4	; 0x04
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	18 d3       	rcall	.+1584   	; 0x28f8 <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5e e3       	ldi	r21, 0x3E	; 62
    22dc:	6b 81       	ldd	r22, Y+3	; 0x03
    22de:	7c 81       	ldd	r23, Y+4	; 0x04
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	09 d3       	rcall	.+1554   	; 0x28f8 <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8b 87       	std	Y+11, r24	; 0x0b
    22ec:	9c 87       	std	Y+12, r25	; 0x0c
    22ee:	ad 87       	std	Y+13, r26	; 0x0d
    22f0:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	e9 d1       	rcall	.+978    	; 0x26d6 <__cmpsf2>
    2304:	88 23       	and	r24, r24
    2306:	1c f4       	brge	.+6      	; 0x230e <main+0x90>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8f 87       	std	Y+15, r24	; 0x0f
    230c:	ab c0       	rjmp	.+342    	; 0x2464 <main+0x1e6>
	else if (__tmp2 > 65535)
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	e8 d2       	rcall	.+1488   	; 0x28f0 <__gesf2>
    2320:	18 16       	cp	r1, r24
    2322:	0c f0       	brlt	.+2      	; 0x2326 <main+0xa8>
    2324:	78 c0       	rjmp	.+240    	; 0x2416 <main+0x198>
	{
		_delay_ms(__us / 1000.0);
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	6b 81       	ldd	r22, Y+3	; 0x03
    2330:	7c 81       	ldd	r23, Y+4	; 0x04
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	d3 d1       	rcall	.+934    	; 0x26de <__divsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	88 8b       	std	Y+16, r24	; 0x10
    233e:	99 8b       	std	Y+17, r25	; 0x11
    2340:	aa 8b       	std	Y+18, r26	; 0x12
    2342:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a e7       	ldi	r20, 0x7A	; 122
    234a:	53 e4       	ldi	r21, 0x43	; 67
    234c:	68 89       	ldd	r22, Y+16	; 0x10
    234e:	79 89       	ldd	r23, Y+17	; 0x11
    2350:	8a 89       	ldd	r24, Y+18	; 0x12
    2352:	9b 89       	ldd	r25, Y+19	; 0x13
    2354:	d1 d2       	rcall	.+1442   	; 0x28f8 <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	8c 8b       	std	Y+20, r24	; 0x14
    235c:	9d 8b       	std	Y+21, r25	; 0x15
    235e:	ae 8b       	std	Y+22, r26	; 0x16
    2360:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	6c 89       	ldd	r22, Y+20	; 0x14
    236c:	7d 89       	ldd	r23, Y+21	; 0x15
    236e:	8e 89       	ldd	r24, Y+22	; 0x16
    2370:	9f 89       	ldd	r25, Y+23	; 0x17
    2372:	b1 d1       	rcall	.+866    	; 0x26d6 <__cmpsf2>
    2374:	88 23       	and	r24, r24
    2376:	2c f4       	brge	.+10     	; 0x2382 <main+0x104>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	99 8f       	std	Y+25, r25	; 0x19
    237e:	88 8f       	std	Y+24, r24	; 0x18
    2380:	3d c0       	rjmp	.+122    	; 0x23fc <main+0x17e>
	else if (__tmp > 65535)
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	6c 89       	ldd	r22, Y+20	; 0x14
    238c:	7d 89       	ldd	r23, Y+21	; 0x15
    238e:	8e 89       	ldd	r24, Y+22	; 0x16
    2390:	9f 89       	ldd	r25, Y+23	; 0x17
    2392:	ae d2       	rcall	.+1372   	; 0x28f0 <__gesf2>
    2394:	18 16       	cp	r1, r24
    2396:	4c f5       	brge	.+82     	; 0x23ea <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	68 89       	ldd	r22, Y+16	; 0x10
    23a2:	79 89       	ldd	r23, Y+17	; 0x11
    23a4:	8a 89       	ldd	r24, Y+18	; 0x12
    23a6:	9b 89       	ldd	r25, Y+19	; 0x13
    23a8:	a7 d2       	rcall	.+1358   	; 0x28f8 <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	fd d1       	rcall	.+1018   	; 0x27ae <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	99 8f       	std	Y+25, r25	; 0x19
    23ba:	88 8f       	std	Y+24, r24	; 0x18
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <main+0x15e>
    23be:	89 e1       	ldi	r24, 0x19	; 25
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9b 8f       	std	Y+27, r25	; 0x1b
    23c4:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <main+0x14c>
    23ce:	9b 8f       	std	Y+27, r25	; 0x1b
    23d0:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	88 8d       	ldd	r24, Y+24	; 0x18
    23d4:	99 8d       	ldd	r25, Y+25	; 0x19
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	99 8f       	std	Y+25, r25	; 0x19
    23da:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	88 8d       	ldd	r24, Y+24	; 0x18
    23de:	99 8d       	ldd	r25, Y+25	; 0x19
    23e0:	89 2b       	or	r24, r25
    23e2:	69 f7       	brne	.-38     	; 0x23be <main+0x140>
    23e4:	8b a1       	ldd	r24, Y+35	; 0x23
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
    23e8:	3d c0       	rjmp	.+122    	; 0x2464 <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	6c 89       	ldd	r22, Y+20	; 0x14
    23ec:	7d 89       	ldd	r23, Y+21	; 0x15
    23ee:	8e 89       	ldd	r24, Y+22	; 0x16
    23f0:	9f 89       	ldd	r25, Y+23	; 0x17
    23f2:	dd d1       	rcall	.+954    	; 0x27ae <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	99 8f       	std	Y+25, r25	; 0x19
    23fa:	88 8f       	std	Y+24, r24	; 0x18
    23fc:	88 8d       	ldd	r24, Y+24	; 0x18
    23fe:	99 8d       	ldd	r25, Y+25	; 0x19
    2400:	9d 8f       	std	Y+29, r25	; 0x1d
    2402:	8c 8f       	std	Y+28, r24	; 0x1c
    2404:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2406:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0x18a>
    240c:	9d 8f       	std	Y+29, r25	; 0x1d
    240e:	8c 8f       	std	Y+28, r24	; 0x1c
    2410:	8b a1       	ldd	r24, Y+35	; 0x23
    2412:	8f 87       	std	Y+15, r24	; 0x0f
    2414:	27 c0       	rjmp	.+78     	; 0x2464 <main+0x1e6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	53 e4       	ldi	r21, 0x43	; 67
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	64 d2       	rcall	.+1224   	; 0x28f0 <__gesf2>
    2428:	18 16       	cp	r1, r24
    242a:	a4 f4       	brge	.+40     	; 0x2454 <main+0x1d6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    242c:	6b 85       	ldd	r22, Y+11	; 0x0b
    242e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2430:	8d 85       	ldd	r24, Y+13	; 0x0d
    2432:	9e 85       	ldd	r25, Y+14	; 0x0e
    2434:	bc d1       	rcall	.+888    	; 0x27ae <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9f 8f       	std	Y+31, r25	; 0x1f
    243c:	8e 8f       	std	Y+30, r24	; 0x1e
    243e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2440:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2442:	99 a3       	std	Y+33, r25	; 0x21
    2444:	88 a3       	std	Y+32, r24	; 0x20
    2446:	88 a1       	ldd	r24, Y+32	; 0x20
    2448:	99 a1       	ldd	r25, Y+33	; 0x21
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <main+0x1cc>
    244e:	99 a3       	std	Y+33, r25	; 0x21
    2450:	88 a3       	std	Y+32, r24	; 0x20
    2452:	23 cf       	rjmp	.-442    	; 0x229a <main+0x1c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2454:	6f 81       	ldd	r22, Y+7	; 0x07
    2456:	78 85       	ldd	r23, Y+8	; 0x08
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	9a 85       	ldd	r25, Y+10	; 0x0a
    245c:	a8 d1       	rcall	.+848    	; 0x27ae <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8f 87       	std	Y+15, r24	; 0x0f
    2464:	8f 85       	ldd	r24, Y+15	; 0x0f
    2466:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2468:	8a a1       	ldd	r24, Y+34	; 0x22
    246a:	8a 95       	dec	r24
    246c:	f1 f7       	brne	.-4      	; 0x246a <main+0x1ec>
    246e:	8a a3       	std	Y+34, r24	; 0x22
			_delay_us(100);
	}
    2470:	14 cf       	rjmp	.-472    	; 0x229a <main+0x1c>

00002472 <handle_10ms_tick>:
*	Compare Vector set to trigger on 10ms intervals
*	handle_10ms_tick: handle for sending messages to can controller
*	USAGE: set data output frequency, based upon current systimer val
*/
void handle_10ms_tick(void)
{	
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	00 d0       	rcall	.+0      	; 0x2478 <handle_10ms_tick+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <handle_10ms_tick+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	if(systimer_10ms % 500 == 0)
	{
		// Send 2Hz Data
		//led_ctrl(LED6,LED_ON,LED_NO_TMR);
	}
	if(systimer_10ms % 1000 == 0)
    247e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
    2482:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
    2486:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <__data_end+0x2>
    248a:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <__data_end+0x3>
    248e:	28 ee       	ldi	r18, 0xE8	; 232
    2490:	33 e0       	ldi	r19, 0x03	; 3
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	91 d2       	rcall	.+1314   	; 0x29be <__udivmodsi4>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	89 2b       	or	r24, r25
    24a2:	8a 2b       	or	r24, r26
    24a4:	8b 2b       	or	r24, r27
    24a6:	09 f0       	breq	.+2      	; 0x24aa <handle_10ms_tick+0x38>
    24a8:	41 c0       	rjmp	.+130    	; 0x252c <handle_10ms_tick+0xba>
	{
		// Send 1Hz Data
		//led_ctrl(LED7,LED_ON,LED_NO_TMR);
#ifdef DEBUG
		data[0]=(gyro_x >> 8) & 0x00FF;
    24aa:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <gyro_x>
    24ae:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <gyro_x+0x1>
    24b2:	89 2f       	mov	r24, r25
    24b4:	99 27       	eor	r25, r25
    24b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <data>
		data[1]=(gyro_x & 0x00FF);
    24ba:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <gyro_x>
    24be:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <gyro_x+0x1>
    24c2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <data+0x1>
		data[2]=(gyro_y >> 8) & 0x00FF;
    24c6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <gyro_y>
    24ca:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <gyro_y+0x1>
    24ce:	89 2f       	mov	r24, r25
    24d0:	99 27       	eor	r25, r25
    24d2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <data+0x2>
		data[3]=(gyro_y & 0x00FF);
    24d6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <gyro_y>
    24da:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <gyro_y+0x1>
    24de:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <data+0x3>
		data[4]=(gyro_z >> 8) & 0x00FF;
    24e2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <gyro_z>
    24e6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <gyro_z+0x1>
    24ea:	89 2f       	mov	r24, r25
    24ec:	99 27       	eor	r25, r25
    24ee:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <data+0x4>
		data[5]=(gyro_z & 0x00FF);
    24f2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <gyro_z>
    24f6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <gyro_z+0x1>
    24fa:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <data+0x5>

		//can_clear_all_mob();
		//send can message to MOb
		while(can_cmd(&imu)!= CAN_CMD_ACCEPTED);
    24fe:	00 00       	nop
    2500:	8a e4       	ldi	r24, 0x4A	; 74
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	0e 94 72 01 	call	0x2e4	; 0x2e4 <can_cmd>
    2508:	88 23       	and	r24, r24
    250a:	d1 f7       	brne	.-12     	; 0x2500 <handle_10ms_tick+0x8e>
		//loop until send successful
		while(can_get_status(&imu) != CAN_STATUS_COMPLETED){
    250c:	00 00       	nop
    250e:	8a e4       	ldi	r24, 0x4A	; 74
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	7d d9       	rcall	.-3334   	; 0x180e <can_get_status>
    2514:	88 23       	and	r24, r24
    2516:	d9 f7       	brne	.-10     	; 0x250e <handle_10ms_tick+0x9c>
		}
		
		data[0] = 0;
    2518:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <data>
		data[1] = 0;
    251c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <data+0x1>
		data[2] = 0;
    2520:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <data+0x2>
		data[3] = 0;
    2524:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <data+0x3>
		data[4] = 0;
    2528:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <data+0x4>
#endif
	}
}
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <i2c_init>:
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	89 eb       	ldi	r24, 0xB9	; 185
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	fc 01       	movw	r30, r24
    2548:	10 82       	st	Z, r1
    254a:	88 eb       	ldi	r24, 0xB8	; 184
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	28 ef       	ldi	r18, 0xF8	; 248
    2550:	fc 01       	movw	r30, r24
    2552:	20 83       	st	Z, r18
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <i2c_start>:
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	00 d0       	rcall	.+0      	; 0x2560 <i2c_start+0x6>
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	8a 83       	std	Y+2, r24	; 0x02
    2566:	8c eb       	ldi	r24, 0xBC	; 188
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	24 ea       	ldi	r18, 0xA4	; 164
    256c:	fc 01       	movw	r30, r24
    256e:	20 83       	st	Z, r18
    2570:	00 00       	nop
    2572:	8c eb       	ldi	r24, 0xBC	; 188
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	fc 01       	movw	r30, r24
    2578:	80 81       	ld	r24, Z
    257a:	88 23       	and	r24, r24
    257c:	d4 f7       	brge	.-12     	; 0x2572 <i2c_start+0x18>
    257e:	89 eb       	ldi	r24, 0xB9	; 185
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	fc 01       	movw	r30, r24
    2584:	80 81       	ld	r24, Z
    2586:	88 7f       	andi	r24, 0xF8	; 248
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	88 30       	cpi	r24, 0x08	; 8
    258e:	29 f0       	breq	.+10     	; 0x259a <i2c_start+0x40>
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	80 31       	cpi	r24, 0x10	; 16
    2594:	11 f0       	breq	.+4      	; 0x259a <i2c_start+0x40>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	20 c0       	rjmp	.+64     	; 0x25da <i2c_start+0x80>
    259a:	8b eb       	ldi	r24, 0xBB	; 187
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	2a 81       	ldd	r18, Y+2	; 0x02
    25a0:	fc 01       	movw	r30, r24
    25a2:	20 83       	st	Z, r18
    25a4:	8c eb       	ldi	r24, 0xBC	; 188
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	24 e8       	ldi	r18, 0x84	; 132
    25aa:	fc 01       	movw	r30, r24
    25ac:	20 83       	st	Z, r18
    25ae:	00 00       	nop
    25b0:	8c eb       	ldi	r24, 0xBC	; 188
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	fc 01       	movw	r30, r24
    25b6:	80 81       	ld	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	d4 f7       	brge	.-12     	; 0x25b0 <i2c_start+0x56>
    25bc:	89 eb       	ldi	r24, 0xB9	; 185
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	fc 01       	movw	r30, r24
    25c2:	80 81       	ld	r24, Z
    25c4:	88 7f       	andi	r24, 0xF8	; 248
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	88 31       	cpi	r24, 0x18	; 24
    25cc:	29 f0       	breq	.+10     	; 0x25d8 <i2c_start+0x7e>
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	80 34       	cpi	r24, 0x40	; 64
    25d2:	11 f0       	breq	.+4      	; 0x25d8 <i2c_start+0x7e>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <i2c_start+0x80>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	1f 92       	push	r1
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	b3 df       	rcall	.-154    	; 0x255a <i2c_start>

}/* i2c_rep_start */
    25f4:	0f 90       	pop	r0
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2604:	8c eb       	ldi	r24, 0xBC	; 188
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	24 e9       	ldi	r18, 0x94	; 148
    260a:	fc 01       	movw	r30, r24
    260c:	20 83       	st	Z, r18
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    260e:	00 00       	nop
    2610:	8c eb       	ldi	r24, 0xBC	; 188
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	fc 01       	movw	r30, r24
    2616:	80 81       	ld	r24, Z
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	80 71       	andi	r24, 0x10	; 16
    261e:	99 27       	eor	r25, r25
    2620:	89 2b       	or	r24, r25
    2622:	b1 f7       	brne	.-20     	; 0x2610 <i2c_stop+0x14>

}/* i2c_stop */
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	08 95       	ret

0000262a <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	00 d0       	rcall	.+0      	; 0x2630 <i2c_write+0x6>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2636:	8b eb       	ldi	r24, 0xBB	; 187
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	2a 81       	ldd	r18, Y+2	; 0x02
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2640:	8c eb       	ldi	r24, 0xBC	; 188
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	24 e8       	ldi	r18, 0x84	; 132
    2646:	fc 01       	movw	r30, r24
    2648:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    264a:	00 00       	nop
    264c:	8c eb       	ldi	r24, 0xBC	; 188
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	fc 01       	movw	r30, r24
    2652:	80 81       	ld	r24, Z
    2654:	88 23       	and	r24, r24
    2656:	d4 f7       	brge	.-12     	; 0x264c <i2c_write+0x22>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2658:	89 eb       	ldi	r24, 0xB9	; 185
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	fc 01       	movw	r30, r24
    265e:	80 81       	ld	r24, Z
    2660:	88 7f       	andi	r24, 0xF8	; 248
    2662:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	88 32       	cpi	r24, 0x28	; 40
    2668:	11 f0       	breq	.+4      	; 0x266e <i2c_write+0x44>
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <i2c_write+0x46>
	return 0;
    266e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2682:	8c eb       	ldi	r24, 0xBC	; 188
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	24 ec       	ldi	r18, 0xC4	; 196
    2688:	fc 01       	movw	r30, r24
    268a:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));    
    268c:	00 00       	nop
    268e:	8c eb       	ldi	r24, 0xBC	; 188
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	fc 01       	movw	r30, r24
    2694:	80 81       	ld	r24, Z
    2696:	88 23       	and	r24, r24
    2698:	d4 f7       	brge	.-12     	; 0x268e <i2c_readAck+0x14>

    return TWDR;
    269a:	8b eb       	ldi	r24, 0xBB	; 187
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	fc 01       	movw	r30, r24
    26a0:	80 81       	ld	r24, Z

}/* i2c_readAck */
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	08 95       	ret

000026a8 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    26b0:	8c eb       	ldi	r24, 0xBC	; 188
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	24 e8       	ldi	r18, 0x84	; 132
    26b6:	fc 01       	movw	r30, r24
    26b8:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
    26ba:	00 00       	nop
    26bc:	8c eb       	ldi	r24, 0xBC	; 188
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	fc 01       	movw	r30, r24
    26c2:	80 81       	ld	r24, Z
    26c4:	88 23       	and	r24, r24
    26c6:	d4 f7       	brge	.-12     	; 0x26bc <i2c_readNak+0x14>
	
    return TWDR;
    26c8:	8b eb       	ldi	r24, 0xBB	; 187
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	fc 01       	movw	r30, r24
    26ce:	80 81       	ld	r24, Z

}/* i2c_readNak */
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	08 95       	ret

000026d6 <__cmpsf2>:
    26d6:	97 d0       	rcall	.+302    	; 0x2806 <__fp_cmp>
    26d8:	08 f4       	brcc	.+2      	; 0x26dc <__cmpsf2+0x6>
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	08 95       	ret

000026de <__divsf3>:
    26de:	0c d0       	rcall	.+24     	; 0x26f8 <__divsf3x>
    26e0:	cd c0       	rjmp	.+410    	; 0x287c <__fp_round>
    26e2:	c5 d0       	rcall	.+394    	; 0x286e <__fp_pscB>
    26e4:	40 f0       	brcs	.+16     	; 0x26f6 <__divsf3+0x18>
    26e6:	bc d0       	rcall	.+376    	; 0x2860 <__fp_pscA>
    26e8:	30 f0       	brcs	.+12     	; 0x26f6 <__divsf3+0x18>
    26ea:	21 f4       	brne	.+8      	; 0x26f4 <__divsf3+0x16>
    26ec:	5f 3f       	cpi	r21, 0xFF	; 255
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <__divsf3+0x18>
    26f0:	ae c0       	rjmp	.+348    	; 0x284e <__fp_inf>
    26f2:	51 11       	cpse	r21, r1
    26f4:	f7 c0       	rjmp	.+494    	; 0x28e4 <__fp_szero>
    26f6:	b1 c0       	rjmp	.+354    	; 0x285a <__fp_nan>

000026f8 <__divsf3x>:
    26f8:	d2 d0       	rcall	.+420    	; 0x289e <__fp_split3>
    26fa:	98 f3       	brcs	.-26     	; 0x26e2 <__divsf3+0x4>

000026fc <__divsf3_pse>:
    26fc:	99 23       	and	r25, r25
    26fe:	c9 f3       	breq	.-14     	; 0x26f2 <__divsf3+0x14>
    2700:	55 23       	and	r21, r21
    2702:	b1 f3       	breq	.-20     	; 0x26f0 <__divsf3+0x12>
    2704:	95 1b       	sub	r25, r21
    2706:	55 0b       	sbc	r21, r21
    2708:	bb 27       	eor	r27, r27
    270a:	aa 27       	eor	r26, r26
    270c:	62 17       	cp	r22, r18
    270e:	73 07       	cpc	r23, r19
    2710:	84 07       	cpc	r24, r20
    2712:	38 f0       	brcs	.+14     	; 0x2722 <__divsf3_pse+0x26>
    2714:	9f 5f       	subi	r25, 0xFF	; 255
    2716:	5f 4f       	sbci	r21, 0xFF	; 255
    2718:	22 0f       	add	r18, r18
    271a:	33 1f       	adc	r19, r19
    271c:	44 1f       	adc	r20, r20
    271e:	aa 1f       	adc	r26, r26
    2720:	a9 f3       	breq	.-22     	; 0x270c <__divsf3_pse+0x10>
    2722:	33 d0       	rcall	.+102    	; 0x278a <__divsf3_pse+0x8e>
    2724:	0e 2e       	mov	r0, r30
    2726:	3a f0       	brmi	.+14     	; 0x2736 <__divsf3_pse+0x3a>
    2728:	e0 e8       	ldi	r30, 0x80	; 128
    272a:	30 d0       	rcall	.+96     	; 0x278c <__divsf3_pse+0x90>
    272c:	91 50       	subi	r25, 0x01	; 1
    272e:	50 40       	sbci	r21, 0x00	; 0
    2730:	e6 95       	lsr	r30
    2732:	00 1c       	adc	r0, r0
    2734:	ca f7       	brpl	.-14     	; 0x2728 <__divsf3_pse+0x2c>
    2736:	29 d0       	rcall	.+82     	; 0x278a <__divsf3_pse+0x8e>
    2738:	fe 2f       	mov	r31, r30
    273a:	27 d0       	rcall	.+78     	; 0x278a <__divsf3_pse+0x8e>
    273c:	66 0f       	add	r22, r22
    273e:	77 1f       	adc	r23, r23
    2740:	88 1f       	adc	r24, r24
    2742:	bb 1f       	adc	r27, r27
    2744:	26 17       	cp	r18, r22
    2746:	37 07       	cpc	r19, r23
    2748:	48 07       	cpc	r20, r24
    274a:	ab 07       	cpc	r26, r27
    274c:	b0 e8       	ldi	r27, 0x80	; 128
    274e:	09 f0       	breq	.+2      	; 0x2752 <__divsf3_pse+0x56>
    2750:	bb 0b       	sbc	r27, r27
    2752:	80 2d       	mov	r24, r0
    2754:	bf 01       	movw	r22, r30
    2756:	ff 27       	eor	r31, r31
    2758:	93 58       	subi	r25, 0x83	; 131
    275a:	5f 4f       	sbci	r21, 0xFF	; 255
    275c:	2a f0       	brmi	.+10     	; 0x2768 <__divsf3_pse+0x6c>
    275e:	9e 3f       	cpi	r25, 0xFE	; 254
    2760:	51 05       	cpc	r21, r1
    2762:	68 f0       	brcs	.+26     	; 0x277e <__divsf3_pse+0x82>
    2764:	74 c0       	rjmp	.+232    	; 0x284e <__fp_inf>
    2766:	be c0       	rjmp	.+380    	; 0x28e4 <__fp_szero>
    2768:	5f 3f       	cpi	r21, 0xFF	; 255
    276a:	ec f3       	brlt	.-6      	; 0x2766 <__divsf3_pse+0x6a>
    276c:	98 3e       	cpi	r25, 0xE8	; 232
    276e:	dc f3       	brlt	.-10     	; 0x2766 <__divsf3_pse+0x6a>
    2770:	86 95       	lsr	r24
    2772:	77 95       	ror	r23
    2774:	67 95       	ror	r22
    2776:	b7 95       	ror	r27
    2778:	f7 95       	ror	r31
    277a:	9f 5f       	subi	r25, 0xFF	; 255
    277c:	c9 f7       	brne	.-14     	; 0x2770 <__divsf3_pse+0x74>
    277e:	88 0f       	add	r24, r24
    2780:	91 1d       	adc	r25, r1
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
    2786:	97 f9       	bld	r25, 7
    2788:	08 95       	ret
    278a:	e1 e0       	ldi	r30, 0x01	; 1
    278c:	66 0f       	add	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	88 1f       	adc	r24, r24
    2792:	bb 1f       	adc	r27, r27
    2794:	62 17       	cp	r22, r18
    2796:	73 07       	cpc	r23, r19
    2798:	84 07       	cpc	r24, r20
    279a:	ba 07       	cpc	r27, r26
    279c:	20 f0       	brcs	.+8      	; 0x27a6 <__divsf3_pse+0xaa>
    279e:	62 1b       	sub	r22, r18
    27a0:	73 0b       	sbc	r23, r19
    27a2:	84 0b       	sbc	r24, r20
    27a4:	ba 0b       	sbc	r27, r26
    27a6:	ee 1f       	adc	r30, r30
    27a8:	88 f7       	brcc	.-30     	; 0x278c <__divsf3_pse+0x90>
    27aa:	e0 95       	com	r30
    27ac:	08 95       	ret

000027ae <__fixunssfsi>:
    27ae:	7f d0       	rcall	.+254    	; 0x28ae <__fp_splitA>
    27b0:	88 f0       	brcs	.+34     	; 0x27d4 <__fixunssfsi+0x26>
    27b2:	9f 57       	subi	r25, 0x7F	; 127
    27b4:	90 f0       	brcs	.+36     	; 0x27da <__fixunssfsi+0x2c>
    27b6:	b9 2f       	mov	r27, r25
    27b8:	99 27       	eor	r25, r25
    27ba:	b7 51       	subi	r27, 0x17	; 23
    27bc:	a0 f0       	brcs	.+40     	; 0x27e6 <__fixunssfsi+0x38>
    27be:	d1 f0       	breq	.+52     	; 0x27f4 <__fixunssfsi+0x46>
    27c0:	66 0f       	add	r22, r22
    27c2:	77 1f       	adc	r23, r23
    27c4:	88 1f       	adc	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	1a f0       	brmi	.+6      	; 0x27d0 <__fixunssfsi+0x22>
    27ca:	ba 95       	dec	r27
    27cc:	c9 f7       	brne	.-14     	; 0x27c0 <__fixunssfsi+0x12>
    27ce:	12 c0       	rjmp	.+36     	; 0x27f4 <__fixunssfsi+0x46>
    27d0:	b1 30       	cpi	r27, 0x01	; 1
    27d2:	81 f0       	breq	.+32     	; 0x27f4 <__fixunssfsi+0x46>
    27d4:	86 d0       	rcall	.+268    	; 0x28e2 <__fp_zero>
    27d6:	b1 e0       	ldi	r27, 0x01	; 1
    27d8:	08 95       	ret
    27da:	83 c0       	rjmp	.+262    	; 0x28e2 <__fp_zero>
    27dc:	67 2f       	mov	r22, r23
    27de:	78 2f       	mov	r23, r24
    27e0:	88 27       	eor	r24, r24
    27e2:	b8 5f       	subi	r27, 0xF8	; 248
    27e4:	39 f0       	breq	.+14     	; 0x27f4 <__fixunssfsi+0x46>
    27e6:	b9 3f       	cpi	r27, 0xF9	; 249
    27e8:	cc f3       	brlt	.-14     	; 0x27dc <__fixunssfsi+0x2e>
    27ea:	86 95       	lsr	r24
    27ec:	77 95       	ror	r23
    27ee:	67 95       	ror	r22
    27f0:	b3 95       	inc	r27
    27f2:	d9 f7       	brne	.-10     	; 0x27ea <__fixunssfsi+0x3c>
    27f4:	3e f4       	brtc	.+14     	; 0x2804 <__fixunssfsi+0x56>
    27f6:	90 95       	com	r25
    27f8:	80 95       	com	r24
    27fa:	70 95       	com	r23
    27fc:	61 95       	neg	r22
    27fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2800:	8f 4f       	sbci	r24, 0xFF	; 255
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	08 95       	ret

00002806 <__fp_cmp>:
    2806:	99 0f       	add	r25, r25
    2808:	00 08       	sbc	r0, r0
    280a:	55 0f       	add	r21, r21
    280c:	aa 0b       	sbc	r26, r26
    280e:	e0 e8       	ldi	r30, 0x80	; 128
    2810:	fe ef       	ldi	r31, 0xFE	; 254
    2812:	16 16       	cp	r1, r22
    2814:	17 06       	cpc	r1, r23
    2816:	e8 07       	cpc	r30, r24
    2818:	f9 07       	cpc	r31, r25
    281a:	c0 f0       	brcs	.+48     	; 0x284c <__fp_cmp+0x46>
    281c:	12 16       	cp	r1, r18
    281e:	13 06       	cpc	r1, r19
    2820:	e4 07       	cpc	r30, r20
    2822:	f5 07       	cpc	r31, r21
    2824:	98 f0       	brcs	.+38     	; 0x284c <__fp_cmp+0x46>
    2826:	62 1b       	sub	r22, r18
    2828:	73 0b       	sbc	r23, r19
    282a:	84 0b       	sbc	r24, r20
    282c:	95 0b       	sbc	r25, r21
    282e:	39 f4       	brne	.+14     	; 0x283e <__fp_cmp+0x38>
    2830:	0a 26       	eor	r0, r26
    2832:	61 f0       	breq	.+24     	; 0x284c <__fp_cmp+0x46>
    2834:	23 2b       	or	r18, r19
    2836:	24 2b       	or	r18, r20
    2838:	25 2b       	or	r18, r21
    283a:	21 f4       	brne	.+8      	; 0x2844 <__fp_cmp+0x3e>
    283c:	08 95       	ret
    283e:	0a 26       	eor	r0, r26
    2840:	09 f4       	brne	.+2      	; 0x2844 <__fp_cmp+0x3e>
    2842:	a1 40       	sbci	r26, 0x01	; 1
    2844:	a6 95       	lsr	r26
    2846:	8f ef       	ldi	r24, 0xFF	; 255
    2848:	81 1d       	adc	r24, r1
    284a:	81 1d       	adc	r24, r1
    284c:	08 95       	ret

0000284e <__fp_inf>:
    284e:	97 f9       	bld	r25, 7
    2850:	9f 67       	ori	r25, 0x7F	; 127
    2852:	80 e8       	ldi	r24, 0x80	; 128
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	08 95       	ret

0000285a <__fp_nan>:
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	80 ec       	ldi	r24, 0xC0	; 192
    285e:	08 95       	ret

00002860 <__fp_pscA>:
    2860:	00 24       	eor	r0, r0
    2862:	0a 94       	dec	r0
    2864:	16 16       	cp	r1, r22
    2866:	17 06       	cpc	r1, r23
    2868:	18 06       	cpc	r1, r24
    286a:	09 06       	cpc	r0, r25
    286c:	08 95       	ret

0000286e <__fp_pscB>:
    286e:	00 24       	eor	r0, r0
    2870:	0a 94       	dec	r0
    2872:	12 16       	cp	r1, r18
    2874:	13 06       	cpc	r1, r19
    2876:	14 06       	cpc	r1, r20
    2878:	05 06       	cpc	r0, r21
    287a:	08 95       	ret

0000287c <__fp_round>:
    287c:	09 2e       	mov	r0, r25
    287e:	03 94       	inc	r0
    2880:	00 0c       	add	r0, r0
    2882:	11 f4       	brne	.+4      	; 0x2888 <__fp_round+0xc>
    2884:	88 23       	and	r24, r24
    2886:	52 f0       	brmi	.+20     	; 0x289c <__fp_round+0x20>
    2888:	bb 0f       	add	r27, r27
    288a:	40 f4       	brcc	.+16     	; 0x289c <__fp_round+0x20>
    288c:	bf 2b       	or	r27, r31
    288e:	11 f4       	brne	.+4      	; 0x2894 <__fp_round+0x18>
    2890:	60 ff       	sbrs	r22, 0
    2892:	04 c0       	rjmp	.+8      	; 0x289c <__fp_round+0x20>
    2894:	6f 5f       	subi	r22, 0xFF	; 255
    2896:	7f 4f       	sbci	r23, 0xFF	; 255
    2898:	8f 4f       	sbci	r24, 0xFF	; 255
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	08 95       	ret

0000289e <__fp_split3>:
    289e:	57 fd       	sbrc	r21, 7
    28a0:	90 58       	subi	r25, 0x80	; 128
    28a2:	44 0f       	add	r20, r20
    28a4:	55 1f       	adc	r21, r21
    28a6:	59 f0       	breq	.+22     	; 0x28be <__fp_splitA+0x10>
    28a8:	5f 3f       	cpi	r21, 0xFF	; 255
    28aa:	71 f0       	breq	.+28     	; 0x28c8 <__fp_splitA+0x1a>
    28ac:	47 95       	ror	r20

000028ae <__fp_splitA>:
    28ae:	88 0f       	add	r24, r24
    28b0:	97 fb       	bst	r25, 7
    28b2:	99 1f       	adc	r25, r25
    28b4:	61 f0       	breq	.+24     	; 0x28ce <__fp_splitA+0x20>
    28b6:	9f 3f       	cpi	r25, 0xFF	; 255
    28b8:	79 f0       	breq	.+30     	; 0x28d8 <__fp_splitA+0x2a>
    28ba:	87 95       	ror	r24
    28bc:	08 95       	ret
    28be:	12 16       	cp	r1, r18
    28c0:	13 06       	cpc	r1, r19
    28c2:	14 06       	cpc	r1, r20
    28c4:	55 1f       	adc	r21, r21
    28c6:	f2 cf       	rjmp	.-28     	; 0x28ac <__fp_split3+0xe>
    28c8:	46 95       	lsr	r20
    28ca:	f1 df       	rcall	.-30     	; 0x28ae <__fp_splitA>
    28cc:	08 c0       	rjmp	.+16     	; 0x28de <__fp_splitA+0x30>
    28ce:	16 16       	cp	r1, r22
    28d0:	17 06       	cpc	r1, r23
    28d2:	18 06       	cpc	r1, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	f1 cf       	rjmp	.-30     	; 0x28ba <__fp_splitA+0xc>
    28d8:	86 95       	lsr	r24
    28da:	71 05       	cpc	r23, r1
    28dc:	61 05       	cpc	r22, r1
    28de:	08 94       	sec
    28e0:	08 95       	ret

000028e2 <__fp_zero>:
    28e2:	e8 94       	clt

000028e4 <__fp_szero>:
    28e4:	bb 27       	eor	r27, r27
    28e6:	66 27       	eor	r22, r22
    28e8:	77 27       	eor	r23, r23
    28ea:	cb 01       	movw	r24, r22
    28ec:	97 f9       	bld	r25, 7
    28ee:	08 95       	ret

000028f0 <__gesf2>:
    28f0:	8a df       	rcall	.-236    	; 0x2806 <__fp_cmp>
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <__gesf2+0x6>
    28f4:	8f ef       	ldi	r24, 0xFF	; 255
    28f6:	08 95       	ret

000028f8 <__mulsf3>:
    28f8:	0b d0       	rcall	.+22     	; 0x2910 <__mulsf3x>
    28fa:	c0 cf       	rjmp	.-128    	; 0x287c <__fp_round>
    28fc:	b1 df       	rcall	.-158    	; 0x2860 <__fp_pscA>
    28fe:	28 f0       	brcs	.+10     	; 0x290a <__mulsf3+0x12>
    2900:	b6 df       	rcall	.-148    	; 0x286e <__fp_pscB>
    2902:	18 f0       	brcs	.+6      	; 0x290a <__mulsf3+0x12>
    2904:	95 23       	and	r25, r21
    2906:	09 f0       	breq	.+2      	; 0x290a <__mulsf3+0x12>
    2908:	a2 cf       	rjmp	.-188    	; 0x284e <__fp_inf>
    290a:	a7 cf       	rjmp	.-178    	; 0x285a <__fp_nan>
    290c:	11 24       	eor	r1, r1
    290e:	ea cf       	rjmp	.-44     	; 0x28e4 <__fp_szero>

00002910 <__mulsf3x>:
    2910:	c6 df       	rcall	.-116    	; 0x289e <__fp_split3>
    2912:	a0 f3       	brcs	.-24     	; 0x28fc <__mulsf3+0x4>

00002914 <__mulsf3_pse>:
    2914:	95 9f       	mul	r25, r21
    2916:	d1 f3       	breq	.-12     	; 0x290c <__mulsf3+0x14>
    2918:	95 0f       	add	r25, r21
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	55 1f       	adc	r21, r21
    291e:	62 9f       	mul	r22, r18
    2920:	f0 01       	movw	r30, r0
    2922:	72 9f       	mul	r23, r18
    2924:	bb 27       	eor	r27, r27
    2926:	f0 0d       	add	r31, r0
    2928:	b1 1d       	adc	r27, r1
    292a:	63 9f       	mul	r22, r19
    292c:	aa 27       	eor	r26, r26
    292e:	f0 0d       	add	r31, r0
    2930:	b1 1d       	adc	r27, r1
    2932:	aa 1f       	adc	r26, r26
    2934:	64 9f       	mul	r22, r20
    2936:	66 27       	eor	r22, r22
    2938:	b0 0d       	add	r27, r0
    293a:	a1 1d       	adc	r26, r1
    293c:	66 1f       	adc	r22, r22
    293e:	82 9f       	mul	r24, r18
    2940:	22 27       	eor	r18, r18
    2942:	b0 0d       	add	r27, r0
    2944:	a1 1d       	adc	r26, r1
    2946:	62 1f       	adc	r22, r18
    2948:	73 9f       	mul	r23, r19
    294a:	b0 0d       	add	r27, r0
    294c:	a1 1d       	adc	r26, r1
    294e:	62 1f       	adc	r22, r18
    2950:	83 9f       	mul	r24, r19
    2952:	a0 0d       	add	r26, r0
    2954:	61 1d       	adc	r22, r1
    2956:	22 1f       	adc	r18, r18
    2958:	74 9f       	mul	r23, r20
    295a:	33 27       	eor	r19, r19
    295c:	a0 0d       	add	r26, r0
    295e:	61 1d       	adc	r22, r1
    2960:	23 1f       	adc	r18, r19
    2962:	84 9f       	mul	r24, r20
    2964:	60 0d       	add	r22, r0
    2966:	21 1d       	adc	r18, r1
    2968:	82 2f       	mov	r24, r18
    296a:	76 2f       	mov	r23, r22
    296c:	6a 2f       	mov	r22, r26
    296e:	11 24       	eor	r1, r1
    2970:	9f 57       	subi	r25, 0x7F	; 127
    2972:	50 40       	sbci	r21, 0x00	; 0
    2974:	8a f0       	brmi	.+34     	; 0x2998 <__mulsf3_pse+0x84>
    2976:	e1 f0       	breq	.+56     	; 0x29b0 <__mulsf3_pse+0x9c>
    2978:	88 23       	and	r24, r24
    297a:	4a f0       	brmi	.+18     	; 0x298e <__mulsf3_pse+0x7a>
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	bb 1f       	adc	r27, r27
    2982:	66 1f       	adc	r22, r22
    2984:	77 1f       	adc	r23, r23
    2986:	88 1f       	adc	r24, r24
    2988:	91 50       	subi	r25, 0x01	; 1
    298a:	50 40       	sbci	r21, 0x00	; 0
    298c:	a9 f7       	brne	.-22     	; 0x2978 <__mulsf3_pse+0x64>
    298e:	9e 3f       	cpi	r25, 0xFE	; 254
    2990:	51 05       	cpc	r21, r1
    2992:	70 f0       	brcs	.+28     	; 0x29b0 <__mulsf3_pse+0x9c>
    2994:	5c cf       	rjmp	.-328    	; 0x284e <__fp_inf>
    2996:	a6 cf       	rjmp	.-180    	; 0x28e4 <__fp_szero>
    2998:	5f 3f       	cpi	r21, 0xFF	; 255
    299a:	ec f3       	brlt	.-6      	; 0x2996 <__mulsf3_pse+0x82>
    299c:	98 3e       	cpi	r25, 0xE8	; 232
    299e:	dc f3       	brlt	.-10     	; 0x2996 <__mulsf3_pse+0x82>
    29a0:	86 95       	lsr	r24
    29a2:	77 95       	ror	r23
    29a4:	67 95       	ror	r22
    29a6:	b7 95       	ror	r27
    29a8:	f7 95       	ror	r31
    29aa:	e7 95       	ror	r30
    29ac:	9f 5f       	subi	r25, 0xFF	; 255
    29ae:	c1 f7       	brne	.-16     	; 0x29a0 <__mulsf3_pse+0x8c>
    29b0:	fe 2b       	or	r31, r30
    29b2:	88 0f       	add	r24, r24
    29b4:	91 1d       	adc	r25, r1
    29b6:	96 95       	lsr	r25
    29b8:	87 95       	ror	r24
    29ba:	97 f9       	bld	r25, 7
    29bc:	08 95       	ret

000029be <__udivmodsi4>:
    29be:	a1 e2       	ldi	r26, 0x21	; 33
    29c0:	1a 2e       	mov	r1, r26
    29c2:	aa 1b       	sub	r26, r26
    29c4:	bb 1b       	sub	r27, r27
    29c6:	fd 01       	movw	r30, r26
    29c8:	0d c0       	rjmp	.+26     	; 0x29e4 <__udivmodsi4_ep>

000029ca <__udivmodsi4_loop>:
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	ee 1f       	adc	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	a2 17       	cp	r26, r18
    29d4:	b3 07       	cpc	r27, r19
    29d6:	e4 07       	cpc	r30, r20
    29d8:	f5 07       	cpc	r31, r21
    29da:	20 f0       	brcs	.+8      	; 0x29e4 <__udivmodsi4_ep>
    29dc:	a2 1b       	sub	r26, r18
    29de:	b3 0b       	sbc	r27, r19
    29e0:	e4 0b       	sbc	r30, r20
    29e2:	f5 0b       	sbc	r31, r21

000029e4 <__udivmodsi4_ep>:
    29e4:	66 1f       	adc	r22, r22
    29e6:	77 1f       	adc	r23, r23
    29e8:	88 1f       	adc	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	1a 94       	dec	r1
    29ee:	69 f7       	brne	.-38     	; 0x29ca <__udivmodsi4_loop>
    29f0:	60 95       	com	r22
    29f2:	70 95       	com	r23
    29f4:	80 95       	com	r24
    29f6:	90 95       	com	r25
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	bd 01       	movw	r22, r26
    29fe:	cf 01       	movw	r24, r30
    2a00:	08 95       	ret

00002a02 <__tablejump2__>:
    2a02:	ee 0f       	add	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	00 24       	eor	r0, r0
    2a08:	00 1c       	adc	r0, r0
    2a0a:	0b be       	out	0x3b, r0	; 59
    2a0c:	07 90       	elpm	r0, Z+
    2a0e:	f6 91       	elpm	r31, Z
    2a10:	e0 2d       	mov	r30, r0
    2a12:	09 94       	ijmp

00002a14 <printf>:
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	ae 01       	movw	r20, r28
    2a1e:	4b 5f       	subi	r20, 0xFB	; 251
    2a20:	5f 4f       	sbci	r21, 0xFF	; 255
    2a22:	fa 01       	movw	r30, r20
    2a24:	61 91       	ld	r22, Z+
    2a26:	71 91       	ld	r23, Z+
    2a28:	af 01       	movw	r20, r30
    2a2a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__iob+0x2>
    2a2e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__iob+0x3>
    2a32:	33 d0       	rcall	.+102    	; 0x2a9a <vfprintf>
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <puts>:
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__iob+0x2>
    2a46:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <__iob+0x3>
    2a4a:	23 81       	ldd	r18, Z+3	; 0x03
    2a4c:	21 ff       	sbrs	r18, 1
    2a4e:	1b c0       	rjmp	.+54     	; 0x2a86 <puts+0x4c>
    2a50:	8c 01       	movw	r16, r24
    2a52:	d0 e0       	ldi	r29, 0x00	; 0
    2a54:	c0 e0       	ldi	r28, 0x00	; 0
    2a56:	f8 01       	movw	r30, r16
    2a58:	81 91       	ld	r24, Z+
    2a5a:	8f 01       	movw	r16, r30
    2a5c:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__iob+0x2>
    2a60:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <__iob+0x3>
    2a64:	db 01       	movw	r26, r22
    2a66:	18 96       	adiw	r26, 0x08	; 8
    2a68:	ed 91       	ld	r30, X+
    2a6a:	fc 91       	ld	r31, X
    2a6c:	19 97       	sbiw	r26, 0x09	; 9
    2a6e:	88 23       	and	r24, r24
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <puts+0x44>
    2a72:	09 95       	icall
    2a74:	89 2b       	or	r24, r25
    2a76:	79 f3       	breq	.-34     	; 0x2a56 <puts+0x1c>
    2a78:	df ef       	ldi	r29, 0xFF	; 255
    2a7a:	cf ef       	ldi	r28, 0xFF	; 255
    2a7c:	ec cf       	rjmp	.-40     	; 0x2a56 <puts+0x1c>
    2a7e:	8a e0       	ldi	r24, 0x0A	; 10
    2a80:	09 95       	icall
    2a82:	89 2b       	or	r24, r25
    2a84:	19 f0       	breq	.+6      	; 0x2a8c <puts+0x52>
    2a86:	8f ef       	ldi	r24, 0xFF	; 255
    2a88:	9f ef       	ldi	r25, 0xFF	; 255
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <puts+0x56>
    2a8c:	8d 2f       	mov	r24, r29
    2a8e:	9c 2f       	mov	r25, r28
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	08 95       	ret

00002a9a <vfprintf>:
    2a9a:	2f 92       	push	r2
    2a9c:	3f 92       	push	r3
    2a9e:	4f 92       	push	r4
    2aa0:	5f 92       	push	r5
    2aa2:	6f 92       	push	r6
    2aa4:	7f 92       	push	r7
    2aa6:	8f 92       	push	r8
    2aa8:	9f 92       	push	r9
    2aaa:	af 92       	push	r10
    2aac:	bf 92       	push	r11
    2aae:	cf 92       	push	r12
    2ab0:	df 92       	push	r13
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	2c 97       	sbiw	r28, 0x0c	; 12
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	7c 01       	movw	r14, r24
    2ad0:	6b 01       	movw	r12, r22
    2ad2:	8a 01       	movw	r16, r20
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	17 82       	std	Z+7, r1	; 0x07
    2ad8:	16 82       	std	Z+6, r1	; 0x06
    2ada:	83 81       	ldd	r24, Z+3	; 0x03
    2adc:	81 ff       	sbrs	r24, 1
    2ade:	b0 c1       	rjmp	.+864    	; 0x2e40 <vfprintf+0x3a6>
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	01 96       	adiw	r24, 0x01	; 1
    2ae4:	4c 01       	movw	r8, r24
    2ae6:	f7 01       	movw	r30, r14
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	f6 01       	movw	r30, r12
    2aec:	93 fd       	sbrc	r25, 3
    2aee:	85 91       	lpm	r24, Z+
    2af0:	93 ff       	sbrs	r25, 3
    2af2:	81 91       	ld	r24, Z+
    2af4:	6f 01       	movw	r12, r30
    2af6:	88 23       	and	r24, r24
    2af8:	09 f4       	brne	.+2      	; 0x2afc <vfprintf+0x62>
    2afa:	9e c1       	rjmp	.+828    	; 0x2e38 <vfprintf+0x39e>
    2afc:	85 32       	cpi	r24, 0x25	; 37
    2afe:	39 f4       	brne	.+14     	; 0x2b0e <vfprintf+0x74>
    2b00:	93 fd       	sbrc	r25, 3
    2b02:	85 91       	lpm	r24, Z+
    2b04:	93 ff       	sbrs	r25, 3
    2b06:	81 91       	ld	r24, Z+
    2b08:	6f 01       	movw	r12, r30
    2b0a:	85 32       	cpi	r24, 0x25	; 37
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <vfprintf+0x7c>
    2b0e:	b7 01       	movw	r22, r14
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	c7 d1       	rcall	.+910    	; 0x2ea2 <fputc>
    2b14:	e8 cf       	rjmp	.-48     	; 0x2ae6 <vfprintf+0x4c>
    2b16:	51 2c       	mov	r5, r1
    2b18:	31 2c       	mov	r3, r1
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	20 32       	cpi	r18, 0x20	; 32
    2b1e:	a0 f4       	brcc	.+40     	; 0x2b48 <vfprintf+0xae>
    2b20:	8b 32       	cpi	r24, 0x2B	; 43
    2b22:	69 f0       	breq	.+26     	; 0x2b3e <vfprintf+0xa4>
    2b24:	30 f4       	brcc	.+12     	; 0x2b32 <vfprintf+0x98>
    2b26:	80 32       	cpi	r24, 0x20	; 32
    2b28:	59 f0       	breq	.+22     	; 0x2b40 <vfprintf+0xa6>
    2b2a:	83 32       	cpi	r24, 0x23	; 35
    2b2c:	69 f4       	brne	.+26     	; 0x2b48 <vfprintf+0xae>
    2b2e:	20 61       	ori	r18, 0x10	; 16
    2b30:	2c c0       	rjmp	.+88     	; 0x2b8a <vfprintf+0xf0>
    2b32:	8d 32       	cpi	r24, 0x2D	; 45
    2b34:	39 f0       	breq	.+14     	; 0x2b44 <vfprintf+0xaa>
    2b36:	80 33       	cpi	r24, 0x30	; 48
    2b38:	39 f4       	brne	.+14     	; 0x2b48 <vfprintf+0xae>
    2b3a:	21 60       	ori	r18, 0x01	; 1
    2b3c:	26 c0       	rjmp	.+76     	; 0x2b8a <vfprintf+0xf0>
    2b3e:	22 60       	ori	r18, 0x02	; 2
    2b40:	24 60       	ori	r18, 0x04	; 4
    2b42:	23 c0       	rjmp	.+70     	; 0x2b8a <vfprintf+0xf0>
    2b44:	28 60       	ori	r18, 0x08	; 8
    2b46:	21 c0       	rjmp	.+66     	; 0x2b8a <vfprintf+0xf0>
    2b48:	27 fd       	sbrc	r18, 7
    2b4a:	27 c0       	rjmp	.+78     	; 0x2b9a <vfprintf+0x100>
    2b4c:	30 ed       	ldi	r19, 0xD0	; 208
    2b4e:	38 0f       	add	r19, r24
    2b50:	3a 30       	cpi	r19, 0x0A	; 10
    2b52:	78 f4       	brcc	.+30     	; 0x2b72 <vfprintf+0xd8>
    2b54:	26 ff       	sbrs	r18, 6
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <vfprintf+0xca>
    2b58:	fa e0       	ldi	r31, 0x0A	; 10
    2b5a:	5f 9e       	mul	r5, r31
    2b5c:	30 0d       	add	r19, r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	53 2e       	mov	r5, r19
    2b62:	13 c0       	rjmp	.+38     	; 0x2b8a <vfprintf+0xf0>
    2b64:	8a e0       	ldi	r24, 0x0A	; 10
    2b66:	38 9e       	mul	r3, r24
    2b68:	30 0d       	add	r19, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	33 2e       	mov	r3, r19
    2b6e:	20 62       	ori	r18, 0x20	; 32
    2b70:	0c c0       	rjmp	.+24     	; 0x2b8a <vfprintf+0xf0>
    2b72:	8e 32       	cpi	r24, 0x2E	; 46
    2b74:	21 f4       	brne	.+8      	; 0x2b7e <vfprintf+0xe4>
    2b76:	26 fd       	sbrc	r18, 6
    2b78:	5f c1       	rjmp	.+702    	; 0x2e38 <vfprintf+0x39e>
    2b7a:	20 64       	ori	r18, 0x40	; 64
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <vfprintf+0xf0>
    2b7e:	8c 36       	cpi	r24, 0x6C	; 108
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <vfprintf+0xec>
    2b82:	20 68       	ori	r18, 0x80	; 128
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <vfprintf+0xf0>
    2b86:	88 36       	cpi	r24, 0x68	; 104
    2b88:	41 f4       	brne	.+16     	; 0x2b9a <vfprintf+0x100>
    2b8a:	f6 01       	movw	r30, r12
    2b8c:	93 fd       	sbrc	r25, 3
    2b8e:	85 91       	lpm	r24, Z+
    2b90:	93 ff       	sbrs	r25, 3
    2b92:	81 91       	ld	r24, Z+
    2b94:	6f 01       	movw	r12, r30
    2b96:	81 11       	cpse	r24, r1
    2b98:	c1 cf       	rjmp	.-126    	; 0x2b1c <vfprintf+0x82>
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	9f 7d       	andi	r25, 0xDF	; 223
    2b9e:	95 54       	subi	r25, 0x45	; 69
    2ba0:	93 30       	cpi	r25, 0x03	; 3
    2ba2:	28 f4       	brcc	.+10     	; 0x2bae <vfprintf+0x114>
    2ba4:	0c 5f       	subi	r16, 0xFC	; 252
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	ff e3       	ldi	r31, 0x3F	; 63
    2baa:	f9 83       	std	Y+1, r31	; 0x01
    2bac:	0d c0       	rjmp	.+26     	; 0x2bc8 <vfprintf+0x12e>
    2bae:	83 36       	cpi	r24, 0x63	; 99
    2bb0:	31 f0       	breq	.+12     	; 0x2bbe <vfprintf+0x124>
    2bb2:	83 37       	cpi	r24, 0x73	; 115
    2bb4:	71 f0       	breq	.+28     	; 0x2bd2 <vfprintf+0x138>
    2bb6:	83 35       	cpi	r24, 0x53	; 83
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <vfprintf+0x122>
    2bba:	57 c0       	rjmp	.+174    	; 0x2c6a <vfprintf+0x1d0>
    2bbc:	21 c0       	rjmp	.+66     	; 0x2c00 <vfprintf+0x166>
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	80 81       	ld	r24, Z
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	0e 5f       	subi	r16, 0xFE	; 254
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	44 24       	eor	r4, r4
    2bca:	43 94       	inc	r4
    2bcc:	51 2c       	mov	r5, r1
    2bce:	54 01       	movw	r10, r8
    2bd0:	14 c0       	rjmp	.+40     	; 0x2bfa <vfprintf+0x160>
    2bd2:	38 01       	movw	r6, r16
    2bd4:	f2 e0       	ldi	r31, 0x02	; 2
    2bd6:	6f 0e       	add	r6, r31
    2bd8:	71 1c       	adc	r7, r1
    2bda:	f8 01       	movw	r30, r16
    2bdc:	a0 80       	ld	r10, Z
    2bde:	b1 80       	ldd	r11, Z+1	; 0x01
    2be0:	26 ff       	sbrs	r18, 6
    2be2:	03 c0       	rjmp	.+6      	; 0x2bea <vfprintf+0x150>
    2be4:	65 2d       	mov	r22, r5
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <vfprintf+0x154>
    2bea:	6f ef       	ldi	r22, 0xFF	; 255
    2bec:	7f ef       	ldi	r23, 0xFF	; 255
    2bee:	c5 01       	movw	r24, r10
    2bf0:	2c 87       	std	Y+12, r18	; 0x0c
    2bf2:	4c d1       	rcall	.+664    	; 0x2e8c <strnlen>
    2bf4:	2c 01       	movw	r4, r24
    2bf6:	83 01       	movw	r16, r6
    2bf8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bfa:	2f 77       	andi	r18, 0x7F	; 127
    2bfc:	22 2e       	mov	r2, r18
    2bfe:	16 c0       	rjmp	.+44     	; 0x2c2c <vfprintf+0x192>
    2c00:	38 01       	movw	r6, r16
    2c02:	f2 e0       	ldi	r31, 0x02	; 2
    2c04:	6f 0e       	add	r6, r31
    2c06:	71 1c       	adc	r7, r1
    2c08:	f8 01       	movw	r30, r16
    2c0a:	a0 80       	ld	r10, Z
    2c0c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c0e:	26 ff       	sbrs	r18, 6
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <vfprintf+0x17e>
    2c12:	65 2d       	mov	r22, r5
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <vfprintf+0x182>
    2c18:	6f ef       	ldi	r22, 0xFF	; 255
    2c1a:	7f ef       	ldi	r23, 0xFF	; 255
    2c1c:	c5 01       	movw	r24, r10
    2c1e:	2c 87       	std	Y+12, r18	; 0x0c
    2c20:	2a d1       	rcall	.+596    	; 0x2e76 <strnlen_P>
    2c22:	2c 01       	movw	r4, r24
    2c24:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c26:	20 68       	ori	r18, 0x80	; 128
    2c28:	22 2e       	mov	r2, r18
    2c2a:	83 01       	movw	r16, r6
    2c2c:	23 fc       	sbrc	r2, 3
    2c2e:	19 c0       	rjmp	.+50     	; 0x2c62 <vfprintf+0x1c8>
    2c30:	83 2d       	mov	r24, r3
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	48 16       	cp	r4, r24
    2c36:	59 06       	cpc	r5, r25
    2c38:	a0 f4       	brcc	.+40     	; 0x2c62 <vfprintf+0x1c8>
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	80 e2       	ldi	r24, 0x20	; 32
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	30 d1       	rcall	.+608    	; 0x2ea2 <fputc>
    2c42:	3a 94       	dec	r3
    2c44:	f5 cf       	rjmp	.-22     	; 0x2c30 <vfprintf+0x196>
    2c46:	f5 01       	movw	r30, r10
    2c48:	27 fc       	sbrc	r2, 7
    2c4a:	85 91       	lpm	r24, Z+
    2c4c:	27 fe       	sbrs	r2, 7
    2c4e:	81 91       	ld	r24, Z+
    2c50:	5f 01       	movw	r10, r30
    2c52:	b7 01       	movw	r22, r14
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	25 d1       	rcall	.+586    	; 0x2ea2 <fputc>
    2c58:	31 10       	cpse	r3, r1
    2c5a:	3a 94       	dec	r3
    2c5c:	f1 e0       	ldi	r31, 0x01	; 1
    2c5e:	4f 1a       	sub	r4, r31
    2c60:	51 08       	sbc	r5, r1
    2c62:	41 14       	cp	r4, r1
    2c64:	51 04       	cpc	r5, r1
    2c66:	79 f7       	brne	.-34     	; 0x2c46 <vfprintf+0x1ac>
    2c68:	de c0       	rjmp	.+444    	; 0x2e26 <vfprintf+0x38c>
    2c6a:	84 36       	cpi	r24, 0x64	; 100
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <vfprintf+0x1d8>
    2c6e:	89 36       	cpi	r24, 0x69	; 105
    2c70:	31 f5       	brne	.+76     	; 0x2cbe <vfprintf+0x224>
    2c72:	f8 01       	movw	r30, r16
    2c74:	27 ff       	sbrs	r18, 7
    2c76:	07 c0       	rjmp	.+14     	; 0x2c86 <vfprintf+0x1ec>
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	0c 5f       	subi	r16, 0xFC	; 252
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	08 c0       	rjmp	.+16     	; 0x2c96 <vfprintf+0x1fc>
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	07 2e       	mov	r0, r23
    2c8c:	00 0c       	add	r0, r0
    2c8e:	88 0b       	sbc	r24, r24
    2c90:	99 0b       	sbc	r25, r25
    2c92:	0e 5f       	subi	r16, 0xFE	; 254
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	2f 76       	andi	r18, 0x6F	; 111
    2c98:	72 2e       	mov	r7, r18
    2c9a:	97 ff       	sbrs	r25, 7
    2c9c:	09 c0       	rjmp	.+18     	; 0x2cb0 <vfprintf+0x216>
    2c9e:	90 95       	com	r25
    2ca0:	80 95       	com	r24
    2ca2:	70 95       	com	r23
    2ca4:	61 95       	neg	r22
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    2caa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cac:	20 68       	ori	r18, 0x80	; 128
    2cae:	72 2e       	mov	r7, r18
    2cb0:	2a e0       	ldi	r18, 0x0A	; 10
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	a4 01       	movw	r20, r8
    2cb6:	2d d1       	rcall	.+602    	; 0x2f12 <__ultoa_invert>
    2cb8:	a8 2e       	mov	r10, r24
    2cba:	a8 18       	sub	r10, r8
    2cbc:	43 c0       	rjmp	.+134    	; 0x2d44 <vfprintf+0x2aa>
    2cbe:	85 37       	cpi	r24, 0x75	; 117
    2cc0:	29 f4       	brne	.+10     	; 0x2ccc <vfprintf+0x232>
    2cc2:	2f 7e       	andi	r18, 0xEF	; 239
    2cc4:	b2 2e       	mov	r11, r18
    2cc6:	2a e0       	ldi	r18, 0x0A	; 10
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	25 c0       	rjmp	.+74     	; 0x2d16 <vfprintf+0x27c>
    2ccc:	f2 2f       	mov	r31, r18
    2cce:	f9 7f       	andi	r31, 0xF9	; 249
    2cd0:	bf 2e       	mov	r11, r31
    2cd2:	8f 36       	cpi	r24, 0x6F	; 111
    2cd4:	c1 f0       	breq	.+48     	; 0x2d06 <vfprintf+0x26c>
    2cd6:	18 f4       	brcc	.+6      	; 0x2cde <vfprintf+0x244>
    2cd8:	88 35       	cpi	r24, 0x58	; 88
    2cda:	79 f0       	breq	.+30     	; 0x2cfa <vfprintf+0x260>
    2cdc:	ad c0       	rjmp	.+346    	; 0x2e38 <vfprintf+0x39e>
    2cde:	80 37       	cpi	r24, 0x70	; 112
    2ce0:	19 f0       	breq	.+6      	; 0x2ce8 <vfprintf+0x24e>
    2ce2:	88 37       	cpi	r24, 0x78	; 120
    2ce4:	21 f0       	breq	.+8      	; 0x2cee <vfprintf+0x254>
    2ce6:	a8 c0       	rjmp	.+336    	; 0x2e38 <vfprintf+0x39e>
    2ce8:	2f 2f       	mov	r18, r31
    2cea:	20 61       	ori	r18, 0x10	; 16
    2cec:	b2 2e       	mov	r11, r18
    2cee:	b4 fe       	sbrs	r11, 4
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <vfprintf+0x272>
    2cf2:	8b 2d       	mov	r24, r11
    2cf4:	84 60       	ori	r24, 0x04	; 4
    2cf6:	b8 2e       	mov	r11, r24
    2cf8:	09 c0       	rjmp	.+18     	; 0x2d0c <vfprintf+0x272>
    2cfa:	24 ff       	sbrs	r18, 4
    2cfc:	0a c0       	rjmp	.+20     	; 0x2d12 <vfprintf+0x278>
    2cfe:	9f 2f       	mov	r25, r31
    2d00:	96 60       	ori	r25, 0x06	; 6
    2d02:	b9 2e       	mov	r11, r25
    2d04:	06 c0       	rjmp	.+12     	; 0x2d12 <vfprintf+0x278>
    2d06:	28 e0       	ldi	r18, 0x08	; 8
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <vfprintf+0x27c>
    2d0c:	20 e1       	ldi	r18, 0x10	; 16
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <vfprintf+0x27c>
    2d12:	20 e1       	ldi	r18, 0x10	; 16
    2d14:	32 e0       	ldi	r19, 0x02	; 2
    2d16:	f8 01       	movw	r30, r16
    2d18:	b7 fe       	sbrs	r11, 7
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <vfprintf+0x290>
    2d1c:	60 81       	ld	r22, Z
    2d1e:	71 81       	ldd	r23, Z+1	; 0x01
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	0c 5f       	subi	r16, 0xFC	; 252
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	06 c0       	rjmp	.+12     	; 0x2d36 <vfprintf+0x29c>
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 5f       	subi	r16, 0xFE	; 254
    2d34:	1f 4f       	sbci	r17, 0xFF	; 255
    2d36:	a4 01       	movw	r20, r8
    2d38:	ec d0       	rcall	.+472    	; 0x2f12 <__ultoa_invert>
    2d3a:	a8 2e       	mov	r10, r24
    2d3c:	a8 18       	sub	r10, r8
    2d3e:	fb 2d       	mov	r31, r11
    2d40:	ff 77       	andi	r31, 0x7F	; 127
    2d42:	7f 2e       	mov	r7, r31
    2d44:	76 fe       	sbrs	r7, 6
    2d46:	0b c0       	rjmp	.+22     	; 0x2d5e <vfprintf+0x2c4>
    2d48:	37 2d       	mov	r19, r7
    2d4a:	3e 7f       	andi	r19, 0xFE	; 254
    2d4c:	a5 14       	cp	r10, r5
    2d4e:	50 f4       	brcc	.+20     	; 0x2d64 <vfprintf+0x2ca>
    2d50:	74 fe       	sbrs	r7, 4
    2d52:	0a c0       	rjmp	.+20     	; 0x2d68 <vfprintf+0x2ce>
    2d54:	72 fc       	sbrc	r7, 2
    2d56:	08 c0       	rjmp	.+16     	; 0x2d68 <vfprintf+0x2ce>
    2d58:	37 2d       	mov	r19, r7
    2d5a:	3e 7e       	andi	r19, 0xEE	; 238
    2d5c:	05 c0       	rjmp	.+10     	; 0x2d68 <vfprintf+0x2ce>
    2d5e:	ba 2c       	mov	r11, r10
    2d60:	37 2d       	mov	r19, r7
    2d62:	03 c0       	rjmp	.+6      	; 0x2d6a <vfprintf+0x2d0>
    2d64:	ba 2c       	mov	r11, r10
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <vfprintf+0x2d0>
    2d68:	b5 2c       	mov	r11, r5
    2d6a:	34 ff       	sbrs	r19, 4
    2d6c:	0d c0       	rjmp	.+26     	; 0x2d88 <vfprintf+0x2ee>
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ea 0d       	add	r30, r10
    2d72:	f1 1d       	adc	r31, r1
    2d74:	80 81       	ld	r24, Z
    2d76:	80 33       	cpi	r24, 0x30	; 48
    2d78:	11 f4       	brne	.+4      	; 0x2d7e <vfprintf+0x2e4>
    2d7a:	39 7e       	andi	r19, 0xE9	; 233
    2d7c:	09 c0       	rjmp	.+18     	; 0x2d90 <vfprintf+0x2f6>
    2d7e:	32 ff       	sbrs	r19, 2
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <vfprintf+0x2f4>
    2d82:	b3 94       	inc	r11
    2d84:	b3 94       	inc	r11
    2d86:	04 c0       	rjmp	.+8      	; 0x2d90 <vfprintf+0x2f6>
    2d88:	83 2f       	mov	r24, r19
    2d8a:	86 78       	andi	r24, 0x86	; 134
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <vfprintf+0x2f6>
    2d8e:	b3 94       	inc	r11
    2d90:	33 fd       	sbrc	r19, 3
    2d92:	12 c0       	rjmp	.+36     	; 0x2db8 <vfprintf+0x31e>
    2d94:	30 ff       	sbrs	r19, 0
    2d96:	06 c0       	rjmp	.+12     	; 0x2da4 <vfprintf+0x30a>
    2d98:	5a 2c       	mov	r5, r10
    2d9a:	b3 14       	cp	r11, r3
    2d9c:	18 f4       	brcc	.+6      	; 0x2da4 <vfprintf+0x30a>
    2d9e:	53 0c       	add	r5, r3
    2da0:	5b 18       	sub	r5, r11
    2da2:	b3 2c       	mov	r11, r3
    2da4:	b3 14       	cp	r11, r3
    2da6:	60 f4       	brcc	.+24     	; 0x2dc0 <vfprintf+0x326>
    2da8:	b7 01       	movw	r22, r14
    2daa:	80 e2       	ldi	r24, 0x20	; 32
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	3c 87       	std	Y+12, r19	; 0x0c
    2db0:	78 d0       	rcall	.+240    	; 0x2ea2 <fputc>
    2db2:	b3 94       	inc	r11
    2db4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2db6:	f6 cf       	rjmp	.-20     	; 0x2da4 <vfprintf+0x30a>
    2db8:	b3 14       	cp	r11, r3
    2dba:	10 f4       	brcc	.+4      	; 0x2dc0 <vfprintf+0x326>
    2dbc:	3b 18       	sub	r3, r11
    2dbe:	01 c0       	rjmp	.+2      	; 0x2dc2 <vfprintf+0x328>
    2dc0:	31 2c       	mov	r3, r1
    2dc2:	34 ff       	sbrs	r19, 4
    2dc4:	11 c0       	rjmp	.+34     	; 0x2de8 <vfprintf+0x34e>
    2dc6:	b7 01       	movw	r22, r14
    2dc8:	80 e3       	ldi	r24, 0x30	; 48
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	3c 87       	std	Y+12, r19	; 0x0c
    2dce:	69 d0       	rcall	.+210    	; 0x2ea2 <fputc>
    2dd0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2dd2:	32 ff       	sbrs	r19, 2
    2dd4:	16 c0       	rjmp	.+44     	; 0x2e02 <vfprintf+0x368>
    2dd6:	31 fd       	sbrc	r19, 1
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <vfprintf+0x346>
    2dda:	88 e7       	ldi	r24, 0x78	; 120
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <vfprintf+0x34a>
    2de0:	88 e5       	ldi	r24, 0x58	; 88
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	b7 01       	movw	r22, r14
    2de6:	0c c0       	rjmp	.+24     	; 0x2e00 <vfprintf+0x366>
    2de8:	83 2f       	mov	r24, r19
    2dea:	86 78       	andi	r24, 0x86	; 134
    2dec:	51 f0       	breq	.+20     	; 0x2e02 <vfprintf+0x368>
    2dee:	31 ff       	sbrs	r19, 1
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <vfprintf+0x35c>
    2df2:	8b e2       	ldi	r24, 0x2B	; 43
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <vfprintf+0x35e>
    2df6:	80 e2       	ldi	r24, 0x20	; 32
    2df8:	37 fd       	sbrc	r19, 7
    2dfa:	8d e2       	ldi	r24, 0x2D	; 45
    2dfc:	b7 01       	movw	r22, r14
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	50 d0       	rcall	.+160    	; 0x2ea2 <fputc>
    2e02:	a5 14       	cp	r10, r5
    2e04:	30 f4       	brcc	.+12     	; 0x2e12 <vfprintf+0x378>
    2e06:	b7 01       	movw	r22, r14
    2e08:	80 e3       	ldi	r24, 0x30	; 48
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	4a d0       	rcall	.+148    	; 0x2ea2 <fputc>
    2e0e:	5a 94       	dec	r5
    2e10:	f8 cf       	rjmp	.-16     	; 0x2e02 <vfprintf+0x368>
    2e12:	aa 94       	dec	r10
    2e14:	f4 01       	movw	r30, r8
    2e16:	ea 0d       	add	r30, r10
    2e18:	f1 1d       	adc	r31, r1
    2e1a:	80 81       	ld	r24, Z
    2e1c:	b7 01       	movw	r22, r14
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	40 d0       	rcall	.+128    	; 0x2ea2 <fputc>
    2e22:	a1 10       	cpse	r10, r1
    2e24:	f6 cf       	rjmp	.-20     	; 0x2e12 <vfprintf+0x378>
    2e26:	33 20       	and	r3, r3
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <vfprintf+0x392>
    2e2a:	5d ce       	rjmp	.-838    	; 0x2ae6 <vfprintf+0x4c>
    2e2c:	b7 01       	movw	r22, r14
    2e2e:	80 e2       	ldi	r24, 0x20	; 32
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	37 d0       	rcall	.+110    	; 0x2ea2 <fputc>
    2e34:	3a 94       	dec	r3
    2e36:	f7 cf       	rjmp	.-18     	; 0x2e26 <vfprintf+0x38c>
    2e38:	f7 01       	movw	r30, r14
    2e3a:	86 81       	ldd	r24, Z+6	; 0x06
    2e3c:	97 81       	ldd	r25, Z+7	; 0x07
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <vfprintf+0x3aa>
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	9f ef       	ldi	r25, 0xFF	; 255
    2e44:	2c 96       	adiw	r28, 0x0c	; 12
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	ff 90       	pop	r15
    2e5a:	ef 90       	pop	r14
    2e5c:	df 90       	pop	r13
    2e5e:	cf 90       	pop	r12
    2e60:	bf 90       	pop	r11
    2e62:	af 90       	pop	r10
    2e64:	9f 90       	pop	r9
    2e66:	8f 90       	pop	r8
    2e68:	7f 90       	pop	r7
    2e6a:	6f 90       	pop	r6
    2e6c:	5f 90       	pop	r5
    2e6e:	4f 90       	pop	r4
    2e70:	3f 90       	pop	r3
    2e72:	2f 90       	pop	r2
    2e74:	08 95       	ret

00002e76 <strnlen_P>:
    2e76:	fc 01       	movw	r30, r24
    2e78:	05 90       	lpm	r0, Z+
    2e7a:	61 50       	subi	r22, 0x01	; 1
    2e7c:	70 40       	sbci	r23, 0x00	; 0
    2e7e:	01 10       	cpse	r0, r1
    2e80:	d8 f7       	brcc	.-10     	; 0x2e78 <strnlen_P+0x2>
    2e82:	80 95       	com	r24
    2e84:	90 95       	com	r25
    2e86:	8e 0f       	add	r24, r30
    2e88:	9f 1f       	adc	r25, r31
    2e8a:	08 95       	ret

00002e8c <strnlen>:
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	61 50       	subi	r22, 0x01	; 1
    2e90:	70 40       	sbci	r23, 0x00	; 0
    2e92:	01 90       	ld	r0, Z+
    2e94:	01 10       	cpse	r0, r1
    2e96:	d8 f7       	brcc	.-10     	; 0x2e8e <strnlen+0x2>
    2e98:	80 95       	com	r24
    2e9a:	90 95       	com	r25
    2e9c:	8e 0f       	add	r24, r30
    2e9e:	9f 1f       	adc	r25, r31
    2ea0:	08 95       	ret

00002ea2 <fputc>:
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	fb 01       	movw	r30, r22
    2eac:	23 81       	ldd	r18, Z+3	; 0x03
    2eae:	21 fd       	sbrc	r18, 1
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <fputc+0x16>
    2eb2:	8f ef       	ldi	r24, 0xFF	; 255
    2eb4:	9f ef       	ldi	r25, 0xFF	; 255
    2eb6:	28 c0       	rjmp	.+80     	; 0x2f08 <fputc+0x66>
    2eb8:	22 ff       	sbrs	r18, 2
    2eba:	16 c0       	rjmp	.+44     	; 0x2ee8 <fputc+0x46>
    2ebc:	46 81       	ldd	r20, Z+6	; 0x06
    2ebe:	57 81       	ldd	r21, Z+7	; 0x07
    2ec0:	24 81       	ldd	r18, Z+4	; 0x04
    2ec2:	35 81       	ldd	r19, Z+5	; 0x05
    2ec4:	42 17       	cp	r20, r18
    2ec6:	53 07       	cpc	r21, r19
    2ec8:	44 f4       	brge	.+16     	; 0x2eda <fputc+0x38>
    2eca:	a0 81       	ld	r26, Z
    2ecc:	b1 81       	ldd	r27, Z+1	; 0x01
    2ece:	9d 01       	movw	r18, r26
    2ed0:	2f 5f       	subi	r18, 0xFF	; 255
    2ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed4:	31 83       	std	Z+1, r19	; 0x01
    2ed6:	20 83       	st	Z, r18
    2ed8:	8c 93       	st	X, r24
    2eda:	26 81       	ldd	r18, Z+6	; 0x06
    2edc:	37 81       	ldd	r19, Z+7	; 0x07
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	37 83       	std	Z+7, r19	; 0x07
    2ee4:	26 83       	std	Z+6, r18	; 0x06
    2ee6:	10 c0       	rjmp	.+32     	; 0x2f08 <fputc+0x66>
    2ee8:	eb 01       	movw	r28, r22
    2eea:	09 2f       	mov	r16, r25
    2eec:	18 2f       	mov	r17, r24
    2eee:	00 84       	ldd	r0, Z+8	; 0x08
    2ef0:	f1 85       	ldd	r31, Z+9	; 0x09
    2ef2:	e0 2d       	mov	r30, r0
    2ef4:	09 95       	icall
    2ef6:	89 2b       	or	r24, r25
    2ef8:	e1 f6       	brne	.-72     	; 0x2eb2 <fputc+0x10>
    2efa:	8e 81       	ldd	r24, Y+6	; 0x06
    2efc:	9f 81       	ldd	r25, Y+7	; 0x07
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	9f 83       	std	Y+7, r25	; 0x07
    2f02:	8e 83       	std	Y+6, r24	; 0x06
    2f04:	81 2f       	mov	r24, r17
    2f06:	90 2f       	mov	r25, r16
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	08 95       	ret

00002f12 <__ultoa_invert>:
    2f12:	fa 01       	movw	r30, r20
    2f14:	aa 27       	eor	r26, r26
    2f16:	28 30       	cpi	r18, 0x08	; 8
    2f18:	51 f1       	breq	.+84     	; 0x2f6e <__ultoa_invert+0x5c>
    2f1a:	20 31       	cpi	r18, 0x10	; 16
    2f1c:	81 f1       	breq	.+96     	; 0x2f7e <__ultoa_invert+0x6c>
    2f1e:	e8 94       	clt
    2f20:	6f 93       	push	r22
    2f22:	6e 7f       	andi	r22, 0xFE	; 254
    2f24:	6e 5f       	subi	r22, 0xFE	; 254
    2f26:	7f 4f       	sbci	r23, 0xFF	; 255
    2f28:	8f 4f       	sbci	r24, 0xFF	; 255
    2f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2c:	af 4f       	sbci	r26, 0xFF	; 255
    2f2e:	b1 e0       	ldi	r27, 0x01	; 1
    2f30:	3e d0       	rcall	.+124    	; 0x2fae <__ultoa_invert+0x9c>
    2f32:	b4 e0       	ldi	r27, 0x04	; 4
    2f34:	3c d0       	rcall	.+120    	; 0x2fae <__ultoa_invert+0x9c>
    2f36:	67 0f       	add	r22, r23
    2f38:	78 1f       	adc	r23, r24
    2f3a:	89 1f       	adc	r24, r25
    2f3c:	9a 1f       	adc	r25, r26
    2f3e:	a1 1d       	adc	r26, r1
    2f40:	68 0f       	add	r22, r24
    2f42:	79 1f       	adc	r23, r25
    2f44:	8a 1f       	adc	r24, r26
    2f46:	91 1d       	adc	r25, r1
    2f48:	a1 1d       	adc	r26, r1
    2f4a:	6a 0f       	add	r22, r26
    2f4c:	71 1d       	adc	r23, r1
    2f4e:	81 1d       	adc	r24, r1
    2f50:	91 1d       	adc	r25, r1
    2f52:	a1 1d       	adc	r26, r1
    2f54:	20 d0       	rcall	.+64     	; 0x2f96 <__ultoa_invert+0x84>
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <__ultoa_invert+0x48>
    2f58:	68 94       	set
    2f5a:	3f 91       	pop	r19
    2f5c:	2a e0       	ldi	r18, 0x0A	; 10
    2f5e:	26 9f       	mul	r18, r22
    2f60:	11 24       	eor	r1, r1
    2f62:	30 19       	sub	r19, r0
    2f64:	30 5d       	subi	r19, 0xD0	; 208
    2f66:	31 93       	st	Z+, r19
    2f68:	de f6       	brtc	.-74     	; 0x2f20 <__ultoa_invert+0xe>
    2f6a:	cf 01       	movw	r24, r30
    2f6c:	08 95       	ret
    2f6e:	46 2f       	mov	r20, r22
    2f70:	47 70       	andi	r20, 0x07	; 7
    2f72:	40 5d       	subi	r20, 0xD0	; 208
    2f74:	41 93       	st	Z+, r20
    2f76:	b3 e0       	ldi	r27, 0x03	; 3
    2f78:	0f d0       	rcall	.+30     	; 0x2f98 <__ultoa_invert+0x86>
    2f7a:	c9 f7       	brne	.-14     	; 0x2f6e <__ultoa_invert+0x5c>
    2f7c:	f6 cf       	rjmp	.-20     	; 0x2f6a <__ultoa_invert+0x58>
    2f7e:	46 2f       	mov	r20, r22
    2f80:	4f 70       	andi	r20, 0x0F	; 15
    2f82:	40 5d       	subi	r20, 0xD0	; 208
    2f84:	4a 33       	cpi	r20, 0x3A	; 58
    2f86:	18 f0       	brcs	.+6      	; 0x2f8e <__ultoa_invert+0x7c>
    2f88:	49 5d       	subi	r20, 0xD9	; 217
    2f8a:	31 fd       	sbrc	r19, 1
    2f8c:	40 52       	subi	r20, 0x20	; 32
    2f8e:	41 93       	st	Z+, r20
    2f90:	02 d0       	rcall	.+4      	; 0x2f96 <__ultoa_invert+0x84>
    2f92:	a9 f7       	brne	.-22     	; 0x2f7e <__ultoa_invert+0x6c>
    2f94:	ea cf       	rjmp	.-44     	; 0x2f6a <__ultoa_invert+0x58>
    2f96:	b4 e0       	ldi	r27, 0x04	; 4
    2f98:	a6 95       	lsr	r26
    2f9a:	97 95       	ror	r25
    2f9c:	87 95       	ror	r24
    2f9e:	77 95       	ror	r23
    2fa0:	67 95       	ror	r22
    2fa2:	ba 95       	dec	r27
    2fa4:	c9 f7       	brne	.-14     	; 0x2f98 <__ultoa_invert+0x86>
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	61 05       	cpc	r22, r1
    2faa:	71 05       	cpc	r23, r1
    2fac:	08 95       	ret
    2fae:	9b 01       	movw	r18, r22
    2fb0:	ac 01       	movw	r20, r24
    2fb2:	0a 2e       	mov	r0, r26
    2fb4:	06 94       	lsr	r0
    2fb6:	57 95       	ror	r21
    2fb8:	47 95       	ror	r20
    2fba:	37 95       	ror	r19
    2fbc:	27 95       	ror	r18
    2fbe:	ba 95       	dec	r27
    2fc0:	c9 f7       	brne	.-14     	; 0x2fb4 <__ultoa_invert+0xa2>
    2fc2:	62 0f       	add	r22, r18
    2fc4:	73 1f       	adc	r23, r19
    2fc6:	84 1f       	adc	r24, r20
    2fc8:	95 1f       	adc	r25, r21
    2fca:	a0 1d       	adc	r26, r0
    2fcc:	08 95       	ret

00002fce <_exit>:
    2fce:	f8 94       	cli

00002fd0 <__stop_program>:
    2fd0:	ff cf       	rjmp	.-2      	; 0x2fd0 <__stop_program>
