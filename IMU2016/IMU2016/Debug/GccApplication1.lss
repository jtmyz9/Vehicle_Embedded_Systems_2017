
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000027bc  00002850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  00002854  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f3e  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053e  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000138f  00000000  00000000  00003e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000424  00000000  00000000  000051f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062a  00000000  00000000  0000561c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000837  00000000  00000000  00005c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0000647d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2d c0       	rjmp	.+90     	; 0xe8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2b c0       	rjmp	.+86     	; 0xe8 <__bad_interrupt>
      92:	00 00       	nop
      94:	54 04       	cpc	r5, r4
      96:	4a 05       	cpc	r20, r10
      98:	34 06       	cpc	r3, r20
      9a:	02 07       	cpc	r16, r18
      9c:	85 07       	cpc	r24, r21
      9e:	15 08       	sbc	r1, r5
      a0:	af 08       	sbc	r10, r15
      a2:	d5 09       	sbc	r29, r5
      a4:	08 0b       	sbc	r16, r24
      a6:	45 0c       	add	r4, r5
      a8:	fb 0c       	add	r15, r11

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	ec eb       	ldi	r30, 0xBC	; 188
      be:	f7 e2       	ldi	r31, 0x27	; 39
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 30       	cpi	r26, 0x04	; 4
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	a4 e0       	ldi	r26, 0x04	; 4
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a0 31       	cpi	r26, 0x10	; 16
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <main>
      e4:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	00 d0       	rcall	.+0      	; 0xf0 <can_clear_all_mob+0x6>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <can_clear_all_mob+0x8>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
U8  mob_number, data_index;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	29 c0       	rjmp	.+82     	; 0x14c <can_clear_all_mob+0x62>
    {
        CANPAGE = (mob_number << 4);    //! Page index
      fa:	8d ee       	ldi	r24, 0xED	; 237
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	22 95       	swap	r18
     102:	20 7f       	andi	r18, 0xF0	; 240
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
        Can_clear_mob();                //! All MOb Registers=0
     108:	8e ee       	ldi	r24, 0xEE	; 238
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	9c 83       	std	Y+4, r25	; 0x04
     10e:	8b 83       	std	Y+3, r24	; 0x03
     110:	09 c0       	rjmp	.+18     	; 0x124 <can_clear_all_mob+0x3a>
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	9c 81       	ldd	r25, Y+4	; 0x04
     116:	fc 01       	movw	r30, r24
     118:	10 82       	st	Z, r1
     11a:	8b 81       	ldd	r24, Y+3	; 0x03
     11c:	9c 81       	ldd	r25, Y+4	; 0x04
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	9c 83       	std	Y+4, r25	; 0x04
     122:	8b 83       	std	Y+3, r24	; 0x03
     124:	8b 81       	ldd	r24, Y+3	; 0x03
     126:	9c 81       	ldd	r25, Y+4	; 0x04
     128:	88 3f       	cpi	r24, 0xF8	; 248
     12a:	91 05       	cpc	r25, r1
     12c:	90 f3       	brcs	.-28     	; 0x112 <can_clear_all_mob+0x28>

        for (data_index = 0; data_index < NB_DATA_MAX; data_index++)
     12e:	1a 82       	std	Y+2, r1	; 0x02
     130:	07 c0       	rjmp	.+14     	; 0x140 <can_clear_all_mob+0x56>
        {
            CANMSG = 0;                 //! MOb data FIFO
     132:	8a ef       	ldi	r24, 0xFA	; 250
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	10 82       	st	Z, r1
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
        Can_clear_mob();                //! All MOb Registers=0

        for (data_index = 0; data_index < NB_DATA_MAX; data_index++)
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	8f 5f       	subi	r24, 0xFF	; 255
     13e:	8a 83       	std	Y+2, r24	; 0x02
     140:	8a 81       	ldd	r24, Y+2	; 0x02
     142:	88 30       	cpi	r24, 0x08	; 8
     144:	b0 f3       	brcs	.-20     	; 0x132 <can_clear_all_mob+0x48>
U8  mob_number, data_index;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	8f 5f       	subi	r24, 0xFF	; 255
     14a:	89 83       	std	Y+1, r24	; 0x01
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	8f 30       	cpi	r24, 0x0F	; 15
     150:	a0 f2       	brcs	.-88     	; 0xfa <can_clear_all_mob+0x10>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }

    }
}
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <can_get_mob_free>:
//! @return Handle of MOb.
//!          - MOb[0] upto MOb[LAST_MOB_NB]
//!          - 0xFF if no MOb
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	00 d0       	rcall	.+0      	; 0x166 <can_get_mob_free+0x6>
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
     16a:	8d ee       	ldi	r24, 0xED	; 237
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	80 81       	ld	r24, Z
     172:	8a 83       	std	Y+2, r24	; 0x02
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     174:	19 82       	std	Y+1, r1	; 0x01
     176:	1b c0       	rjmp	.+54     	; 0x1ae <can_get_mob_free+0x4e>
    {
        Can_set_mob(mob_number);
     178:	8d ee       	ldi	r24, 0xED	; 237
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	29 81       	ldd	r18, Y+1	; 0x01
     17e:	22 95       	swap	r18
     180:	20 7f       	andi	r18, 0xF0	; 240
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     186:	8f ee       	ldi	r24, 0xEF	; 239
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	fc 01       	movw	r30, r24
     18c:	80 81       	ld	r24, Z
     18e:	88 2f       	mov	r24, r24
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	80 7c       	andi	r24, 0xC0	; 192
     194:	99 27       	eor	r25, r25
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	39 f4       	brne	.+14     	; 0x1a8 <can_get_mob_free+0x48>
        {
            CANPAGE = page_saved;
     19a:	8d ee       	ldi	r24, 0xED	; 237
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	2a 81       	ldd	r18, Y+2	; 0x02
     1a0:	fc 01       	movw	r30, r24
     1a2:	20 83       	st	Z, r18
            return (mob_number);
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <can_get_mob_free+0x60>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	89 83       	std	Y+1, r24	; 0x01
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	8f 30       	cpi	r24, 0x0F	; 15
     1b2:	10 f3       	brcs	.-60     	; 0x178 <can_get_mob_free+0x18>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
     1b4:	8d ee       	ldi	r24, 0xED	; 237
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	2a 81       	ldd	r18, Y+2	; 0x02
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
    return (NO_MOB);
     1be:	8f ef       	ldi	r24, 0xFF	; 255
}
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <can_get_mob_status>:
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
U8 can_get_mob_status(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	00 d0       	rcall	.+0      	; 0x1d0 <can_get_mob_status+0x6>
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     1d4:	8f ee       	ldi	r24, 0xEF	; 239
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	80 7c       	andi	r24, 0xC0	; 192
     1e2:	99 27       	eor	r25, r25
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	11 f4       	brne	.+4      	; 0x1ec <can_get_mob_status+0x22>
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	1c c0       	rjmp	.+56     	; 0x224 <can_get_mob_status+0x5a>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     1ec:	8e ee       	ldi	r24, 0xEE	; 238
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	fc 01       	movw	r30, r24
     1f2:	80 81       	ld	r24, Z
     1f4:	89 83       	std	Y+1, r24	; 0x01

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	80 7e       	andi	r24, 0xE0	; 224
     1fa:	8a 83       	std	Y+2, r24	; 0x02
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	80 32       	cpi	r24, 0x20	; 32
     200:	31 f0       	breq	.+12     	; 0x20e <can_get_mob_status+0x44>
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	80 34       	cpi	r24, 0x40	; 64
     206:	19 f0       	breq	.+6      	; 0x20e <can_get_mob_status+0x44>
         (mob_status==MOB_TX_COMPLETED) ||   \
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	80 3a       	cpi	r24, 0xA0	; 160
     20c:	11 f4       	brne	.+4      	; 0x212 <can_get_mob_status+0x48>
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	09 c0       	rjmp	.+18     	; 0x224 <can_get_mob_status+0x5a>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	8f 71       	andi	r24, 0x1F	; 31
     216:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	88 23       	and	r24, r24
     21c:	11 f0       	breq	.+4      	; 0x222 <can_get_mob_status+0x58>
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	01 c0       	rjmp	.+2      	; 0x224 <can_get_mob_status+0x5a>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     222:	80 e0       	ldi	r24, 0x00	; 0
}
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <can_get_data+0x6>
     234:	1f 92       	push	r1
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	9b 83       	std	Y+3, r25	; 0x03
     23c:	8a 83       	std	Y+2, r24	; 0x02
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	10 c0       	rjmp	.+32     	; 0x262 <can_get_data+0x34>
    {
        *(p_can_message_data + data_index) = CANMSG;
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	2a 81       	ldd	r18, Y+2	; 0x02
     24a:	3b 81       	ldd	r19, Y+3	; 0x03
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	2a ef       	ldi	r18, 0xFA	; 250
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	8f ee       	ldi	r24, 0xEF	; 239
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	fc 01       	movw	r30, r24
     26e:	80 81       	ld	r24, Z
     270:	88 2f       	mov	r24, r24
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	8f 70       	andi	r24, 0x0F	; 15
     276:	99 27       	eor	r25, r25
     278:	28 17       	cp	r18, r24
     27a:	39 07       	cpc	r19, r25
     27c:	14 f3       	brlt	.-60     	; 0x242 <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	62 97       	sbiw	r28, 0x12	; 18
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	8a 8b       	std	Y+18, r24	; 0x12
    U8  u8_temp0;                               //! Temporary variable
    U8  brp, prs, ntq, phs1, phs2;              //! Bit timing segment variables
    U8  phs1_inc;                               //! Computing needed
    U8  bt_not_found, wait_for_rx, evaluate;    //! Keys for "while()" loops
    U8  try_conf;                               //! Key for configurate CAN
    U8  ovrtim_flag=0;                          //! Timer overflow count
     2a0:	1c 86       	std	Y+12, r1	; 0x0c
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
     2a2:	1a 86       	std	Y+10, r1	; 0x0a
     2a4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2a6:	8f 83       	std	Y+7, r24	; 0x07
    bt_performed = 0;
     2a8:	1f 86       	std	Y+15, r1	; 0x0f
    conf_index = 0;
     2aa:	1e 86       	std	Y+14, r1	; 0x0e
     2ac:	1d 86       	std	Y+13, r1	; 0x0d
    bt_not_found = 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	88 87       	std	Y+8, r24	; 0x08

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
     2b2:	8a 89       	ldd	r24, Y+18	; 0x12
     2b4:	88 23       	and	r24, r24
     2b6:	b1 f4       	brne	.+44     	; 0x2e4 <can_auto_baudrate+0x5a>
    {
        brp  = BRP_MIN;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	8a 83       	std	Y+2, r24	; 0x02
        ntq  = NTQ_MIN;
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	8c 83       	std	Y+4, r24	; 0x04
        phs1 = PHS1_MIN;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	8d 83       	std	Y+5, r24	; 0x05
        phs2 = PHS2_MIN;
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	8e 83       	std	Y+6, r24	; 0x06
        prs  = ntq - ( phs1 + phs2 + 1 );
     2c8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ca:	8e 81       	ldd	r24, Y+6	; 0x06
     2cc:	89 0f       	add	r24, r25
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	29 2f       	mov	r18, r25
     2d2:	28 1b       	sub	r18, r24
     2d4:	82 2f       	mov	r24, r18
     2d6:	81 50       	subi	r24, 0x01	; 1
     2d8:	8b 83       	std	Y+3, r24	; 0x03
        try_conf = 1;       //! Try this configuration
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	8b 87       	std	Y+11, r24	; 0x0b
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	89 87       	std	Y+9, r24	; 0x09
     2e2:	96 c0       	rjmp	.+300    	; 0x410 <can_auto_baudrate+0x186>
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
     2e4:	82 ee       	ldi	r24, 0xE2	; 226
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	fc 01       	movw	r30, r24
     2ea:	80 81       	ld	r24, Z
     2ec:	88 2f       	mov	r24, r24
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	8e 77       	andi	r24, 0x7E	; 126
     2f2:	99 27       	eor	r25, r25
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	82 30       	cpi	r24, 0x02	; 2
     2fc:	91 05       	cpc	r25, r1
     2fe:	64 f0       	brlt	.+24     	; 0x318 <can_auto_baudrate+0x8e>
     300:	82 ee       	ldi	r24, 0xE2	; 226
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	8e 77       	andi	r24, 0x7E	; 126
     30e:	99 27       	eor	r25, r25
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	01 c0       	rjmp	.+2      	; 0x31a <can_auto_baudrate+0x90>
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	8a 83       	std	Y+2, r24	; 0x02
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
     31c:	83 ee       	ldi	r24, 0xE3	; 227
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	fc 01       	movw	r30, r24
     322:	80 81       	ld	r24, Z
     324:	88 2f       	mov	r24, r24
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	8e 70       	andi	r24, 0x0E	; 14
     32a:	99 27       	eor	r25, r25
     32c:	95 95       	asr	r25
     32e:	87 95       	ror	r24
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	91 05       	cpc	r25, r1
     336:	64 f0       	brlt	.+24     	; 0x350 <can_auto_baudrate+0xc6>
     338:	83 ee       	ldi	r24, 0xE3	; 227
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	80 81       	ld	r24, Z
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	8e 70       	andi	r24, 0x0E	; 14
     346:	99 27       	eor	r25, r25
     348:	95 95       	asr	r25
     34a:	87 95       	ror	r24
     34c:	8f 5f       	subi	r24, 0xFF	; 255
     34e:	01 c0       	rjmp	.+2      	; 0x352 <can_auto_baudrate+0xc8>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	8b 83       	std	Y+3, r24	; 0x03
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
     354:	84 ee       	ldi	r24, 0xE4	; 228
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	fc 01       	movw	r30, r24
     35a:	80 81       	ld	r24, Z
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	8e 70       	andi	r24, 0x0E	; 14
     362:	99 27       	eor	r25, r25
     364:	95 95       	asr	r25
     366:	87 95       	ror	r24
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	91 05       	cpc	r25, r1
     36e:	64 f0       	brlt	.+24     	; 0x388 <can_auto_baudrate+0xfe>
     370:	84 ee       	ldi	r24, 0xE4	; 228
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	8e 70       	andi	r24, 0x0E	; 14
     37e:	99 27       	eor	r25, r25
     380:	95 95       	asr	r25
     382:	87 95       	ror	r24
     384:	8f 5f       	subi	r24, 0xFF	; 255
     386:	01 c0       	rjmp	.+2      	; 0x38a <can_auto_baudrate+0x100>
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	8d 83       	std	Y+5, r24	; 0x05
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
     38c:	84 ee       	ldi	r24, 0xE4	; 228
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	80 77       	andi	r24, 0x70	; 112
     39a:	99 27       	eor	r25, r25
     39c:	95 95       	asr	r25
     39e:	87 95       	ror	r24
     3a0:	95 95       	asr	r25
     3a2:	87 95       	ror	r24
     3a4:	95 95       	asr	r25
     3a6:	87 95       	ror	r24
     3a8:	95 95       	asr	r25
     3aa:	87 95       	ror	r24
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	83 30       	cpi	r24, 0x03	; 3
     3b0:	91 05       	cpc	r25, r1
     3b2:	94 f0       	brlt	.+36     	; 0x3d8 <can_auto_baudrate+0x14e>
     3b4:	84 ee       	ldi	r24, 0xE4	; 228
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 77       	andi	r24, 0x70	; 112
     3c2:	99 27       	eor	r25, r25
     3c4:	95 95       	asr	r25
     3c6:	87 95       	ror	r24
     3c8:	95 95       	asr	r25
     3ca:	87 95       	ror	r24
     3cc:	95 95       	asr	r25
     3ce:	87 95       	ror	r24
     3d0:	95 95       	asr	r25
     3d2:	87 95       	ror	r24
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <can_auto_baudrate+0x150>
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	8e 83       	std	Y+6, r24	; 0x06
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	8d 81       	ldd	r24, Y+5	; 0x05
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	28 0f       	add	r18, r24
     3ea:	39 1f       	adc	r19, r25
     3ec:	8e 81       	ldd	r24, Y+6	; 0x06
     3ee:	88 2f       	mov	r24, r24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	88 30       	cpi	r24, 0x08	; 8
     3fa:	91 05       	cpc	r25, r1
     3fc:	14 f4       	brge	.+4      	; 0x402 <can_auto_baudrate+0x178>
     3fe:	88 e0       	ldi	r24, 0x08	; 8
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	8c 83       	std	Y+4, r24	; 0x04
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	8a 87       	std	Y+10, r24	; 0x0a
     408:	8a 85       	ldd	r24, Y+10	; 0x0a
     40a:	8f 83       	std	Y+7, r24	; 0x07
        try_conf = 0;       //! Look for the next configuration
     40c:	1b 86       	std	Y+11, r1	; 0x0b
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     40e:	19 86       	std	Y+9, r1	; 0x09
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     410:	19 82       	std	Y+1, r1	; 0x01
     412:	1d c0       	rjmp	.+58     	; 0x44e <can_auto_baudrate+0x1c4>
    {
        Can_set_mob(u8_temp0);  //! Page index
     414:	8d ee       	ldi	r24, 0xED	; 237
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	22 95       	swap	r18
     41c:	20 7f       	andi	r18, 0xF0	; 240
     41e:	fc 01       	movw	r30, r24
     420:	20 83       	st	Z, r18
        Can_clear_mob();        //! All MOb Registers = 0x00
     422:	8e ee       	ldi	r24, 0xEE	; 238
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	99 8b       	std	Y+17, r25	; 0x11
     428:	88 8b       	std	Y+16, r24	; 0x10
     42a:	09 c0       	rjmp	.+18     	; 0x43e <can_auto_baudrate+0x1b4>
     42c:	88 89       	ldd	r24, Y+16	; 0x10
     42e:	99 89       	ldd	r25, Y+17	; 0x11
     430:	fc 01       	movw	r30, r24
     432:	10 82       	st	Z, r1
     434:	88 89       	ldd	r24, Y+16	; 0x10
     436:	99 89       	ldd	r25, Y+17	; 0x11
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	99 8b       	std	Y+17, r25	; 0x11
     43c:	88 8b       	std	Y+16, r24	; 0x10
     43e:	88 89       	ldd	r24, Y+16	; 0x10
     440:	99 89       	ldd	r25, Y+17	; 0x11
     442:	88 3f       	cpi	r24, 0xF8	; 248
     444:	91 05       	cpc	r25, r1
     446:	90 f3       	brcs	.-28     	; 0x42c <can_auto_baudrate+0x1a2>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	89 83       	std	Y+1, r24	; 0x01
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	8f 30       	cpi	r24, 0x0F	; 15
     452:	00 f3       	brcs	.-64     	; 0x414 <can_auto_baudrate+0x18a>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     454:	82 c1       	rjmp	.+772    	; 0x75a <can_auto_baudrate+0x4d0>
    {
        if (try_conf == 1)
     456:	8b 85       	ldd	r24, Y+11	; 0x0b
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	09 f0       	breq	.+2      	; 0x45e <can_auto_baudrate+0x1d4>
     45c:	75 c0       	rjmp	.+234    	; 0x548 <can_auto_baudrate+0x2be>
        {
            Can_reset();
     45e:	88 ed       	ldi	r24, 0xD8	; 216
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	21 e0       	ldi	r18, 0x01	; 1
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
            conf_index++;
     468:	8d 85       	ldd	r24, Y+13	; 0x0d
     46a:	9e 85       	ldd	r25, Y+14	; 0x0e
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	9e 87       	std	Y+14, r25	; 0x0e
     470:	8d 87       	std	Y+13, r24	; 0x0d
            ovrtim_flag=0;
     472:	1c 86       	std	Y+12, r1	; 0x0c

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     474:	82 ee       	ldi	r24, 0xE2	; 226
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	2a 81       	ldd	r18, Y+2	; 0x02
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	22 0f       	add	r18, r18
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     482:	83 ee       	ldi	r24, 0xE3	; 227
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	2e 81       	ldd	r18, Y+6	; 0x06
     488:	26 95       	lsr	r18
     48a:	22 2f       	mov	r18, r18
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	31 09       	sbc	r19, r1
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	22 95       	swap	r18
     498:	32 95       	swap	r19
     49a:	30 7f       	andi	r19, 0xF0	; 240
     49c:	32 27       	eor	r19, r18
     49e:	20 7f       	andi	r18, 0xF0	; 240
     4a0:	32 27       	eor	r19, r18
     4a2:	42 2f       	mov	r20, r18
     4a4:	2b 81       	ldd	r18, Y+3	; 0x03
     4a6:	22 2f       	mov	r18, r18
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	21 50       	subi	r18, 0x01	; 1
     4ac:	31 09       	sbc	r19, r1
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	24 2b       	or	r18, r20
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     4b8:	84 ee       	ldi	r24, 0xE4	; 228
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2e 81       	ldd	r18, Y+6	; 0x06
     4be:	22 2f       	mov	r18, r18
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	31 09       	sbc	r19, r1
     4c6:	22 95       	swap	r18
     4c8:	32 95       	swap	r19
     4ca:	30 7f       	andi	r19, 0xF0	; 240
     4cc:	32 27       	eor	r19, r18
     4ce:	20 7f       	andi	r18, 0xF0	; 240
     4d0:	32 27       	eor	r19, r18
     4d2:	42 2f       	mov	r20, r18
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	22 2f       	mov	r18, r18
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	31 09       	sbc	r19, r1
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	24 2b       	or	r18, r20
     4e4:	21 60       	ori	r18, 0x01	; 1
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
     4ea:	85 ee       	ldi	r24, 0xE5	; 229
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	2d 85       	ldd	r18, Y+13	; 0x0d
     4f0:	3e 85       	ldd	r19, Y+14	; 0x0e
     4f2:	36 95       	lsr	r19
     4f4:	27 95       	ror	r18
     4f6:	36 95       	lsr	r19
     4f8:	27 95       	ror	r18
     4fa:	36 95       	lsr	r19
     4fc:	27 95       	ror	r18
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     502:	8d ee       	ldi	r24, 0xED	; 237
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	fc 01       	movw	r30, r24
     508:	10 82       	st	Z, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     50a:	8e ee       	ldi	r24, 0xEE	; 238
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fc 01       	movw	r30, r24
     510:	10 82       	st	Z, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     512:	8f ee       	ldi	r24, 0xEF	; 239
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	20 e8       	ldi	r18, 0x80	; 128
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     51c:	88 ed       	ldi	r24, 0xD8	; 216
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	2a e0       	ldi	r18, 0x0A	; 10
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     526:	00 00       	nop
     528:	89 ed       	ldi	r24, 0xD9	; 217
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	80 81       	ld	r24, Z
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	84 70       	andi	r24, 0x04	; 4
     536:	99 27       	eor	r25, r25
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	b1 f3       	breq	.-20     	; 0x528 <can_auto_baudrate+0x29e>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     53c:	8a ed       	ldi	r24, 0xDA	; 218
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	2f ef       	ldi	r18, 0xFF	; 255
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     546:	69 c0       	rjmp	.+210    	; 0x61a <can_auto_baudrate+0x390>
     548:	68 c0       	rjmp	.+208    	; 0x61a <can_auto_baudrate+0x390>
        {
            u8_temp0 = CANSTMOB;
     54a:	8e ee       	ldi	r24, 0xEE	; 238
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	fc 01       	movw	r30, r24
     550:	80 81       	ld	r24, Z
     552:	89 83       	std	Y+1, r24	; 0x01
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	80 72       	andi	r24, 0x20	; 32
     55c:	99 27       	eor	r25, r25
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	f1 f0       	breq	.+60     	; 0x59e <can_auto_baudrate+0x314>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     562:	19 86       	std	Y+9, r1	; 0x09
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     564:	1a 86       	std	Y+10, r1	; 0x0a
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     566:	18 86       	std	Y+8, r1	; 0x08
                bt_performed = 1;   //! Return flag = TRUE
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	8f 87       	std	Y+15, r24	; 0x0f
                DISABLE_MOB;        //! Disable MOb-0
     56c:	8f ee       	ldi	r24, 0xEF	; 239
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	2f ee       	ldi	r18, 0xEF	; 239
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	f9 01       	movw	r30, r18
     576:	20 81       	ld	r18, Z
     578:	2f 73       	andi	r18, 0x3F	; 63
     57a:	fc 01       	movw	r30, r24
     57c:	20 83       	st	Z, r18
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     57e:	88 ed       	ldi	r24, 0xD8	; 216
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	10 82       	st	Z, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     586:	00 00       	nop
     588:	89 ed       	ldi	r24, 0xD9	; 217
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	84 70       	andi	r24, 0x04	; 4
     596:	99 27       	eor	r25, r25
     598:	00 97       	sbiw	r24, 0x00	; 0
     59a:	b1 f7       	brne	.-20     	; 0x588 <can_auto_baudrate+0x2fe>
     59c:	3e c0       	rjmp	.+124    	; 0x61a <can_auto_baudrate+0x390>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	8f 71       	andi	r24, 0x1F	; 31
     5a6:	99 27       	eor	r25, r25
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	19 f0       	breq	.+6      	; 0x5b2 <can_auto_baudrate+0x328>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	8a 87       	std	Y+10, r24	; 0x0a
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     5b0:	19 86       	std	Y+9, r1	; 0x09
                }

                u8_temp0 = CANGIT;
     5b2:	8a ed       	ldi	r24, 0xDA	; 218
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	89 83       	std	Y+1, r24	; 0x01

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	80 72       	andi	r24, 0x20	; 32
     5c4:	99 27       	eor	r25, r25
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	e1 f0       	breq	.+56     	; 0x602 <can_auto_baudrate+0x378>
                {
                    if (ovrtim_flag==0)
     5ca:	8c 85       	ldd	r24, Y+12	; 0x0c
     5cc:	88 23       	and	r24, r24
     5ce:	69 f4       	brne	.+26     	; 0x5ea <can_auto_baudrate+0x360>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     5d0:	8a ed       	ldi	r24, 0xDA	; 218
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	2a ed       	ldi	r18, 0xDA	; 218
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	f9 01       	movw	r30, r18
     5da:	20 81       	ld	r18, Z
     5dc:	20 62       	ori	r18, 0x20	; 32
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
                        ovrtim_flag++;
     5e2:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	8c 87       	std	Y+12, r24	; 0x0c
     5e8:	0c c0       	rjmp	.+24     	; 0x602 <can_auto_baudrate+0x378>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     5ea:	8a ed       	ldi	r24, 0xDA	; 218
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	2a ed       	ldi	r18, 0xDA	; 218
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	20 62       	ori	r18, 0x20	; 32
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	8a 87       	std	Y+10, r24	; 0x0a
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
     600:	19 86       	std	Y+9, r1	; 0x09
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	8f 70       	andi	r24, 0x0F	; 15
     60a:	99 27       	eor	r25, r25
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	29 f0       	breq	.+10     	; 0x61a <can_auto_baudrate+0x390>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	8a 87       	std	Y+10, r24	; 0x0a
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     614:	19 86       	std	Y+9, r1	; 0x09
                    try_conf = 1;       //! Try this configuration
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8b 87       	std	Y+11, r24	; 0x0b
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	09 f4       	brne	.+2      	; 0x622 <can_auto_baudrate+0x398>
     620:	94 cf       	rjmp	.-216    	; 0x54a <can_auto_baudrate+0x2c0>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     622:	97 c0       	rjmp	.+302    	; 0x752 <can_auto_baudrate+0x4c8>
        {
            if (phs1_inc != 0) phs1++;
     624:	8f 81       	ldd	r24, Y+7	; 0x07
     626:	88 23       	and	r24, r24
     628:	19 f0       	breq	.+6      	; 0x630 <can_auto_baudrate+0x3a6>
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	8d 83       	std	Y+5, r24	; 0x05
            phs1_inc = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	8f 83       	std	Y+7, r24	; 0x07

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     634:	8d 81       	ldd	r24, Y+5	; 0x05
     636:	89 30       	cpi	r24, 0x09	; 9
     638:	a0 f1       	brcs	.+104    	; 0x6a2 <can_auto_baudrate+0x418>
     63a:	8e 81       	ldd	r24, Y+6	; 0x06
     63c:	88 30       	cpi	r24, 0x08	; 8
     63e:	88 f1       	brcs	.+98     	; 0x6a2 <can_auto_baudrate+0x418>
            {
                phs1 = PHS1_MIN;
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	8d 83       	std	Y+5, r24	; 0x05
                phs2 = PHS2_MIN;
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	8e 83       	std	Y+6, r24	; 0x06
                phs1_inc = 0;
     648:	1f 82       	std	Y+7, r1	; 0x07
                if (ntq != NTQ_MAX) ntq++;
     64a:	8c 81       	ldd	r24, Y+4	; 0x04
     64c:	89 31       	cpi	r24, 0x19	; 25
     64e:	21 f0       	breq	.+8      	; 0x658 <can_auto_baudrate+0x3ce>
     650:	8c 81       	ldd	r24, Y+4	; 0x04
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	8c 83       	std	Y+4, r24	; 0x04
     656:	24 c0       	rjmp	.+72     	; 0x6a0 <can_auto_baudrate+0x416>
                else
                {
                    ntq = NTQ_MIN;
     658:	88 e0       	ldi	r24, 0x08	; 8
     65a:	8c 83       	std	Y+4, r24	; 0x04
                    if (brp != BRP_MAX) brp++;
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	80 34       	cpi	r24, 0x40	; 64
     660:	21 f0       	breq	.+8      	; 0x66a <can_auto_baudrate+0x3e0>
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	8a 83       	std	Y+2, r24	; 0x02
     668:	1b c0       	rjmp	.+54     	; 0x6a0 <can_auto_baudrate+0x416>
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     66a:	1a 86       	std	Y+10, r1	; 0x0a
                        bt_performed = 0;   //! Return flag = FALSE
     66c:	1f 86       	std	Y+15, r1	; 0x0f
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     66e:	18 86       	std	Y+8, r1	; 0x08
                        DISABLE_MOB;        //! Disable MOb-0
     670:	8f ee       	ldi	r24, 0xEF	; 239
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2f ee       	ldi	r18, 0xEF	; 239
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	2f 73       	andi	r18, 0x3F	; 63
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     682:	88 ed       	ldi	r24, 0xD8	; 216
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	fc 01       	movw	r30, r24
     688:	10 82       	st	Z, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     68a:	00 00       	nop
     68c:	89 ed       	ldi	r24, 0xD9	; 217
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	88 2f       	mov	r24, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	84 70       	andi	r24, 0x04	; 4
     69a:	99 27       	eor	r25, r25
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	b1 f7       	brne	.-20     	; 0x68c <can_auto_baudrate+0x402>
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
     6a0:	58 c0       	rjmp	.+176    	; 0x752 <can_auto_baudrate+0x4c8>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     6a2:	8d 81       	ldd	r24, Y+5	; 0x05
     6a4:	86 30       	cpi	r24, 0x06	; 6
     6a6:	80 f0       	brcs	.+32     	; 0x6c8 <can_auto_baudrate+0x43e>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     6a8:	8d 81       	ldd	r24, Y+5	; 0x05
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	82 17       	cp	r24, r18
     6b8:	93 07       	cpc	r25, r19
     6ba:	44 f4       	brge	.+16     	; 0x6cc <can_auto_baudrate+0x442>
     6bc:	8e 81       	ldd	r24, Y+6	; 0x06
     6be:	8f 5f       	subi	r24, 0xFF	; 255
     6c0:	8e 83       	std	Y+6, r24	; 0x06
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	8d 83       	std	Y+5, r24	; 0x05
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <can_auto_baudrate+0x442>
                }
                else
                {
                phs2=phs1;
     6c8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ca:	8e 83       	std	Y+6, r24	; 0x06
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     6cc:	9d 81       	ldd	r25, Y+5	; 0x05
     6ce:	8e 81       	ldd	r24, Y+6	; 0x06
     6d0:	89 0f       	add	r24, r25
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	f9 2f       	mov	r31, r25
     6d6:	f8 1b       	sub	r31, r24
     6d8:	8f 2f       	mov	r24, r31
     6da:	81 50       	subi	r24, 0x01	; 1
     6dc:	8b 83       	std	Y+3, r24	; 0x03

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     6de:	8b 81       	ldd	r24, Y+3	; 0x03
     6e0:	89 30       	cpi	r24, 0x09	; 9
     6e2:	b8 f5       	brcc	.+110    	; 0x752 <can_auto_baudrate+0x4c8>
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	88 23       	and	r24, r24
     6e8:	a1 f1       	breq	.+104    	; 0x752 <can_auto_baudrate+0x4c8>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     6ea:	8e 81       	ldd	r24, Y+6	; 0x06
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	9c 01       	movw	r18, r24
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	88 2f       	mov	r24, r24
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	ac 01       	movw	r20, r24
     702:	4f 5f       	subi	r20, 0xFF	; 255
     704:	5f 4f       	sbci	r21, 0xFF	; 255
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	84 0f       	add	r24, r20
     70e:	95 1f       	adc	r25, r21
     710:	28 17       	cp	r18, r24
     712:	39 07       	cpc	r19, r25
     714:	f4 f0       	brlt	.+60     	; 0x752 <can_auto_baudrate+0x4c8>
     716:	8e 81       	ldd	r24, Y+6	; 0x06
     718:	28 2f       	mov	r18, r24
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	8e 81       	ldd	r24, Y+6	; 0x06
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	28 0f       	add	r18, r24
     724:	39 1f       	adc	r19, r25
     726:	8e 81       	ldd	r24, Y+6	; 0x06
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	28 0f       	add	r18, r24
     72e:	39 1f       	adc	r19, r25
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	ac 01       	movw	r20, r24
     738:	4f 5f       	subi	r20, 0xFF	; 255
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	84 0f       	add	r24, r20
     744:	95 1f       	adc	r25, r21
     746:	82 17       	cp	r24, r18
     748:	93 07       	cpc	r25, r19
     74a:	1c f0       	brlt	.+6      	; 0x752 <can_auto_baudrate+0x4c8>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     74c:	1a 86       	std	Y+10, r1	; 0x0a
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	89 87       	std	Y+9, r24	; 0x09
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     752:	8a 85       	ldd	r24, Y+10	; 0x0a
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	09 f4       	brne	.+2      	; 0x75a <can_auto_baudrate+0x4d0>
     758:	65 cf       	rjmp	.-310    	; 0x624 <can_auto_baudrate+0x39a>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     75a:	88 85       	ldd	r24, Y+8	; 0x08
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	09 f4       	brne	.+2      	; 0x762 <can_auto_baudrate+0x4d8>
     760:	7a ce       	rjmp	.-780    	; 0x456 <can_auto_baudrate+0x1cc>
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     762:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     764:	62 96       	adiw	r28, 0x12	; 18
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	1f 92       	push	r1
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	82 dd       	rcall	.-1276   	; 0x28a <can_auto_baudrate>
     786:	88 23       	and	r24, r24
     788:	11 f4       	brne	.+4      	; 0x78e <can_init+0x18>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <can_init+0x2e>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     78e:	ad dc       	rcall	.-1702   	; 0xea <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     790:	88 ed       	ldi	r24, 0xD8	; 216
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	28 ed       	ldi	r18, 0xD8	; 216
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	20 81       	ld	r18, Z
     79c:	22 60       	ori	r18, 0x02	; 2
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
    return (1);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
}
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	2a 97       	sbiw	r28, 0x0a	; 10
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	9a 87       	std	Y+10, r25	; 0x0a
     7c2:	89 87       	std	Y+9, r24	; 0x09
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     7c4:	89 85       	ldd	r24, Y+9	; 0x09
     7c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c8:	fc 01       	movw	r30, r24
     7ca:	81 81       	ldd	r24, Z+1	; 0x01
     7cc:	8c 30       	cpi	r24, 0x0C	; 12
     7ce:	39 f5       	brne	.+78     	; 0x81e <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     7d0:	89 85       	ldd	r24, Y+9	; 0x09
     7d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d4:	fc 01       	movw	r30, r24
     7d6:	81 85       	ldd	r24, Z+9	; 0x09
     7d8:	80 36       	cpi	r24, 0x60	; 96
     7da:	d9 f4       	brne	.+54     	; 0x812 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     7dc:	8d ee       	ldi	r24, 0xED	; 237
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	29 85       	ldd	r18, Y+9	; 0x09
     7e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	22 95       	swap	r18
     7ea:	20 7f       	andi	r18, 0xF0	; 240
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
      Can_mob_abort();
     7f0:	8f ee       	ldi	r24, 0xEF	; 239
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	2f ee       	ldi	r18, 0xEF	; 239
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	2f 73       	andi	r18, 0x3F	; 63
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     802:	8e ee       	ldi	r24, 0xEE	; 238
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	fc 01       	movw	r30, r24
     808:	10 82       	st	Z, r1
      cmd->handle = 0;
     80a:	89 85       	ldd	r24, Y+9	; 0x09
     80c:	9a 85       	ldd	r25, Y+10	; 0x0a
     80e:	fc 01       	movw	r30, r24
     810:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	9a 85       	ldd	r25, Y+10	; 0x0a
     816:	fc 01       	movw	r30, r24
     818:	11 86       	std	Z+9, r1	; 0x09
     81a:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__stack+0xbc3>
  }
  else
  {
    mob_handle = can_get_mob_free();
     81e:	a0 dc       	rcall	.-1728   	; 0x160 <can_get_mob_free>
     820:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     822:	8c 81       	ldd	r24, Y+4	; 0x04
     824:	8f 3f       	cpi	r24, 0xFF	; 255
     826:	11 f4       	brne	.+4      	; 0x82c <can_cmd+0x80>
     828:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__stack+0xbb5>
    {
      cmd->status = MOB_PENDING; 
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	9a 85       	ldd	r25, Y+10	; 0x0a
     830:	20 e6       	ldi	r18, 0x60	; 96
     832:	fc 01       	movw	r30, r24
     834:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     836:	89 85       	ldd	r24, Y+9	; 0x09
     838:	9a 85       	ldd	r25, Y+10	; 0x0a
     83a:	2c 81       	ldd	r18, Y+4	; 0x04
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     840:	8d ee       	ldi	r24, 0xED	; 237
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2c 81       	ldd	r18, Y+4	; 0x04
     846:	22 95       	swap	r18
     848:	20 7f       	andi	r18, 0xF0	; 240
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
      Can_clear_mob();
     84e:	8e ee       	ldi	r24, 0xEE	; 238
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	9b 83       	std	Y+3, r25	; 0x03
     854:	8a 83       	std	Y+2, r24	; 0x02
     856:	09 c0       	rjmp	.+18     	; 0x86a <can_cmd+0xbe>
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	fc 01       	movw	r30, r24
     85e:	10 82       	st	Z, r1
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	9b 83       	std	Y+3, r25	; 0x03
     868:	8a 83       	std	Y+2, r24	; 0x02
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	9b 81       	ldd	r25, Y+3	; 0x03
     86e:	88 3f       	cpi	r24, 0xF8	; 248
     870:	91 05       	cpc	r25, r1
     872:	90 f3       	brcs	.-28     	; 0x858 <can_cmd+0xac>
          
      switch (cmd->cmd)
     874:	89 85       	ldd	r24, Y+9	; 0x09
     876:	9a 85       	ldd	r25, Y+10	; 0x0a
     878:	fc 01       	movw	r30, r24
     87a:	81 81       	ldd	r24, Z+1	; 0x01
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	aa 27       	eor	r26, r26
     882:	97 fd       	sbrc	r25, 7
     884:	a0 95       	com	r26
     886:	ba 2f       	mov	r27, r26
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	2a e0       	ldi	r18, 0x0A	; 10
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	84 1b       	sub	r24, r20
     892:	95 0b       	sbc	r25, r21
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	10 f4       	brcc	.+4      	; 0x89e <can_cmd+0xf2>
     89a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__stack+0xba9>
     89e:	86 5b       	subi	r24, 0xB6	; 182
     8a0:	9f 4f       	sbci	r25, 0xFF	; 255
     8a2:	fc 01       	movw	r30, r24
     8a4:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8a8:	89 85       	ldd	r24, Y+9	; 0x09
     8aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ac:	fc 01       	movw	r30, r24
     8ae:	83 85       	ldd	r24, Z+11	; 0x0b
     8b0:	88 23       	and	r24, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <can_cmd+0x10a>
     8b4:	69 c0       	rjmp	.+210    	; 0x988 <can_cmd+0x1dc>
     8b6:	83 ef       	ldi	r24, 0xF3	; 243
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	29 85       	ldd	r18, Y+9	; 0x09
     8bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     8be:	2e 5f       	subi	r18, 0xFE	; 254
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	2d 5f       	subi	r18, 0xFD	; 253
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	42 2f       	mov	r20, r18
     8cc:	44 0f       	add	r20, r20
     8ce:	44 0f       	add	r20, r20
     8d0:	44 0f       	add	r20, r20
     8d2:	29 85       	ldd	r18, Y+9	; 0x09
     8d4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d6:	2e 5f       	subi	r18, 0xFE	; 254
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	2e 5f       	subi	r18, 0xFE	; 254
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	22 95       	swap	r18
     8e4:	26 95       	lsr	r18
     8e6:	27 70       	andi	r18, 0x07	; 7
     8e8:	24 0f       	add	r18, r20
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	82 ef       	ldi	r24, 0xF2	; 242
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	29 85       	ldd	r18, Y+9	; 0x09
     8f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f6:	2e 5f       	subi	r18, 0xFE	; 254
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	2e 5f       	subi	r18, 0xFE	; 254
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	42 2f       	mov	r20, r18
     904:	44 0f       	add	r20, r20
     906:	44 0f       	add	r20, r20
     908:	44 0f       	add	r20, r20
     90a:	29 85       	ldd	r18, Y+9	; 0x09
     90c:	3a 85       	ldd	r19, Y+10	; 0x0a
     90e:	2e 5f       	subi	r18, 0xFE	; 254
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	22 95       	swap	r18
     91c:	26 95       	lsr	r18
     91e:	27 70       	andi	r18, 0x07	; 7
     920:	24 0f       	add	r18, r20
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
     926:	81 ef       	ldi	r24, 0xF1	; 241
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	29 85       	ldd	r18, Y+9	; 0x09
     92c:	3a 85       	ldd	r19, Y+10	; 0x0a
     92e:	2e 5f       	subi	r18, 0xFE	; 254
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	42 2f       	mov	r20, r18
     93c:	44 0f       	add	r20, r20
     93e:	44 0f       	add	r20, r20
     940:	44 0f       	add	r20, r20
     942:	29 85       	ldd	r18, Y+9	; 0x09
     944:	3a 85       	ldd	r19, Y+10	; 0x0a
     946:	2e 5f       	subi	r18, 0xFE	; 254
     948:	3f 4f       	sbci	r19, 0xFF	; 255
     94a:	f9 01       	movw	r30, r18
     94c:	20 81       	ld	r18, Z
     94e:	22 95       	swap	r18
     950:	26 95       	lsr	r18
     952:	27 70       	andi	r18, 0x07	; 7
     954:	24 0f       	add	r18, r20
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
     95a:	80 ef       	ldi	r24, 0xF0	; 240
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	29 85       	ldd	r18, Y+9	; 0x09
     960:	3a 85       	ldd	r19, Y+10	; 0x0a
     962:	2e 5f       	subi	r18, 0xFE	; 254
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	22 0f       	add	r18, r18
     96c:	22 0f       	add	r18, r18
     96e:	22 0f       	add	r18, r18
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
     974:	8f ee       	ldi	r24, 0xEF	; 239
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	2f ee       	ldi	r18, 0xEF	; 239
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	f9 01       	movw	r30, r18
     97e:	20 81       	ld	r18, Z
     980:	20 61       	ori	r18, 0x10	; 16
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
     986:	30 c0       	rjmp	.+96     	; 0x9e8 <can_cmd+0x23c>
          else              { Can_set_std_id(cmd->id.std);}
     988:	83 ef       	ldi	r24, 0xF3	; 243
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	29 85       	ldd	r18, Y+9	; 0x09
     98e:	3a 85       	ldd	r19, Y+10	; 0x0a
     990:	2e 5f       	subi	r18, 0xFE	; 254
     992:	3f 4f       	sbci	r19, 0xFF	; 255
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	42 2f       	mov	r20, r18
     99e:	42 95       	swap	r20
     9a0:	44 0f       	add	r20, r20
     9a2:	40 7e       	andi	r20, 0xE0	; 224
     9a4:	29 85       	ldd	r18, Y+9	; 0x09
     9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a8:	2e 5f       	subi	r18, 0xFE	; 254
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	26 95       	lsr	r18
     9b2:	26 95       	lsr	r18
     9b4:	26 95       	lsr	r18
     9b6:	24 0f       	add	r18, r20
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
     9bc:	82 ef       	ldi	r24, 0xF2	; 242
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	2e 5f       	subi	r18, 0xFE	; 254
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	22 95       	swap	r18
     9ce:	22 0f       	add	r18, r18
     9d0:	20 7e       	andi	r18, 0xE0	; 224
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	8f ee       	ldi	r24, 0xEF	; 239
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	2f ee       	ldi	r18, 0xEF	; 239
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	f9 01       	movw	r30, r18
     9e0:	20 81       	ld	r18, Z
     9e2:	2f 7e       	andi	r18, 0xEF	; 239
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9e8:	19 82       	std	Y+1, r1	; 0x01
     9ea:	13 c0       	rjmp	.+38     	; 0xa12 <can_cmd+0x266>
     9ec:	8a ef       	ldi	r24, 0xFA	; 250
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	29 85       	ldd	r18, Y+9	; 0x09
     9f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9f4:	f9 01       	movw	r30, r18
     9f6:	47 81       	ldd	r20, Z+7	; 0x07
     9f8:	50 85       	ldd	r21, Z+8	; 0x08
     9fa:	29 81       	ldd	r18, Y+1	; 0x01
     9fc:	22 2f       	mov	r18, r18
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	24 0f       	add	r18, r20
     a02:	35 1f       	adc	r19, r21
     a04:	f9 01       	movw	r30, r18
     a06:	20 81       	ld	r18, Z
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	8f 5f       	subi	r24, 0xFF	; 255
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	89 85       	ldd	r24, Y+9	; 0x09
     a14:	9a 85       	ldd	r25, Y+10	; 0x0a
     a16:	fc 01       	movw	r30, r24
     a18:	96 81       	ldd	r25, Z+6	; 0x06
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	89 17       	cp	r24, r25
     a1e:	30 f3       	brcs	.-52     	; 0x9ec <can_cmd+0x240>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     a20:	89 85       	ldd	r24, Y+9	; 0x09
     a22:	9a 85       	ldd	r25, Y+10	; 0x0a
     a24:	fc 01       	movw	r30, r24
     a26:	82 85       	ldd	r24, Z+10	; 0x0a
     a28:	88 23       	and	r24, r24
     a2a:	51 f0       	breq	.+20     	; 0xa40 <can_cmd+0x294>
     a2c:	80 ef       	ldi	r24, 0xF0	; 240
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	20 ef       	ldi	r18, 0xF0	; 240
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	24 60       	ori	r18, 0x04	; 4
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <can_cmd+0x2a6>
            else Can_clear_rtr();    
     a40:	80 ef       	ldi	r24, 0xF0	; 240
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	20 ef       	ldi	r18, 0xF0	; 240
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	2b 7f       	andi	r18, 0xFB	; 251
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a52:	8f ee       	ldi	r24, 0xEF	; 239
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	2f ee       	ldi	r18, 0xEF	; 239
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	f9 01       	movw	r30, r18
     a5c:	40 81       	ld	r20, Z
     a5e:	29 85       	ldd	r18, Y+9	; 0x09
     a60:	3a 85       	ldd	r19, Y+10	; 0x0a
     a62:	f9 01       	movw	r30, r18
     a64:	26 81       	ldd	r18, Z+6	; 0x06
     a66:	24 2b       	or	r18, r20
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
          Can_config_tx();
     a6c:	8f ee       	ldi	r24, 0xEF	; 239
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	2f ee       	ldi	r18, 0xEF	; 239
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	2f 73       	andi	r18, 0x3F	; 63
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
     a7e:	8f ee       	ldi	r24, 0xEF	; 239
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	2f ee       	ldi	r18, 0xEF	; 239
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	f9 01       	movw	r30, r18
     a88:	20 81       	ld	r18, Z
     a8a:	20 64       	ori	r18, 0x40	; 64
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
          break;
     a90:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a94:	89 85       	ldd	r24, Y+9	; 0x09
     a96:	9a 85       	ldd	r25, Y+10	; 0x0a
     a98:	fc 01       	movw	r30, r24
     a9a:	83 85       	ldd	r24, Z+11	; 0x0b
     a9c:	88 23       	and	r24, r24
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <can_cmd+0x2f6>
     aa0:	69 c0       	rjmp	.+210    	; 0xb74 <can_cmd+0x3c8>
     aa2:	83 ef       	ldi	r24, 0xF3	; 243
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	29 85       	ldd	r18, Y+9	; 0x09
     aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aaa:	2e 5f       	subi	r18, 0xFE	; 254
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	2d 5f       	subi	r18, 0xFD	; 253
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	42 2f       	mov	r20, r18
     ab8:	44 0f       	add	r20, r20
     aba:	44 0f       	add	r20, r20
     abc:	44 0f       	add	r20, r20
     abe:	29 85       	ldd	r18, Y+9	; 0x09
     ac0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ac2:	2e 5f       	subi	r18, 0xFE	; 254
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	2e 5f       	subi	r18, 0xFE	; 254
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	f9 01       	movw	r30, r18
     acc:	20 81       	ld	r18, Z
     ace:	22 95       	swap	r18
     ad0:	26 95       	lsr	r18
     ad2:	27 70       	andi	r18, 0x07	; 7
     ad4:	24 0f       	add	r18, r20
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
     ada:	82 ef       	ldi	r24, 0xF2	; 242
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	29 85       	ldd	r18, Y+9	; 0x09
     ae0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae2:	2e 5f       	subi	r18, 0xFE	; 254
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	2e 5f       	subi	r18, 0xFE	; 254
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	42 2f       	mov	r20, r18
     af0:	44 0f       	add	r20, r20
     af2:	44 0f       	add	r20, r20
     af4:	44 0f       	add	r20, r20
     af6:	29 85       	ldd	r18, Y+9	; 0x09
     af8:	3a 85       	ldd	r19, Y+10	; 0x0a
     afa:	2e 5f       	subi	r18, 0xFE	; 254
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	f9 01       	movw	r30, r18
     b04:	20 81       	ld	r18, Z
     b06:	22 95       	swap	r18
     b08:	26 95       	lsr	r18
     b0a:	27 70       	andi	r18, 0x07	; 7
     b0c:	24 0f       	add	r18, r20
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
     b12:	81 ef       	ldi	r24, 0xF1	; 241
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	2e 5f       	subi	r18, 0xFE	; 254
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	42 2f       	mov	r20, r18
     b28:	44 0f       	add	r20, r20
     b2a:	44 0f       	add	r20, r20
     b2c:	44 0f       	add	r20, r20
     b2e:	29 85       	ldd	r18, Y+9	; 0x09
     b30:	3a 85       	ldd	r19, Y+10	; 0x0a
     b32:	2e 5f       	subi	r18, 0xFE	; 254
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	22 95       	swap	r18
     b3c:	26 95       	lsr	r18
     b3e:	27 70       	andi	r18, 0x07	; 7
     b40:	24 0f       	add	r18, r20
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
     b46:	80 ef       	ldi	r24, 0xF0	; 240
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	29 85       	ldd	r18, Y+9	; 0x09
     b4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b4e:	2e 5f       	subi	r18, 0xFE	; 254
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
     b52:	f9 01       	movw	r30, r18
     b54:	20 81       	ld	r18, Z
     b56:	22 0f       	add	r18, r18
     b58:	22 0f       	add	r18, r18
     b5a:	22 0f       	add	r18, r18
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
     b60:	8f ee       	ldi	r24, 0xEF	; 239
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2f ee       	ldi	r18, 0xEF	; 239
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	20 61       	ori	r18, 0x10	; 16
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
     b72:	30 c0       	rjmp	.+96     	; 0xbd4 <can_cmd+0x428>
          else              { Can_set_std_id(cmd->id.std);}
     b74:	83 ef       	ldi	r24, 0xF3	; 243
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	29 85       	ldd	r18, Y+9	; 0x09
     b7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b7c:	2e 5f       	subi	r18, 0xFE	; 254
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	2f 5f       	subi	r18, 0xFF	; 255
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	f9 01       	movw	r30, r18
     b86:	20 81       	ld	r18, Z
     b88:	42 2f       	mov	r20, r18
     b8a:	42 95       	swap	r20
     b8c:	44 0f       	add	r20, r20
     b8e:	40 7e       	andi	r20, 0xE0	; 224
     b90:	29 85       	ldd	r18, Y+9	; 0x09
     b92:	3a 85       	ldd	r19, Y+10	; 0x0a
     b94:	2e 5f       	subi	r18, 0xFE	; 254
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	26 95       	lsr	r18
     b9e:	26 95       	lsr	r18
     ba0:	26 95       	lsr	r18
     ba2:	24 0f       	add	r18, r20
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
     ba8:	82 ef       	ldi	r24, 0xF2	; 242
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	29 85       	ldd	r18, Y+9	; 0x09
     bae:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb0:	2e 5f       	subi	r18, 0xFE	; 254
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	f9 01       	movw	r30, r18
     bb6:	20 81       	ld	r18, Z
     bb8:	22 95       	swap	r18
     bba:	22 0f       	add	r18, r18
     bbc:	20 7e       	andi	r18, 0xE0	; 224
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
     bc2:	8f ee       	ldi	r24, 0xEF	; 239
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2f ee       	ldi	r18, 0xEF	; 239
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	20 81       	ld	r18, Z
     bce:	2f 7e       	andi	r18, 0xEF	; 239
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     bd4:	19 82       	std	Y+1, r1	; 0x01
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <can_cmd+0x452>
     bd8:	8a ef       	ldi	r24, 0xFA	; 250
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	29 85       	ldd	r18, Y+9	; 0x09
     bde:	3a 85       	ldd	r19, Y+10	; 0x0a
     be0:	f9 01       	movw	r30, r18
     be2:	47 81       	ldd	r20, Z+7	; 0x07
     be4:	50 85       	ldd	r21, Z+8	; 0x08
     be6:	29 81       	ldd	r18, Y+1	; 0x01
     be8:	22 2f       	mov	r18, r18
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	24 0f       	add	r18, r20
     bee:	35 1f       	adc	r19, r21
     bf0:	f9 01       	movw	r30, r18
     bf2:	20 81       	ld	r18, Z
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 83       	st	Z, r18
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	fc 01       	movw	r30, r24
     c04:	96 81       	ldd	r25, Z+6	; 0x06
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	89 17       	cp	r24, r25
     c0a:	30 f3       	brcs	.-52     	; 0xbd8 <can_cmd+0x42c>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     c0c:	89 85       	ldd	r24, Y+9	; 0x09
     c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c10:	fc 01       	movw	r30, r24
     c12:	12 86       	std	Z+10, r1	; 0x0a
     c14:	80 ef       	ldi	r24, 0xF0	; 240
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	20 ef       	ldi	r18, 0xF0	; 240
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	20 81       	ld	r18, Z
     c20:	2b 7f       	andi	r18, 0xFB	; 251
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c26:	8f ee       	ldi	r24, 0xEF	; 239
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	2f ee       	ldi	r18, 0xEF	; 239
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	40 81       	ld	r20, Z
     c32:	29 85       	ldd	r18, Y+9	; 0x09
     c34:	3a 85       	ldd	r19, Y+10	; 0x0a
     c36:	f9 01       	movw	r30, r18
     c38:	26 81       	ldd	r18, Z+6	; 0x06
     c3a:	24 2b       	or	r18, r20
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
          Can_config_tx();
     c40:	8f ee       	ldi	r24, 0xEF	; 239
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	2f ee       	ldi	r18, 0xEF	; 239
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	f9 01       	movw	r30, r18
     c4a:	20 81       	ld	r18, Z
     c4c:	2f 73       	andi	r18, 0x3F	; 63
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
     c52:	8f ee       	ldi	r24, 0xEF	; 239
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	2f ee       	ldi	r18, 0xEF	; 239
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	f9 01       	movw	r30, r18
     c5c:	20 81       	ld	r18, Z
     c5e:	20 64       	ori	r18, 0x40	; 64
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
          break;
     c64:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c68:	89 85       	ldd	r24, Y+9	; 0x09
     c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6c:	fc 01       	movw	r30, r24
     c6e:	83 85       	ldd	r24, Z+11	; 0x0b
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <can_cmd+0x4ca>
     c74:	69 c0       	rjmp	.+210    	; 0xd48 <can_cmd+0x59c>
     c76:	83 ef       	ldi	r24, 0xF3	; 243
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	29 85       	ldd	r18, Y+9	; 0x09
     c7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     c7e:	2e 5f       	subi	r18, 0xFE	; 254
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
     c82:	2d 5f       	subi	r18, 0xFD	; 253
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	f9 01       	movw	r30, r18
     c88:	20 81       	ld	r18, Z
     c8a:	42 2f       	mov	r20, r18
     c8c:	44 0f       	add	r20, r20
     c8e:	44 0f       	add	r20, r20
     c90:	44 0f       	add	r20, r20
     c92:	29 85       	ldd	r18, Y+9	; 0x09
     c94:	3a 85       	ldd	r19, Y+10	; 0x0a
     c96:	2e 5f       	subi	r18, 0xFE	; 254
     c98:	3f 4f       	sbci	r19, 0xFF	; 255
     c9a:	2e 5f       	subi	r18, 0xFE	; 254
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	22 95       	swap	r18
     ca4:	26 95       	lsr	r18
     ca6:	27 70       	andi	r18, 0x07	; 7
     ca8:	24 0f       	add	r18, r20
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
     cae:	82 ef       	ldi	r24, 0xF2	; 242
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	29 85       	ldd	r18, Y+9	; 0x09
     cb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     cb6:	2e 5f       	subi	r18, 0xFE	; 254
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	2e 5f       	subi	r18, 0xFE	; 254
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	42 2f       	mov	r20, r18
     cc4:	44 0f       	add	r20, r20
     cc6:	44 0f       	add	r20, r20
     cc8:	44 0f       	add	r20, r20
     cca:	29 85       	ldd	r18, Y+9	; 0x09
     ccc:	3a 85       	ldd	r19, Y+10	; 0x0a
     cce:	2e 5f       	subi	r18, 0xFE	; 254
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	2f 5f       	subi	r18, 0xFF	; 255
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	22 95       	swap	r18
     cdc:	26 95       	lsr	r18
     cde:	27 70       	andi	r18, 0x07	; 7
     ce0:	24 0f       	add	r18, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
     ce6:	81 ef       	ldi	r24, 0xF1	; 241
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	29 85       	ldd	r18, Y+9	; 0x09
     cec:	3a 85       	ldd	r19, Y+10	; 0x0a
     cee:	2e 5f       	subi	r18, 0xFE	; 254
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	42 2f       	mov	r20, r18
     cfc:	44 0f       	add	r20, r20
     cfe:	44 0f       	add	r20, r20
     d00:	44 0f       	add	r20, r20
     d02:	29 85       	ldd	r18, Y+9	; 0x09
     d04:	3a 85       	ldd	r19, Y+10	; 0x0a
     d06:	2e 5f       	subi	r18, 0xFE	; 254
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	22 95       	swap	r18
     d10:	26 95       	lsr	r18
     d12:	27 70       	andi	r18, 0x07	; 7
     d14:	24 0f       	add	r18, r20
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
     d1a:	80 ef       	ldi	r24, 0xF0	; 240
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	29 85       	ldd	r18, Y+9	; 0x09
     d20:	3a 85       	ldd	r19, Y+10	; 0x0a
     d22:	2e 5f       	subi	r18, 0xFE	; 254
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	f9 01       	movw	r30, r18
     d28:	20 81       	ld	r18, Z
     d2a:	22 0f       	add	r18, r18
     d2c:	22 0f       	add	r18, r18
     d2e:	22 0f       	add	r18, r18
     d30:	fc 01       	movw	r30, r24
     d32:	20 83       	st	Z, r18
     d34:	8f ee       	ldi	r24, 0xEF	; 239
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	2f ee       	ldi	r18, 0xEF	; 239
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	f9 01       	movw	r30, r18
     d3e:	20 81       	ld	r18, Z
     d40:	20 61       	ori	r18, 0x10	; 16
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
     d46:	30 c0       	rjmp	.+96     	; 0xda8 <can_cmd+0x5fc>
          else              { Can_set_std_id(cmd->id.std);}
     d48:	83 ef       	ldi	r24, 0xF3	; 243
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	29 85       	ldd	r18, Y+9	; 0x09
     d4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d50:	2e 5f       	subi	r18, 0xFE	; 254
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	2f 5f       	subi	r18, 0xFF	; 255
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	f9 01       	movw	r30, r18
     d5a:	20 81       	ld	r18, Z
     d5c:	42 2f       	mov	r20, r18
     d5e:	42 95       	swap	r20
     d60:	44 0f       	add	r20, r20
     d62:	40 7e       	andi	r20, 0xE0	; 224
     d64:	29 85       	ldd	r18, Y+9	; 0x09
     d66:	3a 85       	ldd	r19, Y+10	; 0x0a
     d68:	2e 5f       	subi	r18, 0xFE	; 254
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	f9 01       	movw	r30, r18
     d6e:	20 81       	ld	r18, Z
     d70:	26 95       	lsr	r18
     d72:	26 95       	lsr	r18
     d74:	26 95       	lsr	r18
     d76:	24 0f       	add	r18, r20
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	82 ef       	ldi	r24, 0xF2	; 242
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	29 85       	ldd	r18, Y+9	; 0x09
     d82:	3a 85       	ldd	r19, Y+10	; 0x0a
     d84:	2e 5f       	subi	r18, 0xFE	; 254
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	f9 01       	movw	r30, r18
     d8a:	20 81       	ld	r18, Z
     d8c:	22 95       	swap	r18
     d8e:	22 0f       	add	r18, r18
     d90:	20 7e       	andi	r18, 0xE0	; 224
     d92:	fc 01       	movw	r30, r24
     d94:	20 83       	st	Z, r18
     d96:	8f ee       	ldi	r24, 0xEF	; 239
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	2f ee       	ldi	r18, 0xEF	; 239
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	f9 01       	movw	r30, r18
     da0:	20 81       	ld	r18, Z
     da2:	2f 7e       	andi	r18, 0xEF	; 239
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	fc 01       	movw	r30, r24
     db0:	22 87       	std	Z+10, r18	; 0x0a
     db2:	80 ef       	ldi	r24, 0xF0	; 240
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	20 ef       	ldi	r18, 0xF0	; 240
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	24 60       	ori	r18, 0x04	; 4
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     dc4:	8f ee       	ldi	r24, 0xEF	; 239
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	2f ee       	ldi	r18, 0xEF	; 239
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	40 81       	ld	r20, Z
     dd0:	29 85       	ldd	r18, Y+9	; 0x09
     dd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd4:	f9 01       	movw	r30, r18
     dd6:	26 81       	ldd	r18, Z+6	; 0x06
     dd8:	24 2b       	or	r18, r20
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
          Can_config_tx();
     dde:	8f ee       	ldi	r24, 0xEF	; 239
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	2f ee       	ldi	r18, 0xEF	; 239
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	20 81       	ld	r18, Z
     dea:	2f 73       	andi	r18, 0x3F	; 63
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18
     df0:	8f ee       	ldi	r24, 0xEF	; 239
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	2f ee       	ldi	r18, 0xEF	; 239
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	f9 01       	movw	r30, r18
     dfa:	20 81       	ld	r18, Z
     dfc:	20 64       	ori	r18, 0x40	; 64
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
          break;
     e02:	57 c7       	rjmp	.+3758   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     e04:	1d 82       	std	Y+5, r1	; 0x05
     e06:	1e 82       	std	Y+6, r1	; 0x06
     e08:	1f 82       	std	Y+7, r1	; 0x07
     e0a:	18 86       	std	Y+8, r1	; 0x08
     e0c:	27 ef       	ldi	r18, 0xF7	; 247
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	ce 01       	movw	r24, r28
     e12:	05 96       	adiw	r24, 0x05	; 5
     e14:	03 96       	adiw	r24, 0x03	; 3
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	44 0f       	add	r20, r20
     e1e:	44 0f       	add	r20, r20
     e20:	44 0f       	add	r20, r20
     e22:	ce 01       	movw	r24, r28
     e24:	05 96       	adiw	r24, 0x05	; 5
     e26:	02 96       	adiw	r24, 0x02	; 2
     e28:	fc 01       	movw	r30, r24
     e2a:	80 81       	ld	r24, Z
     e2c:	82 95       	swap	r24
     e2e:	86 95       	lsr	r24
     e30:	87 70       	andi	r24, 0x07	; 7
     e32:	84 0f       	add	r24, r20
     e34:	f9 01       	movw	r30, r18
     e36:	80 83       	st	Z, r24
     e38:	26 ef       	ldi	r18, 0xF6	; 246
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	ce 01       	movw	r24, r28
     e3e:	05 96       	adiw	r24, 0x05	; 5
     e40:	02 96       	adiw	r24, 0x02	; 2
     e42:	fc 01       	movw	r30, r24
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	44 0f       	add	r20, r20
     e4a:	44 0f       	add	r20, r20
     e4c:	44 0f       	add	r20, r20
     e4e:	ce 01       	movw	r24, r28
     e50:	05 96       	adiw	r24, 0x05	; 5
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	82 95       	swap	r24
     e5a:	86 95       	lsr	r24
     e5c:	87 70       	andi	r24, 0x07	; 7
     e5e:	84 0f       	add	r24, r20
     e60:	f9 01       	movw	r30, r18
     e62:	80 83       	st	Z, r24
     e64:	25 ef       	ldi	r18, 0xF5	; 245
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	ce 01       	movw	r24, r28
     e6a:	05 96       	adiw	r24, 0x05	; 5
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	fc 01       	movw	r30, r24
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	44 0f       	add	r20, r20
     e76:	44 0f       	add	r20, r20
     e78:	44 0f       	add	r20, r20
     e7a:	ce 01       	movw	r24, r28
     e7c:	05 96       	adiw	r24, 0x05	; 5
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	82 95       	swap	r24
     e84:	86 95       	lsr	r24
     e86:	87 70       	andi	r24, 0x07	; 7
     e88:	84 0f       	add	r24, r20
     e8a:	f9 01       	movw	r30, r18
     e8c:	80 83       	st	Z, r24
     e8e:	84 ef       	ldi	r24, 0xF4	; 244
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9e 01       	movw	r18, r28
     e94:	2b 5f       	subi	r18, 0xFB	; 251
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	f9 01       	movw	r30, r18
     e9a:	20 81       	ld	r18, Z
     e9c:	22 0f       	add	r18, r18
     e9e:	22 0f       	add	r18, r18
     ea0:	22 0f       	add	r18, r18
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ea6:	8f ee       	ldi	r24, 0xEF	; 239
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	2f ee       	ldi	r18, 0xEF	; 239
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	f9 01       	movw	r30, r18
     eb0:	40 81       	ld	r20, Z
     eb2:	29 85       	ldd	r18, Y+9	; 0x09
     eb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     eb6:	f9 01       	movw	r30, r18
     eb8:	26 81       	ldd	r18, Z+6	; 0x06
     eba:	24 2b       	or	r18, r20
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     ec0:	84 ef       	ldi	r24, 0xF4	; 244
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	24 ef       	ldi	r18, 0xF4	; 244
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	2b 7f       	andi	r18, 0xFB	; 251
     ece:	fc 01       	movw	r30, r24
     ed0:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ed2:	84 ef       	ldi	r24, 0xF4	; 244
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	24 ef       	ldi	r18, 0xF4	; 244
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	f9 01       	movw	r30, r18
     edc:	20 81       	ld	r18, Z
     ede:	2e 7f       	andi	r18, 0xFE	; 254
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
          Can_config_rx();       
     ee4:	8f ee       	ldi	r24, 0xEF	; 239
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	2f ee       	ldi	r18, 0xEF	; 239
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	2f 73       	andi	r18, 0x3F	; 63
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
     ef6:	8f ee       	ldi	r24, 0xEF	; 239
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2f ee       	ldi	r18, 0xEF	; 239
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	f9 01       	movw	r30, r18
     f00:	20 81       	ld	r18, Z
     f02:	20 68       	ori	r18, 0x80	; 128
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
          break;
     f08:	d4 c6       	rjmp	.+3496   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     f0a:	1d 82       	std	Y+5, r1	; 0x05
     f0c:	1e 82       	std	Y+6, r1	; 0x06
     f0e:	1f 82       	std	Y+7, r1	; 0x07
     f10:	18 86       	std	Y+8, r1	; 0x08
     f12:	27 ef       	ldi	r18, 0xF7	; 247
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	ce 01       	movw	r24, r28
     f18:	05 96       	adiw	r24, 0x05	; 5
     f1a:	03 96       	adiw	r24, 0x03	; 3
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	44 0f       	add	r20, r20
     f24:	44 0f       	add	r20, r20
     f26:	44 0f       	add	r20, r20
     f28:	ce 01       	movw	r24, r28
     f2a:	05 96       	adiw	r24, 0x05	; 5
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	fc 01       	movw	r30, r24
     f30:	80 81       	ld	r24, Z
     f32:	82 95       	swap	r24
     f34:	86 95       	lsr	r24
     f36:	87 70       	andi	r24, 0x07	; 7
     f38:	84 0f       	add	r24, r20
     f3a:	f9 01       	movw	r30, r18
     f3c:	80 83       	st	Z, r24
     f3e:	26 ef       	ldi	r18, 0xF6	; 246
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	ce 01       	movw	r24, r28
     f44:	05 96       	adiw	r24, 0x05	; 5
     f46:	02 96       	adiw	r24, 0x02	; 2
     f48:	fc 01       	movw	r30, r24
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	44 0f       	add	r20, r20
     f50:	44 0f       	add	r20, r20
     f52:	44 0f       	add	r20, r20
     f54:	ce 01       	movw	r24, r28
     f56:	05 96       	adiw	r24, 0x05	; 5
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	82 95       	swap	r24
     f60:	86 95       	lsr	r24
     f62:	87 70       	andi	r24, 0x07	; 7
     f64:	84 0f       	add	r24, r20
     f66:	f9 01       	movw	r30, r18
     f68:	80 83       	st	Z, r24
     f6a:	25 ef       	ldi	r18, 0xF5	; 245
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	ce 01       	movw	r24, r28
     f70:	05 96       	adiw	r24, 0x05	; 5
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	fc 01       	movw	r30, r24
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	44 0f       	add	r20, r20
     f7c:	44 0f       	add	r20, r20
     f7e:	44 0f       	add	r20, r20
     f80:	ce 01       	movw	r24, r28
     f82:	05 96       	adiw	r24, 0x05	; 5
     f84:	fc 01       	movw	r30, r24
     f86:	80 81       	ld	r24, Z
     f88:	82 95       	swap	r24
     f8a:	86 95       	lsr	r24
     f8c:	87 70       	andi	r24, 0x07	; 7
     f8e:	84 0f       	add	r24, r20
     f90:	f9 01       	movw	r30, r18
     f92:	80 83       	st	Z, r24
     f94:	84 ef       	ldi	r24, 0xF4	; 244
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9e 01       	movw	r18, r28
     f9a:	2b 5f       	subi	r18, 0xFB	; 251
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	f9 01       	movw	r30, r18
     fa0:	20 81       	ld	r18, Z
     fa2:	22 0f       	add	r18, r18
     fa4:	22 0f       	add	r18, r18
     fa6:	22 0f       	add	r18, r18
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fac:	8f ee       	ldi	r24, 0xEF	; 239
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2f ee       	ldi	r18, 0xEF	; 239
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	f9 01       	movw	r30, r18
     fb6:	40 81       	ld	r20, Z
     fb8:	29 85       	ldd	r18, Y+9	; 0x09
     fba:	3a 85       	ldd	r19, Y+10	; 0x0a
     fbc:	f9 01       	movw	r30, r18
     fbe:	26 81       	ldd	r18, Z+6	; 0x06
     fc0:	24 2b       	or	r18, r20
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	fc 01       	movw	r30, r24
     fcc:	12 86       	std	Z+10, r1	; 0x0a
     fce:	84 ef       	ldi	r24, 0xF4	; 244
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	24 ef       	ldi	r18, 0xF4	; 244
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	24 60       	ori	r18, 0x04	; 4
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
     fe0:	80 ef       	ldi	r24, 0xF0	; 240
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	20 ef       	ldi	r18, 0xF0	; 240
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	2b 7f       	andi	r18, 0xFB	; 251
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ff2:	84 ef       	ldi	r24, 0xF4	; 244
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	24 ef       	ldi	r18, 0xF4	; 244
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	f9 01       	movw	r30, r18
     ffc:	20 81       	ld	r18, Z
     ffe:	2e 7f       	andi	r18, 0xFE	; 254
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
          Can_config_rx();       
    1004:	8f ee       	ldi	r24, 0xEF	; 239
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	2f ee       	ldi	r18, 0xEF	; 239
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	20 81       	ld	r18, Z
    1010:	2f 73       	andi	r18, 0x3F	; 63
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
    1016:	8f ee       	ldi	r24, 0xEF	; 239
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	2f ee       	ldi	r18, 0xEF	; 239
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	20 68       	ori	r18, 0x80	; 128
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
          break;
    1028:	44 c6       	rjmp	.+3208   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    102a:	1d 82       	std	Y+5, r1	; 0x05
    102c:	1e 82       	std	Y+6, r1	; 0x06
    102e:	1f 82       	std	Y+7, r1	; 0x07
    1030:	18 86       	std	Y+8, r1	; 0x08
    1032:	27 ef       	ldi	r18, 0xF7	; 247
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	ce 01       	movw	r24, r28
    1038:	05 96       	adiw	r24, 0x05	; 5
    103a:	03 96       	adiw	r24, 0x03	; 3
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	44 0f       	add	r20, r20
    1044:	44 0f       	add	r20, r20
    1046:	44 0f       	add	r20, r20
    1048:	ce 01       	movw	r24, r28
    104a:	05 96       	adiw	r24, 0x05	; 5
    104c:	02 96       	adiw	r24, 0x02	; 2
    104e:	fc 01       	movw	r30, r24
    1050:	80 81       	ld	r24, Z
    1052:	82 95       	swap	r24
    1054:	86 95       	lsr	r24
    1056:	87 70       	andi	r24, 0x07	; 7
    1058:	84 0f       	add	r24, r20
    105a:	f9 01       	movw	r30, r18
    105c:	80 83       	st	Z, r24
    105e:	26 ef       	ldi	r18, 0xF6	; 246
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	ce 01       	movw	r24, r28
    1064:	05 96       	adiw	r24, 0x05	; 5
    1066:	02 96       	adiw	r24, 0x02	; 2
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	44 0f       	add	r20, r20
    1070:	44 0f       	add	r20, r20
    1072:	44 0f       	add	r20, r20
    1074:	ce 01       	movw	r24, r28
    1076:	05 96       	adiw	r24, 0x05	; 5
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	82 95       	swap	r24
    1080:	86 95       	lsr	r24
    1082:	87 70       	andi	r24, 0x07	; 7
    1084:	84 0f       	add	r24, r20
    1086:	f9 01       	movw	r30, r18
    1088:	80 83       	st	Z, r24
    108a:	25 ef       	ldi	r18, 0xF5	; 245
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	ce 01       	movw	r24, r28
    1090:	05 96       	adiw	r24, 0x05	; 5
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	fc 01       	movw	r30, r24
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	44 0f       	add	r20, r20
    109c:	44 0f       	add	r20, r20
    109e:	44 0f       	add	r20, r20
    10a0:	ce 01       	movw	r24, r28
    10a2:	05 96       	adiw	r24, 0x05	; 5
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	82 95       	swap	r24
    10aa:	86 95       	lsr	r24
    10ac:	87 70       	andi	r24, 0x07	; 7
    10ae:	84 0f       	add	r24, r20
    10b0:	f9 01       	movw	r30, r18
    10b2:	80 83       	st	Z, r24
    10b4:	84 ef       	ldi	r24, 0xF4	; 244
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9e 01       	movw	r18, r28
    10ba:	2b 5f       	subi	r18, 0xFB	; 251
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	f9 01       	movw	r30, r18
    10c0:	20 81       	ld	r18, Z
    10c2:	22 0f       	add	r18, r18
    10c4:	22 0f       	add	r18, r18
    10c6:	22 0f       	add	r18, r18
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10cc:	8f ee       	ldi	r24, 0xEF	; 239
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	2f ee       	ldi	r18, 0xEF	; 239
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	40 81       	ld	r20, Z
    10d8:	29 85       	ldd	r18, Y+9	; 0x09
    10da:	3a 85       	ldd	r19, Y+10	; 0x0a
    10dc:	f9 01       	movw	r30, r18
    10de:	26 81       	ldd	r18, Z+6	; 0x06
    10e0:	24 2b       	or	r18, r20
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	fc 01       	movw	r30, r24
    10ee:	22 87       	std	Z+10, r18	; 0x0a
    10f0:	84 ef       	ldi	r24, 0xF4	; 244
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	24 ef       	ldi	r18, 0xF4	; 244
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	20 81       	ld	r18, Z
    10fc:	24 60       	ori	r18, 0x04	; 4
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
    1102:	80 ef       	ldi	r24, 0xF0	; 240
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	20 ef       	ldi	r18, 0xF0	; 240
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	24 60       	ori	r18, 0x04	; 4
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
          Can_clear_rplv();
    1114:	8f ee       	ldi	r24, 0xEF	; 239
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	2f ee       	ldi	r18, 0xEF	; 239
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	2f 7d       	andi	r18, 0xDF	; 223
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1126:	84 ef       	ldi	r24, 0xF4	; 244
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	24 ef       	ldi	r18, 0xF4	; 244
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	2e 7f       	andi	r18, 0xFE	; 254
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
          Can_config_rx();       
    1138:	8f ee       	ldi	r24, 0xEF	; 239
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	2f ee       	ldi	r18, 0xEF	; 239
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	2f 73       	andi	r18, 0x3F	; 63
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
    114a:	8f ee       	ldi	r24, 0xEF	; 239
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	2f ee       	ldi	r18, 0xEF	; 239
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	20 68       	ori	r18, 0x80	; 128
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
          break;
    115c:	aa c5       	rjmp	.+2900   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	fc 01       	movw	r30, r24
    1164:	83 85       	ldd	r24, Z+11	; 0x0b
    1166:	88 23       	and	r24, r24
    1168:	09 f4       	brne	.+2      	; 0x116c <__stack+0x6d>
    116a:	69 c0       	rjmp	.+210    	; 0x123e <__stack+0x13f>
    116c:	83 ef       	ldi	r24, 0xF3	; 243
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	29 85       	ldd	r18, Y+9	; 0x09
    1172:	3a 85       	ldd	r19, Y+10	; 0x0a
    1174:	2e 5f       	subi	r18, 0xFE	; 254
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	2d 5f       	subi	r18, 0xFD	; 253
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	f9 01       	movw	r30, r18
    117e:	20 81       	ld	r18, Z
    1180:	42 2f       	mov	r20, r18
    1182:	44 0f       	add	r20, r20
    1184:	44 0f       	add	r20, r20
    1186:	44 0f       	add	r20, r20
    1188:	29 85       	ldd	r18, Y+9	; 0x09
    118a:	3a 85       	ldd	r19, Y+10	; 0x0a
    118c:	2e 5f       	subi	r18, 0xFE	; 254
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	2e 5f       	subi	r18, 0xFE	; 254
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	f9 01       	movw	r30, r18
    1196:	20 81       	ld	r18, Z
    1198:	22 95       	swap	r18
    119a:	26 95       	lsr	r18
    119c:	27 70       	andi	r18, 0x07	; 7
    119e:	24 0f       	add	r18, r20
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
    11a4:	82 ef       	ldi	r24, 0xF2	; 242
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	29 85       	ldd	r18, Y+9	; 0x09
    11aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ac:	2e 5f       	subi	r18, 0xFE	; 254
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	2e 5f       	subi	r18, 0xFE	; 254
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	f9 01       	movw	r30, r18
    11b6:	20 81       	ld	r18, Z
    11b8:	42 2f       	mov	r20, r18
    11ba:	44 0f       	add	r20, r20
    11bc:	44 0f       	add	r20, r20
    11be:	44 0f       	add	r20, r20
    11c0:	29 85       	ldd	r18, Y+9	; 0x09
    11c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c4:	2e 5f       	subi	r18, 0xFE	; 254
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	f9 01       	movw	r30, r18
    11ce:	20 81       	ld	r18, Z
    11d0:	22 95       	swap	r18
    11d2:	26 95       	lsr	r18
    11d4:	27 70       	andi	r18, 0x07	; 7
    11d6:	24 0f       	add	r18, r20
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	81 ef       	ldi	r24, 0xF1	; 241
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	29 85       	ldd	r18, Y+9	; 0x09
    11e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e4:	2e 5f       	subi	r18, 0xFE	; 254
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	42 2f       	mov	r20, r18
    11f2:	44 0f       	add	r20, r20
    11f4:	44 0f       	add	r20, r20
    11f6:	44 0f       	add	r20, r20
    11f8:	29 85       	ldd	r18, Y+9	; 0x09
    11fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    11fc:	2e 5f       	subi	r18, 0xFE	; 254
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	22 95       	swap	r18
    1206:	26 95       	lsr	r18
    1208:	27 70       	andi	r18, 0x07	; 7
    120a:	24 0f       	add	r18, r20
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
    1210:	80 ef       	ldi	r24, 0xF0	; 240
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	29 85       	ldd	r18, Y+9	; 0x09
    1216:	3a 85       	ldd	r19, Y+10	; 0x0a
    1218:	2e 5f       	subi	r18, 0xFE	; 254
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	f9 01       	movw	r30, r18
    121e:	20 81       	ld	r18, Z
    1220:	22 0f       	add	r18, r18
    1222:	22 0f       	add	r18, r18
    1224:	22 0f       	add	r18, r18
    1226:	fc 01       	movw	r30, r24
    1228:	20 83       	st	Z, r18
    122a:	8f ee       	ldi	r24, 0xEF	; 239
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	2f ee       	ldi	r18, 0xEF	; 239
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	20 61       	ori	r18, 0x10	; 16
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	30 c0       	rjmp	.+96     	; 0x129e <__stack+0x19f>
          else              { Can_set_std_id(cmd->id.std);}
    123e:	83 ef       	ldi	r24, 0xF3	; 243
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	29 85       	ldd	r18, Y+9	; 0x09
    1244:	3a 85       	ldd	r19, Y+10	; 0x0a
    1246:	2e 5f       	subi	r18, 0xFE	; 254
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	2f 5f       	subi	r18, 0xFF	; 255
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	f9 01       	movw	r30, r18
    1250:	20 81       	ld	r18, Z
    1252:	42 2f       	mov	r20, r18
    1254:	42 95       	swap	r20
    1256:	44 0f       	add	r20, r20
    1258:	40 7e       	andi	r20, 0xE0	; 224
    125a:	29 85       	ldd	r18, Y+9	; 0x09
    125c:	3a 85       	ldd	r19, Y+10	; 0x0a
    125e:	2e 5f       	subi	r18, 0xFE	; 254
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	26 95       	lsr	r18
    1268:	26 95       	lsr	r18
    126a:	26 95       	lsr	r18
    126c:	24 0f       	add	r18, r20
    126e:	fc 01       	movw	r30, r24
    1270:	20 83       	st	Z, r18
    1272:	82 ef       	ldi	r24, 0xF2	; 242
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	29 85       	ldd	r18, Y+9	; 0x09
    1278:	3a 85       	ldd	r19, Y+10	; 0x0a
    127a:	2e 5f       	subi	r18, 0xFE	; 254
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	f9 01       	movw	r30, r18
    1280:	20 81       	ld	r18, Z
    1282:	22 95       	swap	r18
    1284:	22 0f       	add	r18, r18
    1286:	20 7e       	andi	r18, 0xE0	; 224
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
    128c:	8f ee       	ldi	r24, 0xEF	; 239
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	2f ee       	ldi	r18, 0xEF	; 239
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	2f 7e       	andi	r18, 0xEF	; 239
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	dc 01       	movw	r26, r24
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	af 83       	std	Y+7, r26	; 0x07
    12aa:	b8 87       	std	Y+8, r27	; 0x08
    12ac:	27 ef       	ldi	r18, 0xF7	; 247
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	ce 01       	movw	r24, r28
    12b2:	05 96       	adiw	r24, 0x05	; 5
    12b4:	03 96       	adiw	r24, 0x03	; 3
    12b6:	fc 01       	movw	r30, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	44 0f       	add	r20, r20
    12be:	44 0f       	add	r20, r20
    12c0:	44 0f       	add	r20, r20
    12c2:	ce 01       	movw	r24, r28
    12c4:	05 96       	adiw	r24, 0x05	; 5
    12c6:	02 96       	adiw	r24, 0x02	; 2
    12c8:	fc 01       	movw	r30, r24
    12ca:	80 81       	ld	r24, Z
    12cc:	82 95       	swap	r24
    12ce:	86 95       	lsr	r24
    12d0:	87 70       	andi	r24, 0x07	; 7
    12d2:	84 0f       	add	r24, r20
    12d4:	f9 01       	movw	r30, r18
    12d6:	80 83       	st	Z, r24
    12d8:	26 ef       	ldi	r18, 0xF6	; 246
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	ce 01       	movw	r24, r28
    12de:	05 96       	adiw	r24, 0x05	; 5
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	fc 01       	movw	r30, r24
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	44 0f       	add	r20, r20
    12ea:	44 0f       	add	r20, r20
    12ec:	44 0f       	add	r20, r20
    12ee:	ce 01       	movw	r24, r28
    12f0:	05 96       	adiw	r24, 0x05	; 5
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	fc 01       	movw	r30, r24
    12f6:	80 81       	ld	r24, Z
    12f8:	82 95       	swap	r24
    12fa:	86 95       	lsr	r24
    12fc:	87 70       	andi	r24, 0x07	; 7
    12fe:	84 0f       	add	r24, r20
    1300:	f9 01       	movw	r30, r18
    1302:	80 83       	st	Z, r24
    1304:	25 ef       	ldi	r18, 0xF5	; 245
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	ce 01       	movw	r24, r28
    130a:	05 96       	adiw	r24, 0x05	; 5
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	fc 01       	movw	r30, r24
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	44 0f       	add	r20, r20
    1316:	44 0f       	add	r20, r20
    1318:	44 0f       	add	r20, r20
    131a:	ce 01       	movw	r24, r28
    131c:	05 96       	adiw	r24, 0x05	; 5
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	82 95       	swap	r24
    1324:	86 95       	lsr	r24
    1326:	87 70       	andi	r24, 0x07	; 7
    1328:	84 0f       	add	r24, r20
    132a:	f9 01       	movw	r30, r18
    132c:	80 83       	st	Z, r24
    132e:	84 ef       	ldi	r24, 0xF4	; 244
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9e 01       	movw	r18, r28
    1334:	2b 5f       	subi	r18, 0xFB	; 251
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	22 0f       	add	r18, r18
    133e:	22 0f       	add	r18, r18
    1340:	22 0f       	add	r18, r18
    1342:	fc 01       	movw	r30, r24
    1344:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1346:	8f ee       	ldi	r24, 0xEF	; 239
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	2f ee       	ldi	r18, 0xEF	; 239
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	f9 01       	movw	r30, r18
    1350:	40 81       	ld	r20, Z
    1352:	29 85       	ldd	r18, Y+9	; 0x09
    1354:	3a 85       	ldd	r19, Y+10	; 0x0a
    1356:	f9 01       	movw	r30, r18
    1358:	26 81       	ldd	r18, Z+6	; 0x06
    135a:	24 2b       	or	r18, r20
    135c:	fc 01       	movw	r30, r24
    135e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    1360:	84 ef       	ldi	r24, 0xF4	; 244
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	24 ef       	ldi	r18, 0xF4	; 244
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	f9 01       	movw	r30, r18
    136a:	20 81       	ld	r18, Z
    136c:	2b 7f       	andi	r18, 0xFB	; 251
    136e:	fc 01       	movw	r30, r24
    1370:	20 83       	st	Z, r18
          Can_set_idemsk();
    1372:	84 ef       	ldi	r24, 0xF4	; 244
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	24 ef       	ldi	r18, 0xF4	; 244
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	f9 01       	movw	r30, r18
    137c:	20 81       	ld	r18, Z
    137e:	21 60       	ori	r18, 0x01	; 1
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
          Can_config_rx();       
    1384:	8f ee       	ldi	r24, 0xEF	; 239
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	2f ee       	ldi	r18, 0xEF	; 239
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	20 81       	ld	r18, Z
    1390:	2f 73       	andi	r18, 0x3F	; 63
    1392:	fc 01       	movw	r30, r24
    1394:	20 83       	st	Z, r18
    1396:	8f ee       	ldi	r24, 0xEF	; 239
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	2f ee       	ldi	r18, 0xEF	; 239
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	f9 01       	movw	r30, r18
    13a0:	20 81       	ld	r18, Z
    13a2:	20 68       	ori	r18, 0x80	; 128
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
          break;
    13a8:	84 c4       	rjmp	.+2312   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	fc 01       	movw	r30, r24
    13b0:	83 85       	ldd	r24, Z+11	; 0x0b
    13b2:	88 23       	and	r24, r24
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <__stack+0x2b9>
    13b6:	69 c0       	rjmp	.+210    	; 0x148a <__stack+0x38b>
    13b8:	83 ef       	ldi	r24, 0xF3	; 243
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	29 85       	ldd	r18, Y+9	; 0x09
    13be:	3a 85       	ldd	r19, Y+10	; 0x0a
    13c0:	2e 5f       	subi	r18, 0xFE	; 254
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	2d 5f       	subi	r18, 0xFD	; 253
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	f9 01       	movw	r30, r18
    13ca:	20 81       	ld	r18, Z
    13cc:	42 2f       	mov	r20, r18
    13ce:	44 0f       	add	r20, r20
    13d0:	44 0f       	add	r20, r20
    13d2:	44 0f       	add	r20, r20
    13d4:	29 85       	ldd	r18, Y+9	; 0x09
    13d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d8:	2e 5f       	subi	r18, 0xFE	; 254
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	2e 5f       	subi	r18, 0xFE	; 254
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	22 95       	swap	r18
    13e6:	26 95       	lsr	r18
    13e8:	27 70       	andi	r18, 0x07	; 7
    13ea:	24 0f       	add	r18, r20
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
    13f0:	82 ef       	ldi	r24, 0xF2	; 242
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	29 85       	ldd	r18, Y+9	; 0x09
    13f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f8:	2e 5f       	subi	r18, 0xFE	; 254
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	2e 5f       	subi	r18, 0xFE	; 254
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	f9 01       	movw	r30, r18
    1402:	20 81       	ld	r18, Z
    1404:	42 2f       	mov	r20, r18
    1406:	44 0f       	add	r20, r20
    1408:	44 0f       	add	r20, r20
    140a:	44 0f       	add	r20, r20
    140c:	29 85       	ldd	r18, Y+9	; 0x09
    140e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1410:	2e 5f       	subi	r18, 0xFE	; 254
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	22 95       	swap	r18
    141e:	26 95       	lsr	r18
    1420:	27 70       	andi	r18, 0x07	; 7
    1422:	24 0f       	add	r18, r20
    1424:	fc 01       	movw	r30, r24
    1426:	20 83       	st	Z, r18
    1428:	81 ef       	ldi	r24, 0xF1	; 241
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	29 85       	ldd	r18, Y+9	; 0x09
    142e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1430:	2e 5f       	subi	r18, 0xFE	; 254
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	2f 5f       	subi	r18, 0xFF	; 255
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	f9 01       	movw	r30, r18
    143a:	20 81       	ld	r18, Z
    143c:	42 2f       	mov	r20, r18
    143e:	44 0f       	add	r20, r20
    1440:	44 0f       	add	r20, r20
    1442:	44 0f       	add	r20, r20
    1444:	29 85       	ldd	r18, Y+9	; 0x09
    1446:	3a 85       	ldd	r19, Y+10	; 0x0a
    1448:	2e 5f       	subi	r18, 0xFE	; 254
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	22 95       	swap	r18
    1452:	26 95       	lsr	r18
    1454:	27 70       	andi	r18, 0x07	; 7
    1456:	24 0f       	add	r18, r20
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
    145c:	80 ef       	ldi	r24, 0xF0	; 240
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	29 85       	ldd	r18, Y+9	; 0x09
    1462:	3a 85       	ldd	r19, Y+10	; 0x0a
    1464:	2e 5f       	subi	r18, 0xFE	; 254
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	f9 01       	movw	r30, r18
    146a:	20 81       	ld	r18, Z
    146c:	22 0f       	add	r18, r18
    146e:	22 0f       	add	r18, r18
    1470:	22 0f       	add	r18, r18
    1472:	fc 01       	movw	r30, r24
    1474:	20 83       	st	Z, r18
    1476:	8f ee       	ldi	r24, 0xEF	; 239
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	2f ee       	ldi	r18, 0xEF	; 239
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	f9 01       	movw	r30, r18
    1480:	20 81       	ld	r18, Z
    1482:	20 61       	ori	r18, 0x10	; 16
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
    1488:	30 c0       	rjmp	.+96     	; 0x14ea <__stack+0x3eb>
          else              { Can_set_std_id(cmd->id.std);}
    148a:	83 ef       	ldi	r24, 0xF3	; 243
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	29 85       	ldd	r18, Y+9	; 0x09
    1490:	3a 85       	ldd	r19, Y+10	; 0x0a
    1492:	2e 5f       	subi	r18, 0xFE	; 254
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	2f 5f       	subi	r18, 0xFF	; 255
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	f9 01       	movw	r30, r18
    149c:	20 81       	ld	r18, Z
    149e:	42 2f       	mov	r20, r18
    14a0:	42 95       	swap	r20
    14a2:	44 0f       	add	r20, r20
    14a4:	40 7e       	andi	r20, 0xE0	; 224
    14a6:	29 85       	ldd	r18, Y+9	; 0x09
    14a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    14aa:	2e 5f       	subi	r18, 0xFE	; 254
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	f9 01       	movw	r30, r18
    14b0:	20 81       	ld	r18, Z
    14b2:	26 95       	lsr	r18
    14b4:	26 95       	lsr	r18
    14b6:	26 95       	lsr	r18
    14b8:	24 0f       	add	r18, r20
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 83       	st	Z, r18
    14be:	82 ef       	ldi	r24, 0xF2	; 242
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	29 85       	ldd	r18, Y+9	; 0x09
    14c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c6:	2e 5f       	subi	r18, 0xFE	; 254
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	f9 01       	movw	r30, r18
    14cc:	20 81       	ld	r18, Z
    14ce:	22 95       	swap	r18
    14d0:	22 0f       	add	r18, r18
    14d2:	20 7e       	andi	r18, 0xE0	; 224
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 83       	st	Z, r18
    14d8:	8f ee       	ldi	r24, 0xEF	; 239
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	2f ee       	ldi	r18, 0xEF	; 239
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	f9 01       	movw	r30, r18
    14e2:	20 81       	ld	r18, Z
    14e4:	2f 7e       	andi	r18, 0xEF	; 239
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	9f ef       	ldi	r25, 0xFF	; 255
    14ee:	dc 01       	movw	r26, r24
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	af 83       	std	Y+7, r26	; 0x07
    14f6:	b8 87       	std	Y+8, r27	; 0x08
    14f8:	27 ef       	ldi	r18, 0xF7	; 247
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	ce 01       	movw	r24, r28
    14fe:	05 96       	adiw	r24, 0x05	; 5
    1500:	03 96       	adiw	r24, 0x03	; 3
    1502:	fc 01       	movw	r30, r24
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	44 0f       	add	r20, r20
    150a:	44 0f       	add	r20, r20
    150c:	44 0f       	add	r20, r20
    150e:	ce 01       	movw	r24, r28
    1510:	05 96       	adiw	r24, 0x05	; 5
    1512:	02 96       	adiw	r24, 0x02	; 2
    1514:	fc 01       	movw	r30, r24
    1516:	80 81       	ld	r24, Z
    1518:	82 95       	swap	r24
    151a:	86 95       	lsr	r24
    151c:	87 70       	andi	r24, 0x07	; 7
    151e:	84 0f       	add	r24, r20
    1520:	f9 01       	movw	r30, r18
    1522:	80 83       	st	Z, r24
    1524:	26 ef       	ldi	r18, 0xF6	; 246
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	ce 01       	movw	r24, r28
    152a:	05 96       	adiw	r24, 0x05	; 5
    152c:	02 96       	adiw	r24, 0x02	; 2
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	44 0f       	add	r20, r20
    1536:	44 0f       	add	r20, r20
    1538:	44 0f       	add	r20, r20
    153a:	ce 01       	movw	r24, r28
    153c:	05 96       	adiw	r24, 0x05	; 5
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	fc 01       	movw	r30, r24
    1542:	80 81       	ld	r24, Z
    1544:	82 95       	swap	r24
    1546:	86 95       	lsr	r24
    1548:	87 70       	andi	r24, 0x07	; 7
    154a:	84 0f       	add	r24, r20
    154c:	f9 01       	movw	r30, r18
    154e:	80 83       	st	Z, r24
    1550:	25 ef       	ldi	r18, 0xF5	; 245
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	ce 01       	movw	r24, r28
    1556:	05 96       	adiw	r24, 0x05	; 5
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	44 0f       	add	r20, r20
    1562:	44 0f       	add	r20, r20
    1564:	44 0f       	add	r20, r20
    1566:	ce 01       	movw	r24, r28
    1568:	05 96       	adiw	r24, 0x05	; 5
    156a:	fc 01       	movw	r30, r24
    156c:	80 81       	ld	r24, Z
    156e:	82 95       	swap	r24
    1570:	86 95       	lsr	r24
    1572:	87 70       	andi	r24, 0x07	; 7
    1574:	84 0f       	add	r24, r20
    1576:	f9 01       	movw	r30, r18
    1578:	80 83       	st	Z, r24
    157a:	84 ef       	ldi	r24, 0xF4	; 244
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9e 01       	movw	r18, r28
    1580:	2b 5f       	subi	r18, 0xFB	; 251
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	22 0f       	add	r18, r18
    158a:	22 0f       	add	r18, r18
    158c:	22 0f       	add	r18, r18
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1592:	8f ee       	ldi	r24, 0xEF	; 239
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	2f ee       	ldi	r18, 0xEF	; 239
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	40 81       	ld	r20, Z
    159e:	29 85       	ldd	r18, Y+9	; 0x09
    15a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    15a2:	f9 01       	movw	r30, r18
    15a4:	26 81       	ldd	r18, Z+6	; 0x06
    15a6:	24 2b       	or	r18, r20
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	fc 01       	movw	r30, r24
    15b2:	12 86       	std	Z+10, r1	; 0x0a
    15b4:	84 ef       	ldi	r24, 0xF4	; 244
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	24 ef       	ldi	r18, 0xF4	; 244
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	f9 01       	movw	r30, r18
    15be:	20 81       	ld	r18, Z
    15c0:	24 60       	ori	r18, 0x04	; 4
    15c2:	fc 01       	movw	r30, r24
    15c4:	20 83       	st	Z, r18
    15c6:	80 ef       	ldi	r24, 0xF0	; 240
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	20 ef       	ldi	r18, 0xF0	; 240
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	f9 01       	movw	r30, r18
    15d0:	20 81       	ld	r18, Z
    15d2:	2b 7f       	andi	r18, 0xFB	; 251
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
          Can_set_idemsk();
    15d8:	84 ef       	ldi	r24, 0xF4	; 244
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	24 ef       	ldi	r18, 0xF4	; 244
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	f9 01       	movw	r30, r18
    15e2:	20 81       	ld	r18, Z
    15e4:	21 60       	ori	r18, 0x01	; 1
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18
          Can_config_rx();       
    15ea:	8f ee       	ldi	r24, 0xEF	; 239
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2f ee       	ldi	r18, 0xEF	; 239
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	f9 01       	movw	r30, r18
    15f4:	20 81       	ld	r18, Z
    15f6:	2f 73       	andi	r18, 0x3F	; 63
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18
    15fc:	8f ee       	ldi	r24, 0xEF	; 239
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	2f ee       	ldi	r18, 0xEF	; 239
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	f9 01       	movw	r30, r18
    1606:	20 81       	ld	r18, Z
    1608:	20 68       	ori	r18, 0x80	; 128
    160a:	fc 01       	movw	r30, r24
    160c:	20 83       	st	Z, r18
          break;
    160e:	51 c3       	rjmp	.+1698   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	fc 01       	movw	r30, r24
    1616:	83 85       	ldd	r24, Z+11	; 0x0b
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <__stack+0x51f>
    161c:	69 c0       	rjmp	.+210    	; 0x16f0 <__stack+0x5f1>
    161e:	83 ef       	ldi	r24, 0xF3	; 243
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	29 85       	ldd	r18, Y+9	; 0x09
    1624:	3a 85       	ldd	r19, Y+10	; 0x0a
    1626:	2e 5f       	subi	r18, 0xFE	; 254
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	2d 5f       	subi	r18, 0xFD	; 253
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	42 2f       	mov	r20, r18
    1634:	44 0f       	add	r20, r20
    1636:	44 0f       	add	r20, r20
    1638:	44 0f       	add	r20, r20
    163a:	29 85       	ldd	r18, Y+9	; 0x09
    163c:	3a 85       	ldd	r19, Y+10	; 0x0a
    163e:	2e 5f       	subi	r18, 0xFE	; 254
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	22 95       	swap	r18
    164c:	26 95       	lsr	r18
    164e:	27 70       	andi	r18, 0x07	; 7
    1650:	24 0f       	add	r18, r20
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18
    1656:	82 ef       	ldi	r24, 0xF2	; 242
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	29 85       	ldd	r18, Y+9	; 0x09
    165c:	3a 85       	ldd	r19, Y+10	; 0x0a
    165e:	2e 5f       	subi	r18, 0xFE	; 254
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	2e 5f       	subi	r18, 0xFE	; 254
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	f9 01       	movw	r30, r18
    1668:	20 81       	ld	r18, Z
    166a:	42 2f       	mov	r20, r18
    166c:	44 0f       	add	r20, r20
    166e:	44 0f       	add	r20, r20
    1670:	44 0f       	add	r20, r20
    1672:	29 85       	ldd	r18, Y+9	; 0x09
    1674:	3a 85       	ldd	r19, Y+10	; 0x0a
    1676:	2e 5f       	subi	r18, 0xFE	; 254
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	f9 01       	movw	r30, r18
    1680:	20 81       	ld	r18, Z
    1682:	22 95       	swap	r18
    1684:	26 95       	lsr	r18
    1686:	27 70       	andi	r18, 0x07	; 7
    1688:	24 0f       	add	r18, r20
    168a:	fc 01       	movw	r30, r24
    168c:	20 83       	st	Z, r18
    168e:	81 ef       	ldi	r24, 0xF1	; 241
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	29 85       	ldd	r18, Y+9	; 0x09
    1694:	3a 85       	ldd	r19, Y+10	; 0x0a
    1696:	2e 5f       	subi	r18, 0xFE	; 254
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	2f 5f       	subi	r18, 0xFF	; 255
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	42 2f       	mov	r20, r18
    16a4:	44 0f       	add	r20, r20
    16a6:	44 0f       	add	r20, r20
    16a8:	44 0f       	add	r20, r20
    16aa:	29 85       	ldd	r18, Y+9	; 0x09
    16ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ae:	2e 5f       	subi	r18, 0xFE	; 254
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	f9 01       	movw	r30, r18
    16b4:	20 81       	ld	r18, Z
    16b6:	22 95       	swap	r18
    16b8:	26 95       	lsr	r18
    16ba:	27 70       	andi	r18, 0x07	; 7
    16bc:	24 0f       	add	r18, r20
    16be:	fc 01       	movw	r30, r24
    16c0:	20 83       	st	Z, r18
    16c2:	80 ef       	ldi	r24, 0xF0	; 240
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	29 85       	ldd	r18, Y+9	; 0x09
    16c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ca:	2e 5f       	subi	r18, 0xFE	; 254
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	f9 01       	movw	r30, r18
    16d0:	20 81       	ld	r18, Z
    16d2:	22 0f       	add	r18, r18
    16d4:	22 0f       	add	r18, r18
    16d6:	22 0f       	add	r18, r18
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
    16dc:	8f ee       	ldi	r24, 0xEF	; 239
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	2f ee       	ldi	r18, 0xEF	; 239
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	f9 01       	movw	r30, r18
    16e6:	20 81       	ld	r18, Z
    16e8:	20 61       	ori	r18, 0x10	; 16
    16ea:	fc 01       	movw	r30, r24
    16ec:	20 83       	st	Z, r18
    16ee:	30 c0       	rjmp	.+96     	; 0x1750 <__stack+0x651>
          else              { Can_set_std_id(cmd->id.std);}
    16f0:	83 ef       	ldi	r24, 0xF3	; 243
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	29 85       	ldd	r18, Y+9	; 0x09
    16f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16f8:	2e 5f       	subi	r18, 0xFE	; 254
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	42 2f       	mov	r20, r18
    1706:	42 95       	swap	r20
    1708:	44 0f       	add	r20, r20
    170a:	40 7e       	andi	r20, 0xE0	; 224
    170c:	29 85       	ldd	r18, Y+9	; 0x09
    170e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1710:	2e 5f       	subi	r18, 0xFE	; 254
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	f9 01       	movw	r30, r18
    1716:	20 81       	ld	r18, Z
    1718:	26 95       	lsr	r18
    171a:	26 95       	lsr	r18
    171c:	26 95       	lsr	r18
    171e:	24 0f       	add	r18, r20
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    1724:	82 ef       	ldi	r24, 0xF2	; 242
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	29 85       	ldd	r18, Y+9	; 0x09
    172a:	3a 85       	ldd	r19, Y+10	; 0x0a
    172c:	2e 5f       	subi	r18, 0xFE	; 254
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	f9 01       	movw	r30, r18
    1732:	20 81       	ld	r18, Z
    1734:	22 95       	swap	r18
    1736:	22 0f       	add	r18, r18
    1738:	20 7e       	andi	r18, 0xE0	; 224
    173a:	fc 01       	movw	r30, r24
    173c:	20 83       	st	Z, r18
    173e:	8f ee       	ldi	r24, 0xEF	; 239
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	2f ee       	ldi	r18, 0xEF	; 239
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	f9 01       	movw	r30, r18
    1748:	20 81       	ld	r18, Z
    174a:	2f 7e       	andi	r18, 0xEF	; 239
    174c:	fc 01       	movw	r30, r24
    174e:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	9f ef       	ldi	r25, 0xFF	; 255
    1754:	dc 01       	movw	r26, r24
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	af 83       	std	Y+7, r26	; 0x07
    175c:	b8 87       	std	Y+8, r27	; 0x08
    175e:	27 ef       	ldi	r18, 0xF7	; 247
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	ce 01       	movw	r24, r28
    1764:	05 96       	adiw	r24, 0x05	; 5
    1766:	03 96       	adiw	r24, 0x03	; 3
    1768:	fc 01       	movw	r30, r24
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	44 0f       	add	r20, r20
    1770:	44 0f       	add	r20, r20
    1772:	44 0f       	add	r20, r20
    1774:	ce 01       	movw	r24, r28
    1776:	05 96       	adiw	r24, 0x05	; 5
    1778:	02 96       	adiw	r24, 0x02	; 2
    177a:	fc 01       	movw	r30, r24
    177c:	80 81       	ld	r24, Z
    177e:	82 95       	swap	r24
    1780:	86 95       	lsr	r24
    1782:	87 70       	andi	r24, 0x07	; 7
    1784:	84 0f       	add	r24, r20
    1786:	f9 01       	movw	r30, r18
    1788:	80 83       	st	Z, r24
    178a:	26 ef       	ldi	r18, 0xF6	; 246
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	ce 01       	movw	r24, r28
    1790:	05 96       	adiw	r24, 0x05	; 5
    1792:	02 96       	adiw	r24, 0x02	; 2
    1794:	fc 01       	movw	r30, r24
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	44 0f       	add	r20, r20
    179c:	44 0f       	add	r20, r20
    179e:	44 0f       	add	r20, r20
    17a0:	ce 01       	movw	r24, r28
    17a2:	05 96       	adiw	r24, 0x05	; 5
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	fc 01       	movw	r30, r24
    17a8:	80 81       	ld	r24, Z
    17aa:	82 95       	swap	r24
    17ac:	86 95       	lsr	r24
    17ae:	87 70       	andi	r24, 0x07	; 7
    17b0:	84 0f       	add	r24, r20
    17b2:	f9 01       	movw	r30, r18
    17b4:	80 83       	st	Z, r24
    17b6:	25 ef       	ldi	r18, 0xF5	; 245
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	ce 01       	movw	r24, r28
    17bc:	05 96       	adiw	r24, 0x05	; 5
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	44 0f       	add	r20, r20
    17c8:	44 0f       	add	r20, r20
    17ca:	44 0f       	add	r20, r20
    17cc:	ce 01       	movw	r24, r28
    17ce:	05 96       	adiw	r24, 0x05	; 5
    17d0:	fc 01       	movw	r30, r24
    17d2:	80 81       	ld	r24, Z
    17d4:	82 95       	swap	r24
    17d6:	86 95       	lsr	r24
    17d8:	87 70       	andi	r24, 0x07	; 7
    17da:	84 0f       	add	r24, r20
    17dc:	f9 01       	movw	r30, r18
    17de:	80 83       	st	Z, r24
    17e0:	84 ef       	ldi	r24, 0xF4	; 244
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9e 01       	movw	r18, r28
    17e6:	2b 5f       	subi	r18, 0xFB	; 251
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	22 0f       	add	r18, r18
    17f0:	22 0f       	add	r18, r18
    17f2:	22 0f       	add	r18, r18
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    17f8:	8f ee       	ldi	r24, 0xEF	; 239
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	2f ee       	ldi	r18, 0xEF	; 239
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	f9 01       	movw	r30, r18
    1802:	40 81       	ld	r20, Z
    1804:	29 85       	ldd	r18, Y+9	; 0x09
    1806:	3a 85       	ldd	r19, Y+10	; 0x0a
    1808:	f9 01       	movw	r30, r18
    180a:	26 81       	ldd	r18, Z+6	; 0x06
    180c:	24 2b       	or	r18, r20
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	fc 01       	movw	r30, r24
    181a:	22 87       	std	Z+10, r18	; 0x0a
    181c:	84 ef       	ldi	r24, 0xF4	; 244
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	24 ef       	ldi	r18, 0xF4	; 244
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	f9 01       	movw	r30, r18
    1826:	20 81       	ld	r18, Z
    1828:	24 60       	ori	r18, 0x04	; 4
    182a:	fc 01       	movw	r30, r24
    182c:	20 83       	st	Z, r18
    182e:	80 ef       	ldi	r24, 0xF0	; 240
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	20 ef       	ldi	r18, 0xF0	; 240
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	f9 01       	movw	r30, r18
    1838:	20 81       	ld	r18, Z
    183a:	24 60       	ori	r18, 0x04	; 4
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
          Can_clear_rplv();
    1840:	8f ee       	ldi	r24, 0xEF	; 239
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	2f ee       	ldi	r18, 0xEF	; 239
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	f9 01       	movw	r30, r18
    184a:	20 81       	ld	r18, Z
    184c:	2f 7d       	andi	r18, 0xDF	; 223
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
          Can_set_idemsk();
    1852:	84 ef       	ldi	r24, 0xF4	; 244
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	24 ef       	ldi	r18, 0xF4	; 244
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	21 60       	ori	r18, 0x01	; 1
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
          Can_config_rx();       
    1864:	8f ee       	ldi	r24, 0xEF	; 239
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	2f ee       	ldi	r18, 0xEF	; 239
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	f9 01       	movw	r30, r18
    186e:	20 81       	ld	r18, Z
    1870:	2f 73       	andi	r18, 0x3F	; 63
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
    1876:	8f ee       	ldi	r24, 0xEF	; 239
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	2f ee       	ldi	r18, 0xEF	; 239
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	20 81       	ld	r18, Z
    1882:	20 68       	ori	r18, 0x80	; 128
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
          break;
    1888:	14 c2       	rjmp	.+1064   	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    188a:	19 82       	std	Y+1, r1	; 0x01
    188c:	13 c0       	rjmp	.+38     	; 0x18b4 <__stack+0x7b5>
    188e:	8a ef       	ldi	r24, 0xFA	; 250
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	29 85       	ldd	r18, Y+9	; 0x09
    1894:	3a 85       	ldd	r19, Y+10	; 0x0a
    1896:	f9 01       	movw	r30, r18
    1898:	47 81       	ldd	r20, Z+7	; 0x07
    189a:	50 85       	ldd	r21, Z+8	; 0x08
    189c:	29 81       	ldd	r18, Y+1	; 0x01
    189e:	22 2f       	mov	r18, r18
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	24 0f       	add	r18, r20
    18a4:	35 1f       	adc	r19, r21
    18a6:	f9 01       	movw	r30, r18
    18a8:	20 81       	ld	r18, Z
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	8f 5f       	subi	r24, 0xFF	; 255
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	fc 01       	movw	r30, r24
    18ba:	96 81       	ldd	r25, Z+6	; 0x06
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	89 17       	cp	r24, r25
    18c0:	30 f3       	brcs	.-52     	; 0x188e <__stack+0x78f>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    18c2:	1d 82       	std	Y+5, r1	; 0x05
    18c4:	1e 82       	std	Y+6, r1	; 0x06
    18c6:	1f 82       	std	Y+7, r1	; 0x07
    18c8:	18 86       	std	Y+8, r1	; 0x08
    18ca:	27 ef       	ldi	r18, 0xF7	; 247
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	ce 01       	movw	r24, r28
    18d0:	05 96       	adiw	r24, 0x05	; 5
    18d2:	03 96       	adiw	r24, 0x03	; 3
    18d4:	fc 01       	movw	r30, r24
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	44 0f       	add	r20, r20
    18dc:	44 0f       	add	r20, r20
    18de:	44 0f       	add	r20, r20
    18e0:	ce 01       	movw	r24, r28
    18e2:	05 96       	adiw	r24, 0x05	; 5
    18e4:	02 96       	adiw	r24, 0x02	; 2
    18e6:	fc 01       	movw	r30, r24
    18e8:	80 81       	ld	r24, Z
    18ea:	82 95       	swap	r24
    18ec:	86 95       	lsr	r24
    18ee:	87 70       	andi	r24, 0x07	; 7
    18f0:	84 0f       	add	r24, r20
    18f2:	f9 01       	movw	r30, r18
    18f4:	80 83       	st	Z, r24
    18f6:	26 ef       	ldi	r18, 0xF6	; 246
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	ce 01       	movw	r24, r28
    18fc:	05 96       	adiw	r24, 0x05	; 5
    18fe:	02 96       	adiw	r24, 0x02	; 2
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	44 0f       	add	r20, r20
    1908:	44 0f       	add	r20, r20
    190a:	44 0f       	add	r20, r20
    190c:	ce 01       	movw	r24, r28
    190e:	05 96       	adiw	r24, 0x05	; 5
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	fc 01       	movw	r30, r24
    1914:	80 81       	ld	r24, Z
    1916:	82 95       	swap	r24
    1918:	86 95       	lsr	r24
    191a:	87 70       	andi	r24, 0x07	; 7
    191c:	84 0f       	add	r24, r20
    191e:	f9 01       	movw	r30, r18
    1920:	80 83       	st	Z, r24
    1922:	25 ef       	ldi	r18, 0xF5	; 245
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	ce 01       	movw	r24, r28
    1928:	05 96       	adiw	r24, 0x05	; 5
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	44 0f       	add	r20, r20
    1934:	44 0f       	add	r20, r20
    1936:	44 0f       	add	r20, r20
    1938:	ce 01       	movw	r24, r28
    193a:	05 96       	adiw	r24, 0x05	; 5
    193c:	fc 01       	movw	r30, r24
    193e:	80 81       	ld	r24, Z
    1940:	82 95       	swap	r24
    1942:	86 95       	lsr	r24
    1944:	87 70       	andi	r24, 0x07	; 7
    1946:	84 0f       	add	r24, r20
    1948:	f9 01       	movw	r30, r18
    194a:	80 83       	st	Z, r24
    194c:	84 ef       	ldi	r24, 0xF4	; 244
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9e 01       	movw	r18, r28
    1952:	2b 5f       	subi	r18, 0xFB	; 251
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	22 0f       	add	r18, r18
    195c:	22 0f       	add	r18, r18
    195e:	22 0f       	add	r18, r18
    1960:	fc 01       	movw	r30, r24
    1962:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1964:	8f ee       	ldi	r24, 0xEF	; 239
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	2f ee       	ldi	r18, 0xEF	; 239
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	f9 01       	movw	r30, r18
    196e:	40 81       	ld	r20, Z
    1970:	29 85       	ldd	r18, Y+9	; 0x09
    1972:	3a 85       	ldd	r19, Y+10	; 0x0a
    1974:	f9 01       	movw	r30, r18
    1976:	26 81       	ldd	r18, Z+6	; 0x06
    1978:	24 2b       	or	r18, r20
    197a:	fc 01       	movw	r30, r24
    197c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	21 e0       	ldi	r18, 0x01	; 1
    1984:	fc 01       	movw	r30, r24
    1986:	22 87       	std	Z+10, r18	; 0x0a
    1988:	84 ef       	ldi	r24, 0xF4	; 244
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	24 ef       	ldi	r18, 0xF4	; 244
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	f9 01       	movw	r30, r18
    1992:	20 81       	ld	r18, Z
    1994:	24 60       	ori	r18, 0x04	; 4
    1996:	fc 01       	movw	r30, r24
    1998:	20 83       	st	Z, r18
    199a:	80 ef       	ldi	r24, 0xF0	; 240
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	20 ef       	ldi	r18, 0xF0	; 240
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	f9 01       	movw	r30, r18
    19a4:	20 81       	ld	r18, Z
    19a6:	24 60       	ori	r18, 0x04	; 4
    19a8:	fc 01       	movw	r30, r24
    19aa:	20 83       	st	Z, r18
          Can_set_rplv();
    19ac:	8f ee       	ldi	r24, 0xEF	; 239
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	2f ee       	ldi	r18, 0xEF	; 239
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	20 62       	ori	r18, 0x20	; 32
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18
          Can_clear_idemsk();
    19be:	84 ef       	ldi	r24, 0xF4	; 244
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	24 ef       	ldi	r18, 0xF4	; 244
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	20 81       	ld	r18, Z
    19ca:	2e 7f       	andi	r18, 0xFE	; 254
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
          Can_config_rx();       
    19d0:	8f ee       	ldi	r24, 0xEF	; 239
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	2f ee       	ldi	r18, 0xEF	; 239
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	2f 73       	andi	r18, 0x3F	; 63
    19de:	fc 01       	movw	r30, r24
    19e0:	20 83       	st	Z, r18
    19e2:	8f ee       	ldi	r24, 0xEF	; 239
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	2f ee       	ldi	r18, 0xEF	; 239
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	f9 01       	movw	r30, r18
    19ec:	20 81       	ld	r18, Z
    19ee:	20 68       	ori	r18, 0x80	; 128
    19f0:	fc 01       	movw	r30, r24
    19f2:	20 83       	st	Z, r18
          break;
    19f4:	5e c1       	rjmp	.+700    	; 0x1cb2 <__stack+0xbb3>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fa:	fc 01       	movw	r30, r24
    19fc:	83 85       	ldd	r24, Z+11	; 0x0b
    19fe:	88 23       	and	r24, r24
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <__stack+0x905>
    1a02:	69 c0       	rjmp	.+210    	; 0x1ad6 <__stack+0x9d7>
    1a04:	83 ef       	ldi	r24, 0xF3	; 243
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	29 85       	ldd	r18, Y+9	; 0x09
    1a0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a0c:	2e 5f       	subi	r18, 0xFE	; 254
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	2d 5f       	subi	r18, 0xFD	; 253
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	f9 01       	movw	r30, r18
    1a16:	20 81       	ld	r18, Z
    1a18:	42 2f       	mov	r20, r18
    1a1a:	44 0f       	add	r20, r20
    1a1c:	44 0f       	add	r20, r20
    1a1e:	44 0f       	add	r20, r20
    1a20:	29 85       	ldd	r18, Y+9	; 0x09
    1a22:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a24:	2e 5f       	subi	r18, 0xFE	; 254
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	2e 5f       	subi	r18, 0xFE	; 254
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	f9 01       	movw	r30, r18
    1a2e:	20 81       	ld	r18, Z
    1a30:	22 95       	swap	r18
    1a32:	26 95       	lsr	r18
    1a34:	27 70       	andi	r18, 0x07	; 7
    1a36:	24 0f       	add	r18, r20
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 83       	st	Z, r18
    1a3c:	82 ef       	ldi	r24, 0xF2	; 242
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	29 85       	ldd	r18, Y+9	; 0x09
    1a42:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a44:	2e 5f       	subi	r18, 0xFE	; 254
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	2e 5f       	subi	r18, 0xFE	; 254
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	20 81       	ld	r18, Z
    1a50:	42 2f       	mov	r20, r18
    1a52:	44 0f       	add	r20, r20
    1a54:	44 0f       	add	r20, r20
    1a56:	44 0f       	add	r20, r20
    1a58:	29 85       	ldd	r18, Y+9	; 0x09
    1a5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a5c:	2e 5f       	subi	r18, 0xFE	; 254
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	2f 5f       	subi	r18, 0xFF	; 255
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	f9 01       	movw	r30, r18
    1a66:	20 81       	ld	r18, Z
    1a68:	22 95       	swap	r18
    1a6a:	26 95       	lsr	r18
    1a6c:	27 70       	andi	r18, 0x07	; 7
    1a6e:	24 0f       	add	r18, r20
    1a70:	fc 01       	movw	r30, r24
    1a72:	20 83       	st	Z, r18
    1a74:	81 ef       	ldi	r24, 0xF1	; 241
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	29 85       	ldd	r18, Y+9	; 0x09
    1a7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a7c:	2e 5f       	subi	r18, 0xFE	; 254
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	42 2f       	mov	r20, r18
    1a8a:	44 0f       	add	r20, r20
    1a8c:	44 0f       	add	r20, r20
    1a8e:	44 0f       	add	r20, r20
    1a90:	29 85       	ldd	r18, Y+9	; 0x09
    1a92:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a94:	2e 5f       	subi	r18, 0xFE	; 254
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	f9 01       	movw	r30, r18
    1a9a:	20 81       	ld	r18, Z
    1a9c:	22 95       	swap	r18
    1a9e:	26 95       	lsr	r18
    1aa0:	27 70       	andi	r18, 0x07	; 7
    1aa2:	24 0f       	add	r18, r20
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	20 83       	st	Z, r18
    1aa8:	80 ef       	ldi	r24, 0xF0	; 240
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	29 85       	ldd	r18, Y+9	; 0x09
    1aae:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ab0:	2e 5f       	subi	r18, 0xFE	; 254
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	20 81       	ld	r18, Z
    1ab8:	22 0f       	add	r18, r18
    1aba:	22 0f       	add	r18, r18
    1abc:	22 0f       	add	r18, r18
    1abe:	fc 01       	movw	r30, r24
    1ac0:	20 83       	st	Z, r18
    1ac2:	8f ee       	ldi	r24, 0xEF	; 239
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	2f ee       	ldi	r18, 0xEF	; 239
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	f9 01       	movw	r30, r18
    1acc:	20 81       	ld	r18, Z
    1ace:	20 61       	ori	r18, 0x10	; 16
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18
    1ad4:	30 c0       	rjmp	.+96     	; 0x1b36 <__stack+0xa37>
          else              { Can_set_std_id(cmd->id.std);}
    1ad6:	83 ef       	ldi	r24, 0xF3	; 243
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	29 85       	ldd	r18, Y+9	; 0x09
    1adc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ade:	2e 5f       	subi	r18, 0xFE	; 254
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	2f 5f       	subi	r18, 0xFF	; 255
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	f9 01       	movw	r30, r18
    1ae8:	20 81       	ld	r18, Z
    1aea:	42 2f       	mov	r20, r18
    1aec:	42 95       	swap	r20
    1aee:	44 0f       	add	r20, r20
    1af0:	40 7e       	andi	r20, 0xE0	; 224
    1af2:	29 85       	ldd	r18, Y+9	; 0x09
    1af4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1af6:	2e 5f       	subi	r18, 0xFE	; 254
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	f9 01       	movw	r30, r18
    1afc:	20 81       	ld	r18, Z
    1afe:	26 95       	lsr	r18
    1b00:	26 95       	lsr	r18
    1b02:	26 95       	lsr	r18
    1b04:	24 0f       	add	r18, r20
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 83       	st	Z, r18
    1b0a:	82 ef       	ldi	r24, 0xF2	; 242
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	29 85       	ldd	r18, Y+9	; 0x09
    1b10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b12:	2e 5f       	subi	r18, 0xFE	; 254
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	f9 01       	movw	r30, r18
    1b18:	20 81       	ld	r18, Z
    1b1a:	22 95       	swap	r18
    1b1c:	22 0f       	add	r18, r18
    1b1e:	20 7e       	andi	r18, 0xE0	; 224
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
    1b24:	8f ee       	ldi	r24, 0xEF	; 239
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	2f ee       	ldi	r18, 0xEF	; 239
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	f9 01       	movw	r30, r18
    1b2e:	20 81       	ld	r18, Z
    1b30:	2f 7e       	andi	r18, 0xEF	; 239
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1b36:	19 82       	std	Y+1, r1	; 0x01
    1b38:	13 c0       	rjmp	.+38     	; 0x1b60 <__stack+0xa61>
    1b3a:	8a ef       	ldi	r24, 0xFA	; 250
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	29 85       	ldd	r18, Y+9	; 0x09
    1b40:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b42:	f9 01       	movw	r30, r18
    1b44:	47 81       	ldd	r20, Z+7	; 0x07
    1b46:	50 85       	ldd	r21, Z+8	; 0x08
    1b48:	29 81       	ldd	r18, Y+1	; 0x01
    1b4a:	22 2f       	mov	r18, r18
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	24 0f       	add	r18, r20
    1b50:	35 1f       	adc	r19, r21
    1b52:	f9 01       	movw	r30, r18
    1b54:	20 81       	ld	r18, Z
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	fc 01       	movw	r30, r24
    1b66:	96 81       	ldd	r25, Z+6	; 0x06
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	89 17       	cp	r24, r25
    1b6c:	30 f3       	brcs	.-52     	; 0x1b3a <__stack+0xa3b>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	9f ef       	ldi	r25, 0xFF	; 255
    1b72:	dc 01       	movw	r26, r24
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	af 83       	std	Y+7, r26	; 0x07
    1b7a:	b8 87       	std	Y+8, r27	; 0x08
    1b7c:	27 ef       	ldi	r18, 0xF7	; 247
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	ce 01       	movw	r24, r28
    1b82:	05 96       	adiw	r24, 0x05	; 5
    1b84:	03 96       	adiw	r24, 0x03	; 3
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	44 0f       	add	r20, r20
    1b8e:	44 0f       	add	r20, r20
    1b90:	44 0f       	add	r20, r20
    1b92:	ce 01       	movw	r24, r28
    1b94:	05 96       	adiw	r24, 0x05	; 5
    1b96:	02 96       	adiw	r24, 0x02	; 2
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	82 95       	swap	r24
    1b9e:	86 95       	lsr	r24
    1ba0:	87 70       	andi	r24, 0x07	; 7
    1ba2:	84 0f       	add	r24, r20
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	80 83       	st	Z, r24
    1ba8:	26 ef       	ldi	r18, 0xF6	; 246
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	ce 01       	movw	r24, r28
    1bae:	05 96       	adiw	r24, 0x05	; 5
    1bb0:	02 96       	adiw	r24, 0x02	; 2
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	44 0f       	add	r20, r20
    1bba:	44 0f       	add	r20, r20
    1bbc:	44 0f       	add	r20, r20
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	05 96       	adiw	r24, 0x05	; 5
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	80 81       	ld	r24, Z
    1bc8:	82 95       	swap	r24
    1bca:	86 95       	lsr	r24
    1bcc:	87 70       	andi	r24, 0x07	; 7
    1bce:	84 0f       	add	r24, r20
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	80 83       	st	Z, r24
    1bd4:	25 ef       	ldi	r18, 0xF5	; 245
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	ce 01       	movw	r24, r28
    1bda:	05 96       	adiw	r24, 0x05	; 5
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	fc 01       	movw	r30, r24
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	44 0f       	add	r20, r20
    1be6:	44 0f       	add	r20, r20
    1be8:	44 0f       	add	r20, r20
    1bea:	ce 01       	movw	r24, r28
    1bec:	05 96       	adiw	r24, 0x05	; 5
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	82 95       	swap	r24
    1bf4:	86 95       	lsr	r24
    1bf6:	87 70       	andi	r24, 0x07	; 7
    1bf8:	84 0f       	add	r24, r20
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	80 83       	st	Z, r24
    1bfe:	84 ef       	ldi	r24, 0xF4	; 244
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9e 01       	movw	r18, r28
    1c04:	2b 5f       	subi	r18, 0xFB	; 251
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	f9 01       	movw	r30, r18
    1c0a:	20 81       	ld	r18, Z
    1c0c:	22 0f       	add	r18, r18
    1c0e:	22 0f       	add	r18, r18
    1c10:	22 0f       	add	r18, r18
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1c16:	8f ee       	ldi	r24, 0xEF	; 239
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	2f ee       	ldi	r18, 0xEF	; 239
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	f9 01       	movw	r30, r18
    1c20:	40 81       	ld	r20, Z
    1c22:	29 85       	ldd	r18, Y+9	; 0x09
    1c24:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c26:	f9 01       	movw	r30, r18
    1c28:	26 81       	ldd	r18, Z+6	; 0x06
    1c2a:	24 2b       	or	r18, r20
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	21 e0       	ldi	r18, 0x01	; 1
    1c36:	fc 01       	movw	r30, r24
    1c38:	22 87       	std	Z+10, r18	; 0x0a
    1c3a:	84 ef       	ldi	r24, 0xF4	; 244
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	24 ef       	ldi	r18, 0xF4	; 244
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	f9 01       	movw	r30, r18
    1c44:	20 81       	ld	r18, Z
    1c46:	24 60       	ori	r18, 0x04	; 4
    1c48:	fc 01       	movw	r30, r24
    1c4a:	20 83       	st	Z, r18
    1c4c:	80 ef       	ldi	r24, 0xF0	; 240
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	20 ef       	ldi	r18, 0xF0	; 240
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	f9 01       	movw	r30, r18
    1c56:	20 81       	ld	r18, Z
    1c58:	24 60       	ori	r18, 0x04	; 4
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	20 83       	st	Z, r18
          Can_set_rplv();
    1c5e:	8f ee       	ldi	r24, 0xEF	; 239
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	2f ee       	ldi	r18, 0xEF	; 239
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	f9 01       	movw	r30, r18
    1c68:	20 81       	ld	r18, Z
    1c6a:	20 62       	ori	r18, 0x20	; 32
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
          Can_set_idemsk();
    1c70:	84 ef       	ldi	r24, 0xF4	; 244
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	24 ef       	ldi	r18, 0xF4	; 244
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	f9 01       	movw	r30, r18
    1c7a:	20 81       	ld	r18, Z
    1c7c:	21 60       	ori	r18, 0x01	; 1
    1c7e:	fc 01       	movw	r30, r24
    1c80:	20 83       	st	Z, r18
          Can_config_rx();       
    1c82:	8f ee       	ldi	r24, 0xEF	; 239
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	2f ee       	ldi	r18, 0xEF	; 239
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	f9 01       	movw	r30, r18
    1c8c:	20 81       	ld	r18, Z
    1c8e:	2f 73       	andi	r18, 0x3F	; 63
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 83       	st	Z, r18
    1c94:	8f ee       	ldi	r24, 0xEF	; 239
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	2f ee       	ldi	r18, 0xEF	; 239
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	f9 01       	movw	r30, r18
    1c9e:	20 81       	ld	r18, Z
    1ca0:	20 68       	ori	r18, 0x80	; 128
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
          break;
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <__stack+0xbb3>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	fc 01       	movw	r30, r24
    1cae:	11 86       	std	Z+9, r1	; 0x09
          break;
    1cb0:	00 00       	nop
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <__stack+0xbc3>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	2f e1       	ldi	r18, 0x1F	; 31
    1cba:	fc 01       	movw	r30, r24
    1cbc:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <__stack+0xbc5>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
}
    1cc4:	2a 96       	adiw	r28, 0x0a	; 10
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <can_get_status+0x6>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <can_get_status+0x8>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	fc 01       	movw	r30, r24
    1cec:	81 85       	ldd	r24, Z+9	; 0x09
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	88 23       	and	r24, r24
    1cf4:	31 f0       	breq	.+12     	; 0x1d02 <can_get_status+0x2c>
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	8f 31       	cpi	r24, 0x1F	; 31
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <can_get_status+0x2c>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	11 c1       	rjmp	.+546    	; 0x1f28 <can_get_status+0x252>
    }

    Can_set_mob(cmd->handle);
    1d06:	8d ee       	ldi	r24, 0xED	; 237
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0e:	f9 01       	movw	r30, r18
    1d10:	20 81       	ld	r18, Z
    1d12:	22 95       	swap	r18
    1d14:	20 7f       	andi	r18, 0xF0	; 240
    1d16:	fc 01       	movw	r30, r24
    1d18:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    1d1a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <can_get_mob_status>
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	80 32       	cpi	r24, 0x20	; 32
    1d28:	91 05       	cpc	r25, r1
    1d2a:	89 f0       	breq	.+34     	; 0x1d4e <can_get_status+0x78>
    1d2c:	81 32       	cpi	r24, 0x21	; 33
    1d2e:	91 05       	cpc	r25, r1
    1d30:	1c f4       	brge	.+6      	; 0x1d38 <can_get_status+0x62>
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	49 f0       	breq	.+18     	; 0x1d48 <can_get_status+0x72>
    1d36:	e2 c0       	rjmp	.+452    	; 0x1efc <can_get_status+0x226>
    1d38:	80 34       	cpi	r24, 0x40	; 64
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <can_get_status+0x6a>
    1d3e:	ca c0       	rjmp	.+404    	; 0x1ed4 <can_get_status+0x1fe>
    1d40:	80 3a       	cpi	r24, 0xA0	; 160
    1d42:	91 05       	cpc	r25, r1
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <can_get_status+0x78>
    1d46:	da c0       	rjmp	.+436    	; 0x1efc <can_get_status+0x226>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	89 83       	std	Y+1, r24	; 0x01
            break;
    1d4c:	ec c0       	rjmp	.+472    	; 0x1f26 <can_get_status+0x250>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1d4e:	8f ee       	ldi	r24, 0xEF	; 239
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	fc 01       	movw	r30, r24
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	2f 70       	andi	r18, 0x0F	; 15
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	fc 01       	movw	r30, r24
    1d60:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	fc 01       	movw	r30, r24
    1d68:	87 81       	ldd	r24, Z+7	; 0x07
    1d6a:	90 85       	ldd	r25, Z+8	; 0x08
    1d6c:	0e 94 17 01 	call	0x22e	; 0x22e <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1d70:	80 ef       	ldi	r24, 0xF0	; 240
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	fc 01       	movw	r30, r24
    1d76:	80 81       	ld	r24, Z
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	84 70       	andi	r24, 0x04	; 4
    1d7e:	99 27       	eor	r25, r25
    1d80:	95 95       	asr	r25
    1d82:	87 95       	ror	r24
    1d84:	95 95       	asr	r25
    1d86:	87 95       	ror	r24
    1d88:	28 2f       	mov	r18, r24
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	fc 01       	movw	r30, r24
    1d90:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1d92:	8f ee       	ldi	r24, 0xEF	; 239
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	fc 01       	movw	r30, r24
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	80 71       	andi	r24, 0x10	; 16
    1da0:	99 27       	eor	r25, r25
    1da2:	95 95       	asr	r25
    1da4:	87 95       	ror	r24
    1da6:	95 95       	asr	r25
    1da8:	87 95       	ror	r24
    1daa:	95 95       	asr	r25
    1dac:	87 95       	ror	r24
    1dae:	95 95       	asr	r25
    1db0:	87 95       	ror	r24
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <can_get_status+0xe2>
    1db6:	54 c0       	rjmp	.+168    	; 0x1e60 <can_get_status+0x18a>
            {
                cmd->ctrl.ide = 1; // extended frame
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	02 96       	adiw	r24, 0x02	; 2
    1dc8:	03 96       	adiw	r24, 0x03	; 3
    1dca:	23 ef       	ldi	r18, 0xF3	; 243
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	f9 01       	movw	r30, r18
    1dd0:	20 81       	ld	r18, Z
    1dd2:	26 95       	lsr	r18
    1dd4:	26 95       	lsr	r18
    1dd6:	26 95       	lsr	r18
    1dd8:	fc 01       	movw	r30, r24
    1dda:	20 83       	st	Z, r18
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	02 96       	adiw	r24, 0x02	; 2
    1de2:	02 96       	adiw	r24, 0x02	; 2
    1de4:	22 ef       	ldi	r18, 0xF2	; 242
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	f9 01       	movw	r30, r18
    1dea:	20 81       	ld	r18, Z
    1dec:	42 2f       	mov	r20, r18
    1dee:	46 95       	lsr	r20
    1df0:	46 95       	lsr	r20
    1df2:	46 95       	lsr	r20
    1df4:	23 ef       	ldi	r18, 0xF3	; 243
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	f9 01       	movw	r30, r18
    1dfa:	20 81       	ld	r18, Z
    1dfc:	22 95       	swap	r18
    1dfe:	22 0f       	add	r18, r18
    1e00:	20 7e       	andi	r18, 0xE0	; 224
    1e02:	24 0f       	add	r18, r20
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	02 96       	adiw	r24, 0x02	; 2
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	21 ef       	ldi	r18, 0xF1	; 241
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	f9 01       	movw	r30, r18
    1e16:	20 81       	ld	r18, Z
    1e18:	42 2f       	mov	r20, r18
    1e1a:	46 95       	lsr	r20
    1e1c:	46 95       	lsr	r20
    1e1e:	46 95       	lsr	r20
    1e20:	22 ef       	ldi	r18, 0xF2	; 242
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	f9 01       	movw	r30, r18
    1e26:	20 81       	ld	r18, Z
    1e28:	22 95       	swap	r18
    1e2a:	22 0f       	add	r18, r18
    1e2c:	20 7e       	andi	r18, 0xE0	; 224
    1e2e:	24 0f       	add	r18, r20
    1e30:	fc 01       	movw	r30, r24
    1e32:	20 83       	st	Z, r18
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	02 96       	adiw	r24, 0x02	; 2
    1e3a:	20 ef       	ldi	r18, 0xF0	; 240
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	f9 01       	movw	r30, r18
    1e40:	20 81       	ld	r18, Z
    1e42:	42 2f       	mov	r20, r18
    1e44:	46 95       	lsr	r20
    1e46:	46 95       	lsr	r20
    1e48:	46 95       	lsr	r20
    1e4a:	21 ef       	ldi	r18, 0xF1	; 241
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	f9 01       	movw	r30, r18
    1e50:	20 81       	ld	r18, Z
    1e52:	22 95       	swap	r18
    1e54:	22 0f       	add	r18, r18
    1e56:	20 7e       	andi	r18, 0xE0	; 224
    1e58:	24 0f       	add	r18, r20
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	20 83       	st	Z, r18
    1e5e:	26 c0       	rjmp	.+76     	; 0x1eac <can_get_status+0x1d6>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	fc 01       	movw	r30, r24
    1e66:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	02 96       	adiw	r24, 0x02	; 2
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	23 ef       	ldi	r18, 0xF3	; 243
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	f9 01       	movw	r30, r18
    1e76:	20 81       	ld	r18, Z
    1e78:	22 95       	swap	r18
    1e7a:	26 95       	lsr	r18
    1e7c:	27 70       	andi	r18, 0x07	; 7
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	02 96       	adiw	r24, 0x02	; 2
    1e88:	22 ef       	ldi	r18, 0xF2	; 242
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	20 81       	ld	r18, Z
    1e90:	42 2f       	mov	r20, r18
    1e92:	42 95       	swap	r20
    1e94:	46 95       	lsr	r20
    1e96:	47 70       	andi	r20, 0x07	; 7
    1e98:	23 ef       	ldi	r18, 0xF3	; 243
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	20 81       	ld	r18, Z
    1ea0:	22 0f       	add	r18, r18
    1ea2:	22 0f       	add	r18, r18
    1ea4:	22 0f       	add	r18, r18
    1ea6:	24 0f       	add	r18, r20
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1eb6:	8f ee       	ldi	r24, 0xEF	; 239
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	2f ee       	ldi	r18, 0xEF	; 239
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	f9 01       	movw	r30, r18
    1ec0:	20 81       	ld	r18, Z
    1ec2:	2f 73       	andi	r18, 0x3F	; 63
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1ec8:	8e ee       	ldi	r24, 0xEE	; 238
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	fc 01       	movw	r30, r24
    1ece:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1ed0:	19 82       	std	Y+1, r1	; 0x01
            break;
    1ed2:	29 c0       	rjmp	.+82     	; 0x1f26 <can_get_status+0x250>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eda:	fc 01       	movw	r30, r24
    1edc:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1ede:	8f ee       	ldi	r24, 0xEF	; 239
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	2f ee       	ldi	r18, 0xEF	; 239
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	20 81       	ld	r18, Z
    1eea:	2f 73       	andi	r18, 0x3F	; 63
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1ef0:	8e ee       	ldi	r24, 0xEE	; 238
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1ef8:	19 82       	std	Y+1, r1	; 0x01
            break;
    1efa:	15 c0       	rjmp	.+42     	; 0x1f26 <can_get_status+0x250>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	2a 81       	ldd	r18, Y+2	; 0x02
    1f02:	fc 01       	movw	r30, r24
    1f04:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1f06:	8f ee       	ldi	r24, 0xEF	; 239
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	2f ee       	ldi	r18, 0xEF	; 239
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	f9 01       	movw	r30, r18
    1f10:	20 81       	ld	r18, Z
    1f12:	2f 73       	andi	r18, 0x3F	; 63
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1f18:	8e ee       	ldi	r24, 0xEE	; 238
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	89 83       	std	Y+1, r24	; 0x01
            break;
    1f24:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <main>:
static unsigned char tyre_in_ad = 0x0C;
static unsigned char tyre_mid_ad = 0x16;
static unsigned char tyre_out_ad = 0x0B;

int main(void)
{	
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
	PORTD=0x00;
    1f4a:	8b e2       	ldi	r24, 0x2B	; 43
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	10 82       	st	Z, r1
	
	//i2c initialization macro
	i2c_init();	
    1f52:	1b d1       	rcall	.+566    	; 0x218a <i2c_init>
	
	can_init(0);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 bb 03 	call	0x776	; 0x776 <can_init>
	int tyre_mid;
	int tyre_in;
	
	U8  buffer[6];
	st_cmd_t static msg;
	msg.id.std = 0x123;
    1f5a:	83 e2       	ldi	r24, 0x23	; 35
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	90 93 07 01 	sts	0x0107, r25
    1f62:	80 93 06 01 	sts	0x0106, r24
	//msg.handle = can_get_mob_free();
	//.......
	msg.pt_data = &buffer[0];//point msg data to data buffer	
    1f66:	ce 01       	movw	r24, r28
    1f68:	07 96       	adiw	r24, 0x07	; 7
    1f6a:	90 93 0c 01 	sts	0x010C, r25
    1f6e:	80 93 0b 01 	sts	0x010B, r24
	msg.cmd = CMD_TX;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 05 01 	sts	0x0105, r24
	msg.dlc = 6;
    1f78:	86 e0       	ldi	r24, 0x06	; 6
    1f7a:	80 93 0a 01 	sts	0x010A, r24
	
	while(1){
		
		//retrieve temperature from i2c temp sensor(s)
		tyre_out = (int)mlx_getObjTempF(tyre_out_ad);
    1f7e:	80 91 02 01 	lds	r24, 0x0102
    1f82:	d8 d0       	rcall	.+432    	; 0x2134 <mlx_getObjTempF>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	ed d2       	rcall	.+1498   	; 0x2568 <__fixsfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
		tyre_mid = (int)mlx_getObjTempF(tyre_mid_ad);
    1f96:	80 91 01 01 	lds	r24, 0x0101
    1f9a:	cc d0       	rcall	.+408    	; 0x2134 <mlx_getObjTempF>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	e1 d2       	rcall	.+1474   	; 0x2568 <__fixsfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9c 83       	std	Y+4, r25	; 0x04
    1fac:	8b 83       	std	Y+3, r24	; 0x03
		tyre_in = (int)mlx_getObjTempF(tyre_in_ad);
    1fae:	80 91 00 01 	lds	r24, 0x0100
    1fb2:	c0 d0       	rcall	.+384    	; 0x2134 <mlx_getObjTempF>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	d5 d2       	rcall	.+1450   	; 0x2568 <__fixsfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
		
		
		//store temp, in buffer
		buffer[0] = (tyre_out<<8)>>8;
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	98 2f       	mov	r25, r24
    1fcc:	88 27       	eor	r24, r24
    1fce:	89 2f       	mov	r24, r25
    1fd0:	99 0f       	add	r25, r25
    1fd2:	99 0b       	sbc	r25, r25
    1fd4:	8f 83       	std	Y+7, r24	; 0x07
		buffer[1] = tyre_out>>8;	
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	89 2f       	mov	r24, r25
    1fdc:	99 0f       	add	r25, r25
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	88 87       	std	Y+8, r24	; 0x08
		buffer[2] = (tyre_mid<<8)>>8;	
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	98 2f       	mov	r25, r24
    1fe8:	88 27       	eor	r24, r24
    1fea:	89 2f       	mov	r24, r25
    1fec:	99 0f       	add	r25, r25
    1fee:	99 0b       	sbc	r25, r25
    1ff0:	89 87       	std	Y+9, r24	; 0x09
		buffer[3] = tyre_mid>>8;	
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	89 2f       	mov	r24, r25
    1ff8:	99 0f       	add	r25, r25
    1ffa:	99 0b       	sbc	r25, r25
    1ffc:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[4] = (tyre_in<<8)>>8;	
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	98 2f       	mov	r25, r24
    2004:	88 27       	eor	r24, r24
    2006:	89 2f       	mov	r24, r25
    2008:	99 0f       	add	r25, r25
    200a:	99 0b       	sbc	r25, r25
    200c:	8b 87       	std	Y+11, r24	; 0x0b
		buffer[5] = tyre_in>>8;	
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	89 2f       	mov	r24, r25
    2014:	99 0f       	add	r25, r25
    2016:	99 0b       	sbc	r25, r25
    2018:	8c 87       	std	Y+12, r24	; 0x0c
	
		//can_init(0);
	
		//send can message to MOb
		while(can_cmd(&msg)!= CAN_CMD_ACCEPTED);
    201a:	00 00       	nop
    201c:	84 e0       	ldi	r24, 0x04	; 4
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	0e 94 d6 03 	call	0x7ac	; 0x7ac <can_cmd>
    2024:	88 23       	and	r24, r24
    2026:	d1 f7       	brne	.-12     	; 0x201c <main+0xe6>
		//loop until send successful 
		while(can_get_status(&msg) == CAN_STATUS_NOT_COMPLETED);
    2028:	00 00       	nop
    202a:	84 e0       	ldi	r24, 0x04	; 4
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	53 de       	rcall	.-858    	; 0x1cd6 <can_get_status>
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	d9 f3       	breq	.-10     	; 0x202a <main+0xf4>
	
		////clear MObs
		//can_clear_all_mob();
		
		
	}
    2034:	a4 cf       	rjmp	.-184    	; 0x1f7e <main+0x48>

00002036 <mlx_read>:
  i2c_write(low);  		//Low byte
  i2c_write(high);  	//High byte
  i2c_write(pec); 		//packet error code
  i2c_stop();			//stop i2c
  _delay_ms(10);		//wait for sensor to write
}
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	29 97       	sbiw	r28, 0x09	; 9
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	9f 83       	std	Y+7, r25	; 0x07
    204c:	8e 83       	std	Y+6, r24	; 0x06
    204e:	79 87       	std	Y+9, r23	; 0x09
    2050:	68 87       	std	Y+8, r22	; 0x08
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	e9 d0       	rcall	.+466    	; 0x2234 <i2c_start_wait>
    2062:	88 85       	ldd	r24, Y+8	; 0x08
    2064:	5e d1       	rcall	.+700    	; 0x2322 <i2c_write>
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	38 d1       	rcall	.+624    	; 0x22dc <i2c_rep_start>
    206c:	82 d1       	rcall	.+772    	; 0x2372 <i2c_readAck>
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	80 d1       	rcall	.+768    	; 0x2372 <i2c_readAck>
    2072:	8c 83       	std	Y+4, r24	; 0x04
    2074:	95 d1       	rcall	.+810    	; 0x23a0 <i2c_readNak>
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	3d d1       	rcall	.+634    	; 0x22f4 <i2c_stop>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	98 2f       	mov	r25, r24
    2088:	88 27       	eor	r24, r24
    208a:	82 0f       	add	r24, r18
    208c:	93 1f       	adc	r25, r19
    208e:	29 96       	adiw	r28, 0x09	; 9
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	08 95       	ret

000020a0 <mlx_getObjTempK>:


//read object temperature in Kelvin
float mlx_getObjTempK(unsigned char address){
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <mlx_getObjTempK+0x6>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <mlx_getObjTempK+0x8>
    20a8:	1f 92       	push	r1
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	8d 83       	std	Y+5, r24	; 0x05
  float tempFactor = 0.02; // 0.02 degrees per LSB
    20b0:	8a e0       	ldi	r24, 0x0A	; 10
    20b2:	97 ed       	ldi	r25, 0xD7	; 215
    20b4:	a3 ea       	ldi	r26, 0xA3	; 163
    20b6:	bc e3       	ldi	r27, 0x3C	; 60
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	ab 83       	std	Y+3, r26	; 0x03
    20be:	bc 83       	std	Y+4, r27	; 0x04
  return tempFactor * mlx_read(address,0x07); //0x07 is Melexis command to access RAM address 0x07
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	67 e0       	ldi	r22, 0x07	; 7
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	b5 df       	rcall	.-150    	; 0x2036 <mlx_read>
    20cc:	cc 01       	movw	r24, r24
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	79 d2       	rcall	.+1266   	; 0x25ca <__floatunsisf>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	29 81       	ldd	r18, Y+1	; 0x01
    20de:	3a 81       	ldd	r19, Y+2	; 0x02
    20e0:	4b 81       	ldd	r20, Y+3	; 0x03
    20e2:	5c 81       	ldd	r21, Y+4	; 0x04
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	fe d2       	rcall	.+1532   	; 0x26e6 <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
}
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <mlx_getObjTempC>:

//read object temperature in Kelvin
float mlx_getObjTempC(unsigned char address){
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	1f 92       	push	r1
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	89 83       	std	Y+1, r24	; 0x01
  return mlx_getObjTempK(address) - 273.15;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	c7 df       	rcall	.-114    	; 0x20a0 <mlx_getObjTempK>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	23 e3       	ldi	r18, 0x33	; 51
    2118:	33 e9       	ldi	r19, 0x93	; 147
    211a:	48 e8       	ldi	r20, 0x88	; 136
    211c:	53 e4       	ldi	r21, 0x43	; 67
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	55 d1       	rcall	.+682    	; 0x23ce <__subsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
}
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0f 90       	pop	r0
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	08 95       	ret

00002134 <mlx_getObjTempF>:

//read object temperature in Celsius
float mlx_getObjTempF(unsigned char address){
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	1f 92       	push	r1
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
  return 9. * mlx_getObjTempC(address) / 5. + 32.;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	df df       	rcall	.-66     	; 0x2102 <mlx_getObjTempC>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e1       	ldi	r20, 0x10	; 16
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	c8 d2       	rcall	.+1424   	; 0x26e6 <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 ea       	ldi	r20, 0xA0	; 160
    2160:	50 e4       	ldi	r21, 0x40	; 64
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	98 d1       	rcall	.+816    	; 0x2498 <__divsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	52 e4       	ldi	r21, 0x42	; 66
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	2b d1       	rcall	.+598    	; 0x23d0 <__addsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
}
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0f 90       	pop	r0
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <i2c_init>:

/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2192:	89 eb       	ldi	r24, 0xB9	; 185
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	fc 01       	movw	r30, r24
    2198:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    219a:	88 eb       	ldi	r24, 0xB8	; 184
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	28 ef       	ldi	r18, 0xF8	; 248
    21a0:	fc 01       	movw	r30, r24
    21a2:	20 83       	st	Z, r18

}/* i2c_init */
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <i2c_start+0x6>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    21b6:	8c eb       	ldi	r24, 0xBC	; 188
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	24 ea       	ldi	r18, 0xA4	; 164
    21bc:	fc 01       	movw	r30, r24
    21be:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    21c0:	00 00       	nop
    21c2:	8c eb       	ldi	r24, 0xBC	; 188
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	fc 01       	movw	r30, r24
    21c8:	80 81       	ld	r24, Z
    21ca:	88 23       	and	r24, r24
    21cc:	d4 f7       	brge	.-12     	; 0x21c2 <i2c_start+0x18>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    21ce:	89 eb       	ldi	r24, 0xB9	; 185
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	fc 01       	movw	r30, r24
    21d4:	80 81       	ld	r24, Z
    21d6:	88 7f       	andi	r24, 0xF8	; 248
    21d8:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	88 30       	cpi	r24, 0x08	; 8
    21de:	29 f0       	breq	.+10     	; 0x21ea <i2c_start+0x40>
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	80 31       	cpi	r24, 0x10	; 16
    21e4:	11 f0       	breq	.+4      	; 0x21ea <i2c_start+0x40>
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	20 c0       	rjmp	.+64     	; 0x222a <i2c_start+0x80>

	// send device address
	TWDR = address;
    21ea:	8b eb       	ldi	r24, 0xBB	; 187
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	2a 81       	ldd	r18, Y+2	; 0x02
    21f0:	fc 01       	movw	r30, r24
    21f2:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    21f4:	8c eb       	ldi	r24, 0xBC	; 188
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	24 e8       	ldi	r18, 0x84	; 132
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    21fe:	00 00       	nop
    2200:	8c eb       	ldi	r24, 0xBC	; 188
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	fc 01       	movw	r30, r24
    2206:	80 81       	ld	r24, Z
    2208:	88 23       	and	r24, r24
    220a:	d4 f7       	brge	.-12     	; 0x2200 <i2c_start+0x56>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    220c:	89 eb       	ldi	r24, 0xB9	; 185
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	fc 01       	movw	r30, r24
    2212:	80 81       	ld	r24, Z
    2214:	88 7f       	andi	r24, 0xF8	; 248
    2216:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	88 31       	cpi	r24, 0x18	; 24
    221c:	29 f0       	breq	.+10     	; 0x2228 <i2c_start+0x7e>
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	80 34       	cpi	r24, 0x40	; 64
    2222:	11 f0       	breq	.+4      	; 0x2228 <i2c_start+0x7e>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	01 c0       	rjmp	.+2      	; 0x222a <i2c_start+0x80>

	return 0;
    2228:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	00 d0       	rcall	.+0      	; 0x223a <i2c_start_wait+0x6>
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	8a 83       	std	Y+2, r24	; 0x02


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2240:	8c eb       	ldi	r24, 0xBC	; 188
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	24 ea       	ldi	r18, 0xA4	; 164
    2246:	fc 01       	movw	r30, r24
    2248:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    224a:	00 00       	nop
    224c:	8c eb       	ldi	r24, 0xBC	; 188
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	fc 01       	movw	r30, r24
    2252:	80 81       	ld	r24, Z
    2254:	88 23       	and	r24, r24
    2256:	d4 f7       	brge	.-12     	; 0x224c <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2258:	89 eb       	ldi	r24, 0xB9	; 185
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	fc 01       	movw	r30, r24
    225e:	80 81       	ld	r24, Z
    2260:	88 7f       	andi	r24, 0xF8	; 248
    2262:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	88 30       	cpi	r24, 0x08	; 8
    2268:	21 f0       	breq	.+8      	; 0x2272 <i2c_start_wait+0x3e>
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	80 31       	cpi	r24, 0x10	; 16
    226e:	09 f0       	breq	.+2      	; 0x2272 <i2c_start_wait+0x3e>
    2270:	2f c0       	rjmp	.+94     	; 0x22d0 <i2c_start_wait+0x9c>
    
    	// send device address
    	TWDR = address;
    2272:	8b eb       	ldi	r24, 0xBB	; 187
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	2a 81       	ldd	r18, Y+2	; 0x02
    2278:	fc 01       	movw	r30, r24
    227a:	20 83       	st	Z, r18
    	TWCR = (1<<TWINT) | (1<<TWEN);
    227c:	8c eb       	ldi	r24, 0xBC	; 188
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	24 e8       	ldi	r18, 0x84	; 132
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2286:	00 00       	nop
    2288:	8c eb       	ldi	r24, 0xBC	; 188
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	fc 01       	movw	r30, r24
    228e:	80 81       	ld	r24, Z
    2290:	88 23       	and	r24, r24
    2292:	d4 f7       	brge	.-12     	; 0x2288 <i2c_start_wait+0x54>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2294:	89 eb       	ldi	r24, 0xB9	; 185
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	fc 01       	movw	r30, r24
    229a:	80 81       	ld	r24, Z
    229c:	88 7f       	andi	r24, 0xF8	; 248
    229e:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	80 32       	cpi	r24, 0x20	; 32
    22a4:	19 f0       	breq	.+6      	; 0x22ac <i2c_start_wait+0x78>
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	88 35       	cpi	r24, 0x58	; 88
    22aa:	89 f4       	brne	.+34     	; 0x22ce <i2c_start_wait+0x9a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    22ac:	8c eb       	ldi	r24, 0xBC	; 188
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	24 e9       	ldi	r18, 0x94	; 148
    22b2:	fc 01       	movw	r30, r24
    22b4:	20 83       	st	Z, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    22b6:	00 00       	nop
    22b8:	8c eb       	ldi	r24, 0xBC	; 188
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	fc 01       	movw	r30, r24
    22be:	80 81       	ld	r24, Z
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 71       	andi	r24, 0x10	; 16
    22c6:	99 27       	eor	r25, r25
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	b1 f7       	brne	.-20     	; 0x22b8 <i2c_start_wait+0x84>
	        
    	    continue;
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <i2c_start_wait+0x9c>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <i2c_start_wait+0x9e>
     }
    22d0:	b7 cf       	rjmp	.-146    	; 0x2240 <i2c_start_wait+0xc>

}/* i2c_start_wait */
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	1f 92       	push	r1
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	5f df       	rcall	.-322    	; 0x21aa <i2c_start>

}/* i2c_rep_start */
    22ec:	0f 90       	pop	r0
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    22fc:	8c eb       	ldi	r24, 0xBC	; 188
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	24 e9       	ldi	r18, 0x94	; 148
    2302:	fc 01       	movw	r30, r24
    2304:	20 83       	st	Z, r18
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2306:	00 00       	nop
    2308:	8c eb       	ldi	r24, 0xBC	; 188
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	fc 01       	movw	r30, r24
    230e:	80 81       	ld	r24, Z
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	80 71       	andi	r24, 0x10	; 16
    2316:	99 27       	eor	r25, r25
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	b1 f7       	brne	.-20     	; 0x2308 <i2c_stop+0x14>

}/* i2c_stop */
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	00 d0       	rcall	.+0      	; 0x2328 <i2c_write+0x6>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    232e:	8b eb       	ldi	r24, 0xBB	; 187
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	2a 81       	ldd	r18, Y+2	; 0x02
    2334:	fc 01       	movw	r30, r24
    2336:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2338:	8c eb       	ldi	r24, 0xBC	; 188
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	24 e8       	ldi	r18, 0x84	; 132
    233e:	fc 01       	movw	r30, r24
    2340:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2342:	00 00       	nop
    2344:	8c eb       	ldi	r24, 0xBC	; 188
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	fc 01       	movw	r30, r24
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	d4 f7       	brge	.-12     	; 0x2344 <i2c_write+0x22>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2350:	89 eb       	ldi	r24, 0xB9	; 185
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	fc 01       	movw	r30, r24
    2356:	80 81       	ld	r24, Z
    2358:	88 7f       	andi	r24, 0xF8	; 248
    235a:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 32       	cpi	r24, 0x28	; 40
    2360:	11 f0       	breq	.+4      	; 0x2366 <i2c_write+0x44>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <i2c_write+0x46>
	return 0;
    2366:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    237a:	8c eb       	ldi	r24, 0xBC	; 188
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	24 ec       	ldi	r18, 0xC4	; 196
    2380:	fc 01       	movw	r30, r24
    2382:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));    
    2384:	00 00       	nop
    2386:	8c eb       	ldi	r24, 0xBC	; 188
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	fc 01       	movw	r30, r24
    238c:	80 81       	ld	r24, Z
    238e:	88 23       	and	r24, r24
    2390:	d4 f7       	brge	.-12     	; 0x2386 <i2c_readAck+0x14>

    return TWDR;
    2392:	8b eb       	ldi	r24, 0xBB	; 187
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	fc 01       	movw	r30, r24
    2398:	80 81       	ld	r24, Z

}/* i2c_readAck */
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    23a8:	8c eb       	ldi	r24, 0xBC	; 188
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	24 e8       	ldi	r18, 0x84	; 132
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
    23b2:	00 00       	nop
    23b4:	8c eb       	ldi	r24, 0xBC	; 188
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	88 23       	and	r24, r24
    23be:	d4 f7       	brge	.-12     	; 0x23b4 <i2c_readNak+0x14>
	
    return TWDR;
    23c0:	8b eb       	ldi	r24, 0xBB	; 187
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	fc 01       	movw	r30, r24
    23c6:	80 81       	ld	r24, Z

}/* i2c_readNak */
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <__subsf3>:
    23ce:	50 58       	subi	r21, 0x80	; 128

000023d0 <__addsf3>:
    23d0:	bb 27       	eor	r27, r27
    23d2:	aa 27       	eor	r26, r26
    23d4:	0e d0       	rcall	.+28     	; 0x23f2 <__addsf3x>
    23d6:	4d c1       	rjmp	.+666    	; 0x2672 <__fp_round>
    23d8:	3e d1       	rcall	.+636    	; 0x2656 <__fp_pscA>
    23da:	30 f0       	brcs	.+12     	; 0x23e8 <__addsf3+0x18>
    23dc:	43 d1       	rcall	.+646    	; 0x2664 <__fp_pscB>
    23de:	20 f0       	brcs	.+8      	; 0x23e8 <__addsf3+0x18>
    23e0:	31 f4       	brne	.+12     	; 0x23ee <__addsf3+0x1e>
    23e2:	9f 3f       	cpi	r25, 0xFF	; 255
    23e4:	11 f4       	brne	.+4      	; 0x23ea <__addsf3+0x1a>
    23e6:	1e f4       	brtc	.+6      	; 0x23ee <__addsf3+0x1e>
    23e8:	33 c1       	rjmp	.+614    	; 0x2650 <__fp_nan>
    23ea:	0e f4       	brtc	.+2      	; 0x23ee <__addsf3+0x1e>
    23ec:	e0 95       	com	r30
    23ee:	e7 fb       	bst	r30, 7
    23f0:	29 c1       	rjmp	.+594    	; 0x2644 <__fp_inf>

000023f2 <__addsf3x>:
    23f2:	e9 2f       	mov	r30, r25
    23f4:	4f d1       	rcall	.+670    	; 0x2694 <__fp_split3>
    23f6:	80 f3       	brcs	.-32     	; 0x23d8 <__addsf3+0x8>
    23f8:	ba 17       	cp	r27, r26
    23fa:	62 07       	cpc	r22, r18
    23fc:	73 07       	cpc	r23, r19
    23fe:	84 07       	cpc	r24, r20
    2400:	95 07       	cpc	r25, r21
    2402:	18 f0       	brcs	.+6      	; 0x240a <__addsf3x+0x18>
    2404:	71 f4       	brne	.+28     	; 0x2422 <__addsf3x+0x30>
    2406:	9e f5       	brtc	.+102    	; 0x246e <__addsf3x+0x7c>
    2408:	67 c1       	rjmp	.+718    	; 0x26d8 <__fp_zero>
    240a:	0e f4       	brtc	.+2      	; 0x240e <__addsf3x+0x1c>
    240c:	e0 95       	com	r30
    240e:	0b 2e       	mov	r0, r27
    2410:	ba 2f       	mov	r27, r26
    2412:	a0 2d       	mov	r26, r0
    2414:	0b 01       	movw	r0, r22
    2416:	b9 01       	movw	r22, r18
    2418:	90 01       	movw	r18, r0
    241a:	0c 01       	movw	r0, r24
    241c:	ca 01       	movw	r24, r20
    241e:	a0 01       	movw	r20, r0
    2420:	11 24       	eor	r1, r1
    2422:	ff 27       	eor	r31, r31
    2424:	59 1b       	sub	r21, r25
    2426:	99 f0       	breq	.+38     	; 0x244e <__addsf3x+0x5c>
    2428:	59 3f       	cpi	r21, 0xF9	; 249
    242a:	50 f4       	brcc	.+20     	; 0x2440 <__addsf3x+0x4e>
    242c:	50 3e       	cpi	r21, 0xE0	; 224
    242e:	68 f1       	brcs	.+90     	; 0x248a <__addsf3x+0x98>
    2430:	1a 16       	cp	r1, r26
    2432:	f0 40       	sbci	r31, 0x00	; 0
    2434:	a2 2f       	mov	r26, r18
    2436:	23 2f       	mov	r18, r19
    2438:	34 2f       	mov	r19, r20
    243a:	44 27       	eor	r20, r20
    243c:	58 5f       	subi	r21, 0xF8	; 248
    243e:	f3 cf       	rjmp	.-26     	; 0x2426 <__addsf3x+0x34>
    2440:	46 95       	lsr	r20
    2442:	37 95       	ror	r19
    2444:	27 95       	ror	r18
    2446:	a7 95       	ror	r26
    2448:	f0 40       	sbci	r31, 0x00	; 0
    244a:	53 95       	inc	r21
    244c:	c9 f7       	brne	.-14     	; 0x2440 <__addsf3x+0x4e>
    244e:	7e f4       	brtc	.+30     	; 0x246e <__addsf3x+0x7c>
    2450:	1f 16       	cp	r1, r31
    2452:	ba 0b       	sbc	r27, r26
    2454:	62 0b       	sbc	r22, r18
    2456:	73 0b       	sbc	r23, r19
    2458:	84 0b       	sbc	r24, r20
    245a:	ba f0       	brmi	.+46     	; 0x248a <__addsf3x+0x98>
    245c:	91 50       	subi	r25, 0x01	; 1
    245e:	a1 f0       	breq	.+40     	; 0x2488 <__addsf3x+0x96>
    2460:	ff 0f       	add	r31, r31
    2462:	bb 1f       	adc	r27, r27
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	c2 f7       	brpl	.-16     	; 0x245c <__addsf3x+0x6a>
    246c:	0e c0       	rjmp	.+28     	; 0x248a <__addsf3x+0x98>
    246e:	ba 0f       	add	r27, r26
    2470:	62 1f       	adc	r22, r18
    2472:	73 1f       	adc	r23, r19
    2474:	84 1f       	adc	r24, r20
    2476:	48 f4       	brcc	.+18     	; 0x248a <__addsf3x+0x98>
    2478:	87 95       	ror	r24
    247a:	77 95       	ror	r23
    247c:	67 95       	ror	r22
    247e:	b7 95       	ror	r27
    2480:	f7 95       	ror	r31
    2482:	9e 3f       	cpi	r25, 0xFE	; 254
    2484:	08 f0       	brcs	.+2      	; 0x2488 <__addsf3x+0x96>
    2486:	b3 cf       	rjmp	.-154    	; 0x23ee <__addsf3+0x1e>
    2488:	93 95       	inc	r25
    248a:	88 0f       	add	r24, r24
    248c:	08 f0       	brcs	.+2      	; 0x2490 <__addsf3x+0x9e>
    248e:	99 27       	eor	r25, r25
    2490:	ee 0f       	add	r30, r30
    2492:	97 95       	ror	r25
    2494:	87 95       	ror	r24
    2496:	08 95       	ret

00002498 <__divsf3>:
    2498:	0c d0       	rcall	.+24     	; 0x24b2 <__divsf3x>
    249a:	eb c0       	rjmp	.+470    	; 0x2672 <__fp_round>
    249c:	e3 d0       	rcall	.+454    	; 0x2664 <__fp_pscB>
    249e:	40 f0       	brcs	.+16     	; 0x24b0 <__divsf3+0x18>
    24a0:	da d0       	rcall	.+436    	; 0x2656 <__fp_pscA>
    24a2:	30 f0       	brcs	.+12     	; 0x24b0 <__divsf3+0x18>
    24a4:	21 f4       	brne	.+8      	; 0x24ae <__divsf3+0x16>
    24a6:	5f 3f       	cpi	r21, 0xFF	; 255
    24a8:	19 f0       	breq	.+6      	; 0x24b0 <__divsf3+0x18>
    24aa:	cc c0       	rjmp	.+408    	; 0x2644 <__fp_inf>
    24ac:	51 11       	cpse	r21, r1
    24ae:	15 c1       	rjmp	.+554    	; 0x26da <__fp_szero>
    24b0:	cf c0       	rjmp	.+414    	; 0x2650 <__fp_nan>

000024b2 <__divsf3x>:
    24b2:	f0 d0       	rcall	.+480    	; 0x2694 <__fp_split3>
    24b4:	98 f3       	brcs	.-26     	; 0x249c <__divsf3+0x4>

000024b6 <__divsf3_pse>:
    24b6:	99 23       	and	r25, r25
    24b8:	c9 f3       	breq	.-14     	; 0x24ac <__divsf3+0x14>
    24ba:	55 23       	and	r21, r21
    24bc:	b1 f3       	breq	.-20     	; 0x24aa <__divsf3+0x12>
    24be:	95 1b       	sub	r25, r21
    24c0:	55 0b       	sbc	r21, r21
    24c2:	bb 27       	eor	r27, r27
    24c4:	aa 27       	eor	r26, r26
    24c6:	62 17       	cp	r22, r18
    24c8:	73 07       	cpc	r23, r19
    24ca:	84 07       	cpc	r24, r20
    24cc:	38 f0       	brcs	.+14     	; 0x24dc <__divsf3_pse+0x26>
    24ce:	9f 5f       	subi	r25, 0xFF	; 255
    24d0:	5f 4f       	sbci	r21, 0xFF	; 255
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	aa 1f       	adc	r26, r26
    24da:	a9 f3       	breq	.-22     	; 0x24c6 <__divsf3_pse+0x10>
    24dc:	33 d0       	rcall	.+102    	; 0x2544 <__divsf3_pse+0x8e>
    24de:	0e 2e       	mov	r0, r30
    24e0:	3a f0       	brmi	.+14     	; 0x24f0 <__divsf3_pse+0x3a>
    24e2:	e0 e8       	ldi	r30, 0x80	; 128
    24e4:	30 d0       	rcall	.+96     	; 0x2546 <__divsf3_pse+0x90>
    24e6:	91 50       	subi	r25, 0x01	; 1
    24e8:	50 40       	sbci	r21, 0x00	; 0
    24ea:	e6 95       	lsr	r30
    24ec:	00 1c       	adc	r0, r0
    24ee:	ca f7       	brpl	.-14     	; 0x24e2 <__divsf3_pse+0x2c>
    24f0:	29 d0       	rcall	.+82     	; 0x2544 <__divsf3_pse+0x8e>
    24f2:	fe 2f       	mov	r31, r30
    24f4:	27 d0       	rcall	.+78     	; 0x2544 <__divsf3_pse+0x8e>
    24f6:	66 0f       	add	r22, r22
    24f8:	77 1f       	adc	r23, r23
    24fa:	88 1f       	adc	r24, r24
    24fc:	bb 1f       	adc	r27, r27
    24fe:	26 17       	cp	r18, r22
    2500:	37 07       	cpc	r19, r23
    2502:	48 07       	cpc	r20, r24
    2504:	ab 07       	cpc	r26, r27
    2506:	b0 e8       	ldi	r27, 0x80	; 128
    2508:	09 f0       	breq	.+2      	; 0x250c <__divsf3_pse+0x56>
    250a:	bb 0b       	sbc	r27, r27
    250c:	80 2d       	mov	r24, r0
    250e:	bf 01       	movw	r22, r30
    2510:	ff 27       	eor	r31, r31
    2512:	93 58       	subi	r25, 0x83	; 131
    2514:	5f 4f       	sbci	r21, 0xFF	; 255
    2516:	2a f0       	brmi	.+10     	; 0x2522 <__divsf3_pse+0x6c>
    2518:	9e 3f       	cpi	r25, 0xFE	; 254
    251a:	51 05       	cpc	r21, r1
    251c:	68 f0       	brcs	.+26     	; 0x2538 <__divsf3_pse+0x82>
    251e:	92 c0       	rjmp	.+292    	; 0x2644 <__fp_inf>
    2520:	dc c0       	rjmp	.+440    	; 0x26da <__fp_szero>
    2522:	5f 3f       	cpi	r21, 0xFF	; 255
    2524:	ec f3       	brlt	.-6      	; 0x2520 <__divsf3_pse+0x6a>
    2526:	98 3e       	cpi	r25, 0xE8	; 232
    2528:	dc f3       	brlt	.-10     	; 0x2520 <__divsf3_pse+0x6a>
    252a:	86 95       	lsr	r24
    252c:	77 95       	ror	r23
    252e:	67 95       	ror	r22
    2530:	b7 95       	ror	r27
    2532:	f7 95       	ror	r31
    2534:	9f 5f       	subi	r25, 0xFF	; 255
    2536:	c9 f7       	brne	.-14     	; 0x252a <__divsf3_pse+0x74>
    2538:	88 0f       	add	r24, r24
    253a:	91 1d       	adc	r25, r1
    253c:	96 95       	lsr	r25
    253e:	87 95       	ror	r24
    2540:	97 f9       	bld	r25, 7
    2542:	08 95       	ret
    2544:	e1 e0       	ldi	r30, 0x01	; 1
    2546:	66 0f       	add	r22, r22
    2548:	77 1f       	adc	r23, r23
    254a:	88 1f       	adc	r24, r24
    254c:	bb 1f       	adc	r27, r27
    254e:	62 17       	cp	r22, r18
    2550:	73 07       	cpc	r23, r19
    2552:	84 07       	cpc	r24, r20
    2554:	ba 07       	cpc	r27, r26
    2556:	20 f0       	brcs	.+8      	; 0x2560 <__divsf3_pse+0xaa>
    2558:	62 1b       	sub	r22, r18
    255a:	73 0b       	sbc	r23, r19
    255c:	84 0b       	sbc	r24, r20
    255e:	ba 0b       	sbc	r27, r26
    2560:	ee 1f       	adc	r30, r30
    2562:	88 f7       	brcc	.-30     	; 0x2546 <__divsf3_pse+0x90>
    2564:	e0 95       	com	r30
    2566:	08 95       	ret

00002568 <__fixsfsi>:
    2568:	04 d0       	rcall	.+8      	; 0x2572 <__fixunssfsi>
    256a:	68 94       	set
    256c:	b1 11       	cpse	r27, r1
    256e:	b5 c0       	rjmp	.+362    	; 0x26da <__fp_szero>
    2570:	08 95       	ret

00002572 <__fixunssfsi>:
    2572:	98 d0       	rcall	.+304    	; 0x26a4 <__fp_splitA>
    2574:	88 f0       	brcs	.+34     	; 0x2598 <__fixunssfsi+0x26>
    2576:	9f 57       	subi	r25, 0x7F	; 127
    2578:	90 f0       	brcs	.+36     	; 0x259e <__fixunssfsi+0x2c>
    257a:	b9 2f       	mov	r27, r25
    257c:	99 27       	eor	r25, r25
    257e:	b7 51       	subi	r27, 0x17	; 23
    2580:	a0 f0       	brcs	.+40     	; 0x25aa <__fixunssfsi+0x38>
    2582:	d1 f0       	breq	.+52     	; 0x25b8 <__fixunssfsi+0x46>
    2584:	66 0f       	add	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	1a f0       	brmi	.+6      	; 0x2594 <__fixunssfsi+0x22>
    258e:	ba 95       	dec	r27
    2590:	c9 f7       	brne	.-14     	; 0x2584 <__fixunssfsi+0x12>
    2592:	12 c0       	rjmp	.+36     	; 0x25b8 <__fixunssfsi+0x46>
    2594:	b1 30       	cpi	r27, 0x01	; 1
    2596:	81 f0       	breq	.+32     	; 0x25b8 <__fixunssfsi+0x46>
    2598:	9f d0       	rcall	.+318    	; 0x26d8 <__fp_zero>
    259a:	b1 e0       	ldi	r27, 0x01	; 1
    259c:	08 95       	ret
    259e:	9c c0       	rjmp	.+312    	; 0x26d8 <__fp_zero>
    25a0:	67 2f       	mov	r22, r23
    25a2:	78 2f       	mov	r23, r24
    25a4:	88 27       	eor	r24, r24
    25a6:	b8 5f       	subi	r27, 0xF8	; 248
    25a8:	39 f0       	breq	.+14     	; 0x25b8 <__fixunssfsi+0x46>
    25aa:	b9 3f       	cpi	r27, 0xF9	; 249
    25ac:	cc f3       	brlt	.-14     	; 0x25a0 <__fixunssfsi+0x2e>
    25ae:	86 95       	lsr	r24
    25b0:	77 95       	ror	r23
    25b2:	67 95       	ror	r22
    25b4:	b3 95       	inc	r27
    25b6:	d9 f7       	brne	.-10     	; 0x25ae <__fixunssfsi+0x3c>
    25b8:	3e f4       	brtc	.+14     	; 0x25c8 <__fixunssfsi+0x56>
    25ba:	90 95       	com	r25
    25bc:	80 95       	com	r24
    25be:	70 95       	com	r23
    25c0:	61 95       	neg	r22
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255
    25c4:	8f 4f       	sbci	r24, 0xFF	; 255
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	08 95       	ret

000025ca <__floatunsisf>:
    25ca:	e8 94       	clt
    25cc:	09 c0       	rjmp	.+18     	; 0x25e0 <__floatsisf+0x12>

000025ce <__floatsisf>:
    25ce:	97 fb       	bst	r25, 7
    25d0:	3e f4       	brtc	.+14     	; 0x25e0 <__floatsisf+0x12>
    25d2:	90 95       	com	r25
    25d4:	80 95       	com	r24
    25d6:	70 95       	com	r23
    25d8:	61 95       	neg	r22
    25da:	7f 4f       	sbci	r23, 0xFF	; 255
    25dc:	8f 4f       	sbci	r24, 0xFF	; 255
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	99 23       	and	r25, r25
    25e2:	a9 f0       	breq	.+42     	; 0x260e <__floatsisf+0x40>
    25e4:	f9 2f       	mov	r31, r25
    25e6:	96 e9       	ldi	r25, 0x96	; 150
    25e8:	bb 27       	eor	r27, r27
    25ea:	93 95       	inc	r25
    25ec:	f6 95       	lsr	r31
    25ee:	87 95       	ror	r24
    25f0:	77 95       	ror	r23
    25f2:	67 95       	ror	r22
    25f4:	b7 95       	ror	r27
    25f6:	f1 11       	cpse	r31, r1
    25f8:	f8 cf       	rjmp	.-16     	; 0x25ea <__floatsisf+0x1c>
    25fa:	fa f4       	brpl	.+62     	; 0x263a <__floatsisf+0x6c>
    25fc:	bb 0f       	add	r27, r27
    25fe:	11 f4       	brne	.+4      	; 0x2604 <__floatsisf+0x36>
    2600:	60 ff       	sbrs	r22, 0
    2602:	1b c0       	rjmp	.+54     	; 0x263a <__floatsisf+0x6c>
    2604:	6f 5f       	subi	r22, 0xFF	; 255
    2606:	7f 4f       	sbci	r23, 0xFF	; 255
    2608:	8f 4f       	sbci	r24, 0xFF	; 255
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	16 c0       	rjmp	.+44     	; 0x263a <__floatsisf+0x6c>
    260e:	88 23       	and	r24, r24
    2610:	11 f0       	breq	.+4      	; 0x2616 <__floatsisf+0x48>
    2612:	96 e9       	ldi	r25, 0x96	; 150
    2614:	11 c0       	rjmp	.+34     	; 0x2638 <__floatsisf+0x6a>
    2616:	77 23       	and	r23, r23
    2618:	21 f0       	breq	.+8      	; 0x2622 <__floatsisf+0x54>
    261a:	9e e8       	ldi	r25, 0x8E	; 142
    261c:	87 2f       	mov	r24, r23
    261e:	76 2f       	mov	r23, r22
    2620:	05 c0       	rjmp	.+10     	; 0x262c <__floatsisf+0x5e>
    2622:	66 23       	and	r22, r22
    2624:	71 f0       	breq	.+28     	; 0x2642 <__floatsisf+0x74>
    2626:	96 e8       	ldi	r25, 0x86	; 134
    2628:	86 2f       	mov	r24, r22
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	2a f0       	brmi	.+10     	; 0x263a <__floatsisf+0x6c>
    2630:	9a 95       	dec	r25
    2632:	66 0f       	add	r22, r22
    2634:	77 1f       	adc	r23, r23
    2636:	88 1f       	adc	r24, r24
    2638:	da f7       	brpl	.-10     	; 0x2630 <__floatsisf+0x62>
    263a:	88 0f       	add	r24, r24
    263c:	96 95       	lsr	r25
    263e:	87 95       	ror	r24
    2640:	97 f9       	bld	r25, 7
    2642:	08 95       	ret

00002644 <__fp_inf>:
    2644:	97 f9       	bld	r25, 7
    2646:	9f 67       	ori	r25, 0x7F	; 127
    2648:	80 e8       	ldi	r24, 0x80	; 128
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	08 95       	ret

00002650 <__fp_nan>:
    2650:	9f ef       	ldi	r25, 0xFF	; 255
    2652:	80 ec       	ldi	r24, 0xC0	; 192
    2654:	08 95       	ret

00002656 <__fp_pscA>:
    2656:	00 24       	eor	r0, r0
    2658:	0a 94       	dec	r0
    265a:	16 16       	cp	r1, r22
    265c:	17 06       	cpc	r1, r23
    265e:	18 06       	cpc	r1, r24
    2660:	09 06       	cpc	r0, r25
    2662:	08 95       	ret

00002664 <__fp_pscB>:
    2664:	00 24       	eor	r0, r0
    2666:	0a 94       	dec	r0
    2668:	12 16       	cp	r1, r18
    266a:	13 06       	cpc	r1, r19
    266c:	14 06       	cpc	r1, r20
    266e:	05 06       	cpc	r0, r21
    2670:	08 95       	ret

00002672 <__fp_round>:
    2672:	09 2e       	mov	r0, r25
    2674:	03 94       	inc	r0
    2676:	00 0c       	add	r0, r0
    2678:	11 f4       	brne	.+4      	; 0x267e <__fp_round+0xc>
    267a:	88 23       	and	r24, r24
    267c:	52 f0       	brmi	.+20     	; 0x2692 <__fp_round+0x20>
    267e:	bb 0f       	add	r27, r27
    2680:	40 f4       	brcc	.+16     	; 0x2692 <__fp_round+0x20>
    2682:	bf 2b       	or	r27, r31
    2684:	11 f4       	brne	.+4      	; 0x268a <__fp_round+0x18>
    2686:	60 ff       	sbrs	r22, 0
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <__fp_round+0x20>
    268a:	6f 5f       	subi	r22, 0xFF	; 255
    268c:	7f 4f       	sbci	r23, 0xFF	; 255
    268e:	8f 4f       	sbci	r24, 0xFF	; 255
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	08 95       	ret

00002694 <__fp_split3>:
    2694:	57 fd       	sbrc	r21, 7
    2696:	90 58       	subi	r25, 0x80	; 128
    2698:	44 0f       	add	r20, r20
    269a:	55 1f       	adc	r21, r21
    269c:	59 f0       	breq	.+22     	; 0x26b4 <__fp_splitA+0x10>
    269e:	5f 3f       	cpi	r21, 0xFF	; 255
    26a0:	71 f0       	breq	.+28     	; 0x26be <__fp_splitA+0x1a>
    26a2:	47 95       	ror	r20

000026a4 <__fp_splitA>:
    26a4:	88 0f       	add	r24, r24
    26a6:	97 fb       	bst	r25, 7
    26a8:	99 1f       	adc	r25, r25
    26aa:	61 f0       	breq	.+24     	; 0x26c4 <__fp_splitA+0x20>
    26ac:	9f 3f       	cpi	r25, 0xFF	; 255
    26ae:	79 f0       	breq	.+30     	; 0x26ce <__fp_splitA+0x2a>
    26b0:	87 95       	ror	r24
    26b2:	08 95       	ret
    26b4:	12 16       	cp	r1, r18
    26b6:	13 06       	cpc	r1, r19
    26b8:	14 06       	cpc	r1, r20
    26ba:	55 1f       	adc	r21, r21
    26bc:	f2 cf       	rjmp	.-28     	; 0x26a2 <__fp_split3+0xe>
    26be:	46 95       	lsr	r20
    26c0:	f1 df       	rcall	.-30     	; 0x26a4 <__fp_splitA>
    26c2:	08 c0       	rjmp	.+16     	; 0x26d4 <__fp_splitA+0x30>
    26c4:	16 16       	cp	r1, r22
    26c6:	17 06       	cpc	r1, r23
    26c8:	18 06       	cpc	r1, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	f1 cf       	rjmp	.-30     	; 0x26b0 <__fp_splitA+0xc>
    26ce:	86 95       	lsr	r24
    26d0:	71 05       	cpc	r23, r1
    26d2:	61 05       	cpc	r22, r1
    26d4:	08 94       	sec
    26d6:	08 95       	ret

000026d8 <__fp_zero>:
    26d8:	e8 94       	clt

000026da <__fp_szero>:
    26da:	bb 27       	eor	r27, r27
    26dc:	66 27       	eor	r22, r22
    26de:	77 27       	eor	r23, r23
    26e0:	cb 01       	movw	r24, r22
    26e2:	97 f9       	bld	r25, 7
    26e4:	08 95       	ret

000026e6 <__mulsf3>:
    26e6:	0b d0       	rcall	.+22     	; 0x26fe <__mulsf3x>
    26e8:	c4 cf       	rjmp	.-120    	; 0x2672 <__fp_round>
    26ea:	b5 df       	rcall	.-150    	; 0x2656 <__fp_pscA>
    26ec:	28 f0       	brcs	.+10     	; 0x26f8 <__mulsf3+0x12>
    26ee:	ba df       	rcall	.-140    	; 0x2664 <__fp_pscB>
    26f0:	18 f0       	brcs	.+6      	; 0x26f8 <__mulsf3+0x12>
    26f2:	95 23       	and	r25, r21
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <__mulsf3+0x12>
    26f6:	a6 cf       	rjmp	.-180    	; 0x2644 <__fp_inf>
    26f8:	ab cf       	rjmp	.-170    	; 0x2650 <__fp_nan>
    26fa:	11 24       	eor	r1, r1
    26fc:	ee cf       	rjmp	.-36     	; 0x26da <__fp_szero>

000026fe <__mulsf3x>:
    26fe:	ca df       	rcall	.-108    	; 0x2694 <__fp_split3>
    2700:	a0 f3       	brcs	.-24     	; 0x26ea <__mulsf3+0x4>

00002702 <__mulsf3_pse>:
    2702:	95 9f       	mul	r25, r21
    2704:	d1 f3       	breq	.-12     	; 0x26fa <__mulsf3+0x14>
    2706:	95 0f       	add	r25, r21
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	55 1f       	adc	r21, r21
    270c:	62 9f       	mul	r22, r18
    270e:	f0 01       	movw	r30, r0
    2710:	72 9f       	mul	r23, r18
    2712:	bb 27       	eor	r27, r27
    2714:	f0 0d       	add	r31, r0
    2716:	b1 1d       	adc	r27, r1
    2718:	63 9f       	mul	r22, r19
    271a:	aa 27       	eor	r26, r26
    271c:	f0 0d       	add	r31, r0
    271e:	b1 1d       	adc	r27, r1
    2720:	aa 1f       	adc	r26, r26
    2722:	64 9f       	mul	r22, r20
    2724:	66 27       	eor	r22, r22
    2726:	b0 0d       	add	r27, r0
    2728:	a1 1d       	adc	r26, r1
    272a:	66 1f       	adc	r22, r22
    272c:	82 9f       	mul	r24, r18
    272e:	22 27       	eor	r18, r18
    2730:	b0 0d       	add	r27, r0
    2732:	a1 1d       	adc	r26, r1
    2734:	62 1f       	adc	r22, r18
    2736:	73 9f       	mul	r23, r19
    2738:	b0 0d       	add	r27, r0
    273a:	a1 1d       	adc	r26, r1
    273c:	62 1f       	adc	r22, r18
    273e:	83 9f       	mul	r24, r19
    2740:	a0 0d       	add	r26, r0
    2742:	61 1d       	adc	r22, r1
    2744:	22 1f       	adc	r18, r18
    2746:	74 9f       	mul	r23, r20
    2748:	33 27       	eor	r19, r19
    274a:	a0 0d       	add	r26, r0
    274c:	61 1d       	adc	r22, r1
    274e:	23 1f       	adc	r18, r19
    2750:	84 9f       	mul	r24, r20
    2752:	60 0d       	add	r22, r0
    2754:	21 1d       	adc	r18, r1
    2756:	82 2f       	mov	r24, r18
    2758:	76 2f       	mov	r23, r22
    275a:	6a 2f       	mov	r22, r26
    275c:	11 24       	eor	r1, r1
    275e:	9f 57       	subi	r25, 0x7F	; 127
    2760:	50 40       	sbci	r21, 0x00	; 0
    2762:	8a f0       	brmi	.+34     	; 0x2786 <__mulsf3_pse+0x84>
    2764:	e1 f0       	breq	.+56     	; 0x279e <__mulsf3_pse+0x9c>
    2766:	88 23       	and	r24, r24
    2768:	4a f0       	brmi	.+18     	; 0x277c <__mulsf3_pse+0x7a>
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	bb 1f       	adc	r27, r27
    2770:	66 1f       	adc	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	88 1f       	adc	r24, r24
    2776:	91 50       	subi	r25, 0x01	; 1
    2778:	50 40       	sbci	r21, 0x00	; 0
    277a:	a9 f7       	brne	.-22     	; 0x2766 <__mulsf3_pse+0x64>
    277c:	9e 3f       	cpi	r25, 0xFE	; 254
    277e:	51 05       	cpc	r21, r1
    2780:	70 f0       	brcs	.+28     	; 0x279e <__mulsf3_pse+0x9c>
    2782:	60 cf       	rjmp	.-320    	; 0x2644 <__fp_inf>
    2784:	aa cf       	rjmp	.-172    	; 0x26da <__fp_szero>
    2786:	5f 3f       	cpi	r21, 0xFF	; 255
    2788:	ec f3       	brlt	.-6      	; 0x2784 <__mulsf3_pse+0x82>
    278a:	98 3e       	cpi	r25, 0xE8	; 232
    278c:	dc f3       	brlt	.-10     	; 0x2784 <__mulsf3_pse+0x82>
    278e:	86 95       	lsr	r24
    2790:	77 95       	ror	r23
    2792:	67 95       	ror	r22
    2794:	b7 95       	ror	r27
    2796:	f7 95       	ror	r31
    2798:	e7 95       	ror	r30
    279a:	9f 5f       	subi	r25, 0xFF	; 255
    279c:	c1 f7       	brne	.-16     	; 0x278e <__mulsf3_pse+0x8c>
    279e:	fe 2b       	or	r31, r30
    27a0:	88 0f       	add	r24, r24
    27a2:	91 1d       	adc	r25, r1
    27a4:	96 95       	lsr	r25
    27a6:	87 95       	ror	r24
    27a8:	97 f9       	bld	r25, 7
    27aa:	08 95       	ret

000027ac <__tablejump2__>:
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31

000027b0 <__tablejump__>:
    27b0:	05 90       	lpm	r0, Z+
    27b2:	f4 91       	lpm	r31, Z
    27b4:	e0 2d       	mov	r30, r0
    27b6:	09 94       	ijmp

000027b8 <_exit>:
    27b8:	f8 94       	cli

000027ba <__stop_program>:
    27ba:	ff cf       	rjmp	.-2      	; 0x27ba <__stop_program>
