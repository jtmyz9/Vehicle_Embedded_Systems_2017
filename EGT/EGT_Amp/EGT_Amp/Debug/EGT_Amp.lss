
EGT_Amp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e70  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001459  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e72  00000000  00000000  00002435  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e00  00000000  00000000  000032a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000845  00000000  00000000  00004264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c6a  00000000  00000000  00004aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00005713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  7c:	21 01       	movw	r4, r2
  7e:	b3 01       	movw	r22, r6
  80:	2d 02       	muls	r18, r29
  82:	91 02       	muls	r25, r17
  84:	ce 02       	muls	r28, r30
  86:	15 03       	mulsu	r17, r21
  88:	60 03       	mulsu	r22, r16
  8a:	eb 03       	fmulsu	r22, r19
  8c:	80 04       	cpc	r8, r0
  8e:	1c 01       	movw	r2, r24
  90:	76 05       	cpc	r23, r6

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61
  9e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <main>
  a2:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	ad ee       	ldi	r26, 0xED	; 237
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	3e ee       	ldi	r19, 0xEE	; 238
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	98 2f       	mov	r25, r24
  b6:	92 95       	swap	r25
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	9c 93       	st	X, r25
  bc:	e3 2f       	mov	r30, r19
  be:	f2 2f       	mov	r31, r18
  c0:	11 92       	st	Z+, r1
  c2:	e8 3f       	cpi	r30, 0xF8	; 248
  c4:	f1 05       	cpc	r31, r1
  c6:	e1 f7       	brne	.-8      	; 0xc0 <can_clear_all_mob+0x16>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	86 30       	cpi	r24, 0x06	; 6
  cc:	99 f7       	brne	.-26     	; 0xb4 <can_clear_all_mob+0xa>
  ce:	08 95       	ret

000000d0 <can_get_mob_free>:
  d0:	ed ee       	ldi	r30, 0xED	; 237
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	20 81       	ld	r18, Z
  d6:	10 82       	st	Z, r1
  d8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
  dc:	80 7c       	andi	r24, 0xC0	; 192
  de:	69 f0       	breq	.+26     	; 0xfa <can_get_mob_free+0x2a>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	ad ee       	ldi	r26, 0xED	; 237
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	ef ee       	ldi	r30, 0xEF	; 239
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	98 2f       	mov	r25, r24
  ec:	92 95       	swap	r25
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	9c 93       	st	X, r25
  f2:	90 81       	ld	r25, Z
  f4:	90 7c       	andi	r25, 0xC0	; 192
  f6:	29 f4       	brne	.+10     	; 0x102 <can_get_mob_free+0x32>
  f8:	01 c0       	rjmp	.+2      	; 0xfc <can_get_mob_free+0x2c>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 100:	08 95       	ret
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	86 30       	cpi	r24, 0x06	; 6
 106:	89 f7       	brne	.-30     	; 0xea <can_get_mob_free+0x1a>
 108:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	08 95       	ret

00000110 <can_get_mob_status>:
 110:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 114:	80 7c       	andi	r24, 0xC0	; 192
 116:	61 f0       	breq	.+24     	; 0x130 <can_get_mob_status+0x20>
 118:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 11c:	98 2f       	mov	r25, r24
 11e:	90 7e       	andi	r25, 0xE0	; 224
 120:	90 32       	cpi	r25, 0x20	; 32
 122:	41 f0       	breq	.+16     	; 0x134 <can_get_mob_status+0x24>
 124:	90 34       	cpi	r25, 0x40	; 64
 126:	41 f0       	breq	.+16     	; 0x138 <can_get_mob_status+0x28>
 128:	90 3a       	cpi	r25, 0xA0	; 160
 12a:	41 f0       	breq	.+16     	; 0x13c <can_get_mob_status+0x2c>
 12c:	8f 71       	andi	r24, 0x1F	; 31
 12e:	08 95       	ret
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	08 95       	ret
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	08 95       	ret
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	08 95       	ret
 13c:	80 ea       	ldi	r24, 0xA0	; 160
 13e:	08 95       	ret

00000140 <can_get_data>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	bc 01       	movw	r22, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	99 f0       	breq	.+38     	; 0x174 <can_get_data+0x34>
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ca ef       	ldi	r28, 0xFA	; 250
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	af ee       	ldi	r26, 0xEF	; 239
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	28 81       	ld	r18, Y
 15a:	fb 01       	movw	r30, r22
 15c:	e9 0f       	add	r30, r25
 15e:	f1 1d       	adc	r31, r1
 160:	20 83       	st	Z, r18
 162:	9f 5f       	subi	r25, 0xFF	; 255
 164:	2c 91       	ld	r18, X
 166:	49 2f       	mov	r20, r25
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	2f 70       	andi	r18, 0x0F	; 15
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	42 17       	cp	r20, r18
 170:	53 07       	cpc	r21, r19
 172:	94 f3       	brlt	.-28     	; 0x158 <can_get_data+0x18>
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 18c:	83 e1       	ldi	r24, 0x13	; 19
 18e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret

00000196 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 196:	0e 94 bd 00 	call	0x17a	; 0x17a <can_fixed_baudrate>
 19a:	88 23       	and	r24, r24
 19c:	41 f0       	breq	.+16     	; 0x1ae <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 19e:	0e 94 55 00 	call	0xaa	; 0xaa <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 1a2:	e8 ed       	ldi	r30, 0xD8	; 216
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
    return (1);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
}
 1ae:	08 95       	ret

000001b0 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <can_cmd+0xa>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <can_cmd+0xc>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	fc 01       	movw	r30, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 1c2:	81 81       	ldd	r24, Z+1	; 0x01
 1c4:	8c 30       	cpi	r24, 0x0C	; 12
 1c6:	99 f4       	brne	.+38     	; 0x1ee <can_cmd+0x3e>
  {
    if (cmd->status == MOB_PENDING)
 1c8:	81 85       	ldd	r24, Z+9	; 0x09
 1ca:	80 36       	cpi	r24, 0x60	; 96
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <can_cmd+0x38>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 1ce:	80 81       	ld	r24, Z
 1d0:	82 95       	swap	r24
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
      Can_mob_abort();
 1d8:	af ee       	ldi	r26, 0xEF	; 239
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	8c 91       	ld	r24, X
 1de:	8f 73       	andi	r24, 0x3F	; 63
 1e0:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
 1e2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
      cmd->handle = 0;
 1e6:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
 1e8:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	38 c5       	rjmp	.+2672   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
 1ee:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 1f0:	0e 94 68 00 	call	0xd0	; 0xd0 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 1f4:	8f 3f       	cpi	r24, 0xFF	; 255
 1f6:	09 f4       	brne	.+2      	; 0x1fa <can_cmd+0x4a>
 1f8:	2d c5       	rjmp	.+2650   	; 0xc54 <__LOCK_REGION_LENGTH__+0x854>
    {
      cmd->status = MOB_PENDING; 
 1fa:	90 e6       	ldi	r25, 0x60	; 96
 1fc:	d8 01       	movw	r26, r16
 1fe:	19 96       	adiw	r26, 0x09	; 9
 200:	9c 93       	st	X, r25
 202:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 204:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 206:	82 95       	swap	r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
      Can_clear_mob();
 20e:	ee ee       	ldi	r30, 0xEE	; 238
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	11 92       	st	Z+, r1
 214:	e8 3f       	cpi	r30, 0xF8	; 248
 216:	f1 05       	cpc	r31, r1
 218:	e1 f7       	brne	.-8      	; 0x212 <can_cmd+0x62>
          
      switch (cmd->cmd)
 21a:	d8 01       	movw	r26, r16
 21c:	11 96       	adiw	r26, 0x01	; 1
 21e:	ec 91       	ld	r30, X
 220:	8e 2f       	mov	r24, r30
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	eb 30       	cpi	r30, 0x0B	; 11
 22a:	f1 05       	cpc	r31, r1
 22c:	08 f0       	brcs	.+2      	; 0x230 <can_cmd+0x80>
 22e:	0e c5       	rjmp	.+2588   	; 0xc4c <__LOCK_REGION_LENGTH__+0x84c>
 230:	e2 5c       	subi	r30, 0xC2	; 194
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 238:	f8 01       	movw	r30, r16
 23a:	86 81       	ldd	r24, Z+6	; 0x06
 23c:	81 11       	cpse	r24, r1
 23e:	f9 c3       	rjmp	.+2034   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
 240:	0a c4       	rjmp	.+2068   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 242:	d8 01       	movw	r26, r16
 244:	1b 96       	adiw	r26, 0x0b	; 11
 246:	8c 91       	ld	r24, X
 248:	1b 97       	sbiw	r26, 0x0b	; 11
 24a:	88 23       	and	r24, r24
 24c:	e9 f1       	breq	.+122    	; 0x2c8 <can_cmd+0x118>
 24e:	14 96       	adiw	r26, 0x04	; 4
 250:	8c 91       	ld	r24, X
 252:	14 97       	sbiw	r26, 0x04	; 4
 254:	98 2f       	mov	r25, r24
 256:	92 95       	swap	r25
 258:	96 95       	lsr	r25
 25a:	97 70       	andi	r25, 0x07	; 7
 25c:	15 96       	adiw	r26, 0x05	; 5
 25e:	8c 91       	ld	r24, X
 260:	15 97       	sbiw	r26, 0x05	; 5
 262:	88 0f       	add	r24, r24
 264:	88 0f       	add	r24, r24
 266:	88 0f       	add	r24, r24
 268:	89 0f       	add	r24, r25
 26a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 26e:	13 96       	adiw	r26, 0x03	; 3
 270:	8c 91       	ld	r24, X
 272:	13 97       	sbiw	r26, 0x03	; 3
 274:	98 2f       	mov	r25, r24
 276:	92 95       	swap	r25
 278:	96 95       	lsr	r25
 27a:	97 70       	andi	r25, 0x07	; 7
 27c:	14 96       	adiw	r26, 0x04	; 4
 27e:	8c 91       	ld	r24, X
 280:	14 97       	sbiw	r26, 0x04	; 4
 282:	88 0f       	add	r24, r24
 284:	88 0f       	add	r24, r24
 286:	88 0f       	add	r24, r24
 288:	89 0f       	add	r24, r25
 28a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 28e:	12 96       	adiw	r26, 0x02	; 2
 290:	8c 91       	ld	r24, X
 292:	12 97       	sbiw	r26, 0x02	; 2
 294:	98 2f       	mov	r25, r24
 296:	92 95       	swap	r25
 298:	96 95       	lsr	r25
 29a:	97 70       	andi	r25, 0x07	; 7
 29c:	13 96       	adiw	r26, 0x03	; 3
 29e:	8c 91       	ld	r24, X
 2a0:	13 97       	sbiw	r26, 0x03	; 3
 2a2:	88 0f       	add	r24, r24
 2a4:	88 0f       	add	r24, r24
 2a6:	88 0f       	add	r24, r24
 2a8:	89 0f       	add	r24, r25
 2aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 2ae:	12 96       	adiw	r26, 0x02	; 2
 2b0:	8c 91       	ld	r24, X
 2b2:	88 0f       	add	r24, r24
 2b4:	88 0f       	add	r24, r24
 2b6:	88 0f       	add	r24, r24
 2b8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 2bc:	ef ee       	ldi	r30, 0xEF	; 239
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	80 83       	st	Z, r24
 2c6:	19 c0       	rjmp	.+50     	; 0x2fa <can_cmd+0x14a>
          else              { Can_set_std_id(cmd->id.std);}
 2c8:	f8 01       	movw	r30, r16
 2ca:	82 81       	ldd	r24, Z+2	; 0x02
 2cc:	86 95       	lsr	r24
 2ce:	86 95       	lsr	r24
 2d0:	86 95       	lsr	r24
 2d2:	93 81       	ldd	r25, Z+3	; 0x03
 2d4:	f0 e2       	ldi	r31, 0x20	; 32
 2d6:	9f 9f       	mul	r25, r31
 2d8:	80 0d       	add	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 2e0:	d8 01       	movw	r26, r16
 2e2:	12 96       	adiw	r26, 0x02	; 2
 2e4:	8c 91       	ld	r24, X
 2e6:	82 95       	swap	r24
 2e8:	88 0f       	add	r24, r24
 2ea:	80 7e       	andi	r24, 0xE0	; 224
 2ec:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 2f0:	ef ee       	ldi	r30, 0xEF	; 239
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	8f 7e       	andi	r24, 0xEF	; 239
 2f8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 2fa:	f8 01       	movw	r30, r16
 2fc:	86 81       	ldd	r24, Z+6	; 0x06
 2fe:	88 23       	and	r24, r24
 300:	91 f0       	breq	.+36     	; 0x326 <can_cmd+0x176>
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	2a ef       	ldi	r18, 0xFA	; 250
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	d8 01       	movw	r26, r16
 30a:	17 96       	adiw	r26, 0x07	; 7
 30c:	ed 91       	ld	r30, X+
 30e:	fc 91       	ld	r31, X
 310:	18 97       	sbiw	r26, 0x08	; 8
 312:	e8 0f       	add	r30, r24
 314:	f1 1d       	adc	r31, r1
 316:	90 81       	ld	r25, Z
 318:	f9 01       	movw	r30, r18
 31a:	90 83       	st	Z, r25
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	16 96       	adiw	r26, 0x06	; 6
 320:	9c 91       	ld	r25, X
 322:	89 17       	cp	r24, r25
 324:	88 f3       	brcs	.-30     	; 0x308 <can_cmd+0x158>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 326:	d8 01       	movw	r26, r16
 328:	1a 96       	adiw	r26, 0x0a	; 10
 32a:	8c 91       	ld	r24, X
 32c:	88 23       	and	r24, r24
 32e:	31 f0       	breq	.+12     	; 0x33c <can_cmd+0x18c>
 330:	e0 ef       	ldi	r30, 0xF0	; 240
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	84 60       	ori	r24, 0x04	; 4
 338:	80 83       	st	Z, r24
 33a:	05 c0       	rjmp	.+10     	; 0x346 <can_cmd+0x196>
            else Can_clear_rtr();    
 33c:	e0 ef       	ldi	r30, 0xF0	; 240
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	8b 7f       	andi	r24, 0xFB	; 251
 344:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 346:	ef ee       	ldi	r30, 0xEF	; 239
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	90 81       	ld	r25, Z
 34c:	d8 01       	movw	r26, r16
 34e:	16 96       	adiw	r26, 0x06	; 6
 350:	8c 91       	ld	r24, X
 352:	89 2b       	or	r24, r25
 354:	80 83       	st	Z, r24
          Can_config_tx();
 356:	80 81       	ld	r24, Z
 358:	8f 73       	andi	r24, 0x3F	; 63
 35a:	80 83       	st	Z, r24
 35c:	80 81       	ld	r24, Z
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 362:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 364:	7c c4       	rjmp	.+2296   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 366:	f8 01       	movw	r30, r16
 368:	83 85       	ldd	r24, Z+11	; 0x0b
 36a:	88 23       	and	r24, r24
 36c:	81 f1       	breq	.+96     	; 0x3ce <can_cmd+0x21e>
 36e:	84 81       	ldd	r24, Z+4	; 0x04
 370:	98 2f       	mov	r25, r24
 372:	92 95       	swap	r25
 374:	96 95       	lsr	r25
 376:	97 70       	andi	r25, 0x07	; 7
 378:	85 81       	ldd	r24, Z+5	; 0x05
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	88 0f       	add	r24, r24
 380:	89 0f       	add	r24, r25
 382:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 386:	83 81       	ldd	r24, Z+3	; 0x03
 388:	98 2f       	mov	r25, r24
 38a:	92 95       	swap	r25
 38c:	96 95       	lsr	r25
 38e:	97 70       	andi	r25, 0x07	; 7
 390:	84 81       	ldd	r24, Z+4	; 0x04
 392:	88 0f       	add	r24, r24
 394:	88 0f       	add	r24, r24
 396:	88 0f       	add	r24, r24
 398:	89 0f       	add	r24, r25
 39a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 39e:	82 81       	ldd	r24, Z+2	; 0x02
 3a0:	98 2f       	mov	r25, r24
 3a2:	92 95       	swap	r25
 3a4:	96 95       	lsr	r25
 3a6:	97 70       	andi	r25, 0x07	; 7
 3a8:	83 81       	ldd	r24, Z+3	; 0x03
 3aa:	88 0f       	add	r24, r24
 3ac:	88 0f       	add	r24, r24
 3ae:	88 0f       	add	r24, r24
 3b0:	89 0f       	add	r24, r25
 3b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 3b6:	82 81       	ldd	r24, Z+2	; 0x02
 3b8:	88 0f       	add	r24, r24
 3ba:	88 0f       	add	r24, r24
 3bc:	88 0f       	add	r24, r24
 3be:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3c2:	ef ee       	ldi	r30, 0xEF	; 239
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	80 61       	ori	r24, 0x10	; 16
 3ca:	80 83       	st	Z, r24
 3cc:	17 c0       	rjmp	.+46     	; 0x3fc <can_cmd+0x24c>
          else              { Can_set_std_id(cmd->id.std);}
 3ce:	82 81       	ldd	r24, Z+2	; 0x02
 3d0:	86 95       	lsr	r24
 3d2:	86 95       	lsr	r24
 3d4:	86 95       	lsr	r24
 3d6:	93 81       	ldd	r25, Z+3	; 0x03
 3d8:	b0 e2       	ldi	r27, 0x20	; 32
 3da:	9b 9f       	mul	r25, r27
 3dc:	80 0d       	add	r24, r0
 3de:	11 24       	eor	r1, r1
 3e0:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 3e4:	f8 01       	movw	r30, r16
 3e6:	82 81       	ldd	r24, Z+2	; 0x02
 3e8:	82 95       	swap	r24
 3ea:	88 0f       	add	r24, r24
 3ec:	80 7e       	andi	r24, 0xE0	; 224
 3ee:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 3f2:	ef ee       	ldi	r30, 0xEF	; 239
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	8f 7e       	andi	r24, 0xEF	; 239
 3fa:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 3fc:	d8 01       	movw	r26, r16
 3fe:	16 96       	adiw	r26, 0x06	; 6
 400:	8c 91       	ld	r24, X
 402:	88 23       	and	r24, r24
 404:	91 f0       	breq	.+36     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	2a ef       	ldi	r18, 0xFA	; 250
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	d8 01       	movw	r26, r16
 40e:	17 96       	adiw	r26, 0x07	; 7
 410:	ed 91       	ld	r30, X+
 412:	fc 91       	ld	r31, X
 414:	18 97       	sbiw	r26, 0x08	; 8
 416:	e8 0f       	add	r30, r24
 418:	f1 1d       	adc	r31, r1
 41a:	90 81       	ld	r25, Z
 41c:	f9 01       	movw	r30, r18
 41e:	90 83       	st	Z, r25
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	16 96       	adiw	r26, 0x06	; 6
 424:	9c 91       	ld	r25, X
 426:	89 17       	cp	r24, r25
 428:	88 f3       	brcs	.-30     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 42a:	d8 01       	movw	r26, r16
 42c:	1a 96       	adiw	r26, 0x0a	; 10
 42e:	1c 92       	st	X, r1
 430:	1a 97       	sbiw	r26, 0x0a	; 10
 432:	e0 ef       	ldi	r30, 0xF0	; 240
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	8b 7f       	andi	r24, 0xFB	; 251
 43a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 43c:	ef ee       	ldi	r30, 0xEF	; 239
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	90 81       	ld	r25, Z
 442:	16 96       	adiw	r26, 0x06	; 6
 444:	8c 91       	ld	r24, X
 446:	89 2b       	or	r24, r25
 448:	80 83       	st	Z, r24
          Can_config_tx();
 44a:	80 81       	ld	r24, Z
 44c:	8f 73       	andi	r24, 0x3F	; 63
 44e:	80 83       	st	Z, r24
 450:	80 81       	ld	r24, Z
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 456:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 458:	02 c4       	rjmp	.+2052   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 45a:	f8 01       	movw	r30, r16
 45c:	83 85       	ldd	r24, Z+11	; 0x0b
 45e:	88 23       	and	r24, r24
 460:	81 f1       	breq	.+96     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 462:	84 81       	ldd	r24, Z+4	; 0x04
 464:	98 2f       	mov	r25, r24
 466:	92 95       	swap	r25
 468:	96 95       	lsr	r25
 46a:	97 70       	andi	r25, 0x07	; 7
 46c:	85 81       	ldd	r24, Z+5	; 0x05
 46e:	88 0f       	add	r24, r24
 470:	88 0f       	add	r24, r24
 472:	88 0f       	add	r24, r24
 474:	89 0f       	add	r24, r25
 476:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 47a:	83 81       	ldd	r24, Z+3	; 0x03
 47c:	98 2f       	mov	r25, r24
 47e:	92 95       	swap	r25
 480:	96 95       	lsr	r25
 482:	97 70       	andi	r25, 0x07	; 7
 484:	84 81       	ldd	r24, Z+4	; 0x04
 486:	88 0f       	add	r24, r24
 488:	88 0f       	add	r24, r24
 48a:	88 0f       	add	r24, r24
 48c:	89 0f       	add	r24, r25
 48e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	98 2f       	mov	r25, r24
 496:	92 95       	swap	r25
 498:	96 95       	lsr	r25
 49a:	97 70       	andi	r25, 0x07	; 7
 49c:	83 81       	ldd	r24, Z+3	; 0x03
 49e:	88 0f       	add	r24, r24
 4a0:	88 0f       	add	r24, r24
 4a2:	88 0f       	add	r24, r24
 4a4:	89 0f       	add	r24, r25
 4a6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	88 0f       	add	r24, r24
 4ae:	88 0f       	add	r24, r24
 4b0:	88 0f       	add	r24, r24
 4b2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 4b6:	ef ee       	ldi	r30, 0xEF	; 239
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	80 61       	ori	r24, 0x10	; 16
 4be:	80 83       	st	Z, r24
 4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
          else              { Can_set_std_id(cmd->id.std);}
 4c2:	82 81       	ldd	r24, Z+2	; 0x02
 4c4:	86 95       	lsr	r24
 4c6:	86 95       	lsr	r24
 4c8:	86 95       	lsr	r24
 4ca:	93 81       	ldd	r25, Z+3	; 0x03
 4cc:	b0 e2       	ldi	r27, 0x20	; 32
 4ce:	9b 9f       	mul	r25, r27
 4d0:	80 0d       	add	r24, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 4d8:	f8 01       	movw	r30, r16
 4da:	82 81       	ldd	r24, Z+2	; 0x02
 4dc:	82 95       	swap	r24
 4de:	88 0f       	add	r24, r24
 4e0:	80 7e       	andi	r24, 0xE0	; 224
 4e2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 4e6:	ef ee       	ldi	r30, 0xEF	; 239
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	8f 7e       	andi	r24, 0xEF	; 239
 4ee:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	d8 01       	movw	r26, r16
 4f4:	1a 96       	adiw	r26, 0x0a	; 10
 4f6:	8c 93       	st	X, r24
 4f8:	1a 97       	sbiw	r26, 0x0a	; 10
 4fa:	e0 ef       	ldi	r30, 0xF0	; 240
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	84 60       	ori	r24, 0x04	; 4
 502:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 504:	ef ee       	ldi	r30, 0xEF	; 239
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	90 81       	ld	r25, Z
 50a:	16 96       	adiw	r26, 0x06	; 6
 50c:	8c 91       	ld	r24, X
 50e:	89 2b       	or	r24, r25
 510:	80 83       	st	Z, r24
          Can_config_tx();
 512:	80 81       	ld	r24, Z
 514:	8f 73       	andi	r24, 0x3F	; 63
 516:	80 83       	st	Z, r24
 518:	80 81       	ld	r24, Z
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 51e:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 520:	9e c3       	rjmp	.+1852   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 522:	19 82       	std	Y+1, r1	; 0x01
 524:	1a 82       	std	Y+2, r1	; 0x02
 526:	1b 82       	std	Y+3, r1	; 0x03
 528:	1c 82       	std	Y+4, r1	; 0x04
 52a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 52e:	8a 81       	ldd	r24, Y+2	; 0x02
 530:	98 2f       	mov	r25, r24
 532:	92 95       	swap	r25
 534:	96 95       	lsr	r25
 536:	97 70       	andi	r25, 0x07	; 7
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	88 0f       	add	r24, r24
 53c:	88 0f       	add	r24, r24
 53e:	88 0f       	add	r24, r24
 540:	89 0f       	add	r24, r25
 542:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	98 2f       	mov	r25, r24
 54a:	92 95       	swap	r25
 54c:	96 95       	lsr	r25
 54e:	97 70       	andi	r25, 0x07	; 7
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	88 0f       	add	r24, r24
 554:	88 0f       	add	r24, r24
 556:	88 0f       	add	r24, r24
 558:	89 0f       	add	r24, r25
 55a:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	88 0f       	add	r24, r24
 562:	88 0f       	add	r24, r24
 564:	88 0f       	add	r24, r24
 566:	24 ef       	ldi	r18, 0xF4	; 244
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 56e:	ef ee       	ldi	r30, 0xEF	; 239
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	90 81       	ld	r25, Z
 574:	d8 01       	movw	r26, r16
 576:	16 96       	adiw	r26, 0x06	; 6
 578:	8c 91       	ld	r24, X
 57a:	89 2b       	or	r24, r25
 57c:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 57e:	d9 01       	movw	r26, r18
 580:	8c 91       	ld	r24, X
 582:	8b 7f       	andi	r24, 0xFB	; 251
 584:	8c 93       	st	X, r24
          Can_clear_idemsk();
 586:	8c 91       	ld	r24, X
 588:	8e 7f       	andi	r24, 0xFE	; 254
 58a:	8c 93       	st	X, r24
          Can_config_rx();       
 58c:	80 81       	ld	r24, Z
 58e:	8f 73       	andi	r24, 0x3F	; 63
 590:	80 83       	st	Z, r24
 592:	80 81       	ld	r24, Z
 594:	80 68       	ori	r24, 0x80	; 128
 596:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 598:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 59a:	61 c3       	rjmp	.+1730   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 59c:	19 82       	std	Y+1, r1	; 0x01
 59e:	1a 82       	std	Y+2, r1	; 0x02
 5a0:	1b 82       	std	Y+3, r1	; 0x03
 5a2:	1c 82       	std	Y+4, r1	; 0x04
 5a4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	98 2f       	mov	r25, r24
 5ac:	92 95       	swap	r25
 5ae:	96 95       	lsr	r25
 5b0:	97 70       	andi	r25, 0x07	; 7
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	88 0f       	add	r24, r24
 5b6:	88 0f       	add	r24, r24
 5b8:	88 0f       	add	r24, r24
 5ba:	89 0f       	add	r24, r25
 5bc:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	98 2f       	mov	r25, r24
 5c4:	92 95       	swap	r25
 5c6:	96 95       	lsr	r25
 5c8:	97 70       	andi	r25, 0x07	; 7
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	88 0f       	add	r24, r24
 5ce:	88 0f       	add	r24, r24
 5d0:	88 0f       	add	r24, r24
 5d2:	89 0f       	add	r24, r25
 5d4:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	88 0f       	add	r24, r24
 5dc:	88 0f       	add	r24, r24
 5de:	88 0f       	add	r24, r24
 5e0:	44 ef       	ldi	r20, 0xF4	; 244
 5e2:	50 e0       	ldi	r21, 0x00	; 0
 5e4:	fa 01       	movw	r30, r20
 5e6:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 5e8:	ef ee       	ldi	r30, 0xEF	; 239
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	90 81       	ld	r25, Z
 5ee:	d8 01       	movw	r26, r16
 5f0:	16 96       	adiw	r26, 0x06	; 6
 5f2:	8c 91       	ld	r24, X
 5f4:	16 97       	sbiw	r26, 0x06	; 6
 5f6:	89 2b       	or	r24, r25
 5f8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 5fa:	1a 96       	adiw	r26, 0x0a	; 10
 5fc:	1c 92       	st	X, r1
 5fe:	da 01       	movw	r26, r20
 600:	8c 91       	ld	r24, X
 602:	84 60       	ori	r24, 0x04	; 4
 604:	8c 93       	st	X, r24
 606:	20 ef       	ldi	r18, 0xF0	; 240
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	d9 01       	movw	r26, r18
 60c:	8c 91       	ld	r24, X
 60e:	8b 7f       	andi	r24, 0xFB	; 251
 610:	8c 93       	st	X, r24
          Can_clear_idemsk();
 612:	da 01       	movw	r26, r20
 614:	8c 91       	ld	r24, X
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	8c 93       	st	X, r24
          Can_config_rx();       
 61a:	80 81       	ld	r24, Z
 61c:	8f 73       	andi	r24, 0x3F	; 63
 61e:	80 83       	st	Z, r24
 620:	80 81       	ld	r24, Z
 622:	80 68       	ori	r24, 0x80	; 128
 624:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 626:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 628:	1a c3       	rjmp	.+1588   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 62a:	19 82       	std	Y+1, r1	; 0x01
 62c:	1a 82       	std	Y+2, r1	; 0x02
 62e:	1b 82       	std	Y+3, r1	; 0x03
 630:	1c 82       	std	Y+4, r1	; 0x04
 632:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	98 2f       	mov	r25, r24
 63a:	92 95       	swap	r25
 63c:	96 95       	lsr	r25
 63e:	97 70       	andi	r25, 0x07	; 7
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	88 0f       	add	r24, r24
 644:	88 0f       	add	r24, r24
 646:	88 0f       	add	r24, r24
 648:	89 0f       	add	r24, r25
 64a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	98 2f       	mov	r25, r24
 652:	92 95       	swap	r25
 654:	96 95       	lsr	r25
 656:	97 70       	andi	r25, 0x07	; 7
 658:	8a 81       	ldd	r24, Y+2	; 0x02
 65a:	88 0f       	add	r24, r24
 65c:	88 0f       	add	r24, r24
 65e:	88 0f       	add	r24, r24
 660:	89 0f       	add	r24, r25
 662:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	88 0f       	add	r24, r24
 66a:	88 0f       	add	r24, r24
 66c:	88 0f       	add	r24, r24
 66e:	44 ef       	ldi	r20, 0xF4	; 244
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	fa 01       	movw	r30, r20
 674:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 676:	ef ee       	ldi	r30, 0xEF	; 239
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	90 81       	ld	r25, Z
 67c:	d8 01       	movw	r26, r16
 67e:	16 96       	adiw	r26, 0x06	; 6
 680:	8c 91       	ld	r24, X
 682:	16 97       	sbiw	r26, 0x06	; 6
 684:	89 2b       	or	r24, r25
 686:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	1a 96       	adiw	r26, 0x0a	; 10
 68c:	8c 93       	st	X, r24
 68e:	da 01       	movw	r26, r20
 690:	8c 91       	ld	r24, X
 692:	84 60       	ori	r24, 0x04	; 4
 694:	8c 93       	st	X, r24
 696:	20 ef       	ldi	r18, 0xF0	; 240
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	d9 01       	movw	r26, r18
 69c:	8c 91       	ld	r24, X
 69e:	84 60       	ori	r24, 0x04	; 4
 6a0:	8c 93       	st	X, r24
          Can_clear_rplv();
 6a2:	80 81       	ld	r24, Z
 6a4:	8f 7d       	andi	r24, 0xDF	; 223
 6a6:	80 83       	st	Z, r24
          Can_clear_idemsk();
 6a8:	da 01       	movw	r26, r20
 6aa:	8c 91       	ld	r24, X
 6ac:	8e 7f       	andi	r24, 0xFE	; 254
 6ae:	8c 93       	st	X, r24
          Can_config_rx();       
 6b0:	80 81       	ld	r24, Z
 6b2:	8f 73       	andi	r24, 0x3F	; 63
 6b4:	80 83       	st	Z, r24
 6b6:	80 81       	ld	r24, Z
 6b8:	80 68       	ori	r24, 0x80	; 128
 6ba:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 6be:	cf c2       	rjmp	.+1438   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 6c0:	f8 01       	movw	r30, r16
 6c2:	83 85       	ldd	r24, Z+11	; 0x0b
 6c4:	88 23       	and	r24, r24
 6c6:	81 f1       	breq	.+96     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 6c8:	84 81       	ldd	r24, Z+4	; 0x04
 6ca:	98 2f       	mov	r25, r24
 6cc:	92 95       	swap	r25
 6ce:	96 95       	lsr	r25
 6d0:	97 70       	andi	r25, 0x07	; 7
 6d2:	85 81       	ldd	r24, Z+5	; 0x05
 6d4:	88 0f       	add	r24, r24
 6d6:	88 0f       	add	r24, r24
 6d8:	88 0f       	add	r24, r24
 6da:	89 0f       	add	r24, r25
 6dc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 6e0:	83 81       	ldd	r24, Z+3	; 0x03
 6e2:	98 2f       	mov	r25, r24
 6e4:	92 95       	swap	r25
 6e6:	96 95       	lsr	r25
 6e8:	97 70       	andi	r25, 0x07	; 7
 6ea:	84 81       	ldd	r24, Z+4	; 0x04
 6ec:	88 0f       	add	r24, r24
 6ee:	88 0f       	add	r24, r24
 6f0:	88 0f       	add	r24, r24
 6f2:	89 0f       	add	r24, r25
 6f4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6f8:	82 81       	ldd	r24, Z+2	; 0x02
 6fa:	98 2f       	mov	r25, r24
 6fc:	92 95       	swap	r25
 6fe:	96 95       	lsr	r25
 700:	97 70       	andi	r25, 0x07	; 7
 702:	83 81       	ldd	r24, Z+3	; 0x03
 704:	88 0f       	add	r24, r24
 706:	88 0f       	add	r24, r24
 708:	88 0f       	add	r24, r24
 70a:	89 0f       	add	r24, r25
 70c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 710:	82 81       	ldd	r24, Z+2	; 0x02
 712:	88 0f       	add	r24, r24
 714:	88 0f       	add	r24, r24
 716:	88 0f       	add	r24, r24
 718:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 71c:	ef ee       	ldi	r30, 0xEF	; 239
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	80 61       	ori	r24, 0x10	; 16
 724:	80 83       	st	Z, r24
 726:	17 c0       	rjmp	.+46     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
          else              { Can_set_std_id(cmd->id.std);}
 728:	82 81       	ldd	r24, Z+2	; 0x02
 72a:	86 95       	lsr	r24
 72c:	86 95       	lsr	r24
 72e:	86 95       	lsr	r24
 730:	93 81       	ldd	r25, Z+3	; 0x03
 732:	b0 e2       	ldi	r27, 0x20	; 32
 734:	9b 9f       	mul	r25, r27
 736:	80 0d       	add	r24, r0
 738:	11 24       	eor	r1, r1
 73a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 73e:	f8 01       	movw	r30, r16
 740:	82 81       	ldd	r24, Z+2	; 0x02
 742:	82 95       	swap	r24
 744:	88 0f       	add	r24, r24
 746:	80 7e       	andi	r24, 0xE0	; 224
 748:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 74c:	ef ee       	ldi	r30, 0xEF	; 239
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	8f 7e       	andi	r24, 0xEF	; 239
 754:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	9f ef       	ldi	r25, 0xFF	; 255
 75a:	dc 01       	movw	r26, r24
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	9a 83       	std	Y+2, r25	; 0x02
 760:	ab 83       	std	Y+3, r26	; 0x03
 762:	bc 83       	std	Y+4, r27	; 0x04
 764:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	98 2f       	mov	r25, r24
 76c:	92 95       	swap	r25
 76e:	96 95       	lsr	r25
 770:	97 70       	andi	r25, 0x07	; 7
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	88 0f       	add	r24, r24
 776:	88 0f       	add	r24, r24
 778:	88 0f       	add	r24, r24
 77a:	89 0f       	add	r24, r25
 77c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	98 2f       	mov	r25, r24
 784:	92 95       	swap	r25
 786:	96 95       	lsr	r25
 788:	97 70       	andi	r25, 0x07	; 7
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	88 0f       	add	r24, r24
 78e:	88 0f       	add	r24, r24
 790:	88 0f       	add	r24, r24
 792:	89 0f       	add	r24, r25
 794:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	88 0f       	add	r24, r24
 79c:	88 0f       	add	r24, r24
 79e:	88 0f       	add	r24, r24
 7a0:	24 ef       	ldi	r18, 0xF4	; 244
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	d9 01       	movw	r26, r18
 7a6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 7a8:	ef ee       	ldi	r30, 0xEF	; 239
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	90 81       	ld	r25, Z
 7ae:	d8 01       	movw	r26, r16
 7b0:	16 96       	adiw	r26, 0x06	; 6
 7b2:	8c 91       	ld	r24, X
 7b4:	89 2b       	or	r24, r25
 7b6:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 7b8:	d9 01       	movw	r26, r18
 7ba:	8c 91       	ld	r24, X
 7bc:	8b 7f       	andi	r24, 0xFB	; 251
 7be:	8c 93       	st	X, r24
          Can_set_idemsk();
 7c0:	8c 91       	ld	r24, X
 7c2:	81 60       	ori	r24, 0x01	; 1
 7c4:	8c 93       	st	X, r24
          Can_config_rx();       
 7c6:	80 81       	ld	r24, Z
 7c8:	8f 73       	andi	r24, 0x3F	; 63
 7ca:	80 83       	st	Z, r24
 7cc:	80 81       	ld	r24, Z
 7ce:	80 68       	ori	r24, 0x80	; 128
 7d0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 7d2:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 7d4:	44 c2       	rjmp	.+1160   	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 7d6:	f8 01       	movw	r30, r16
 7d8:	83 85       	ldd	r24, Z+11	; 0x0b
 7da:	88 23       	and	r24, r24
 7dc:	81 f1       	breq	.+96     	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
 7de:	84 81       	ldd	r24, Z+4	; 0x04
 7e0:	98 2f       	mov	r25, r24
 7e2:	92 95       	swap	r25
 7e4:	96 95       	lsr	r25
 7e6:	97 70       	andi	r25, 0x07	; 7
 7e8:	85 81       	ldd	r24, Z+5	; 0x05
 7ea:	88 0f       	add	r24, r24
 7ec:	88 0f       	add	r24, r24
 7ee:	88 0f       	add	r24, r24
 7f0:	89 0f       	add	r24, r25
 7f2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 7f6:	83 81       	ldd	r24, Z+3	; 0x03
 7f8:	98 2f       	mov	r25, r24
 7fa:	92 95       	swap	r25
 7fc:	96 95       	lsr	r25
 7fe:	97 70       	andi	r25, 0x07	; 7
 800:	84 81       	ldd	r24, Z+4	; 0x04
 802:	88 0f       	add	r24, r24
 804:	88 0f       	add	r24, r24
 806:	88 0f       	add	r24, r24
 808:	89 0f       	add	r24, r25
 80a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 80e:	82 81       	ldd	r24, Z+2	; 0x02
 810:	98 2f       	mov	r25, r24
 812:	92 95       	swap	r25
 814:	96 95       	lsr	r25
 816:	97 70       	andi	r25, 0x07	; 7
 818:	83 81       	ldd	r24, Z+3	; 0x03
 81a:	88 0f       	add	r24, r24
 81c:	88 0f       	add	r24, r24
 81e:	88 0f       	add	r24, r24
 820:	89 0f       	add	r24, r25
 822:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 826:	82 81       	ldd	r24, Z+2	; 0x02
 828:	88 0f       	add	r24, r24
 82a:	88 0f       	add	r24, r24
 82c:	88 0f       	add	r24, r24
 82e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 832:	ef ee       	ldi	r30, 0xEF	; 239
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	80 61       	ori	r24, 0x10	; 16
 83a:	80 83       	st	Z, r24
 83c:	17 c0       	rjmp	.+46     	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
          else              { Can_set_std_id(cmd->id.std);}
 83e:	82 81       	ldd	r24, Z+2	; 0x02
 840:	86 95       	lsr	r24
 842:	86 95       	lsr	r24
 844:	86 95       	lsr	r24
 846:	93 81       	ldd	r25, Z+3	; 0x03
 848:	b0 e2       	ldi	r27, 0x20	; 32
 84a:	9b 9f       	mul	r25, r27
 84c:	80 0d       	add	r24, r0
 84e:	11 24       	eor	r1, r1
 850:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 854:	f8 01       	movw	r30, r16
 856:	82 81       	ldd	r24, Z+2	; 0x02
 858:	82 95       	swap	r24
 85a:	88 0f       	add	r24, r24
 85c:	80 7e       	andi	r24, 0xE0	; 224
 85e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 862:	ef ee       	ldi	r30, 0xEF	; 239
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	8f 7e       	andi	r24, 0xEF	; 239
 86a:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	9f ef       	ldi	r25, 0xFF	; 255
 870:	dc 01       	movw	r26, r24
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	9a 83       	std	Y+2, r25	; 0x02
 876:	ab 83       	std	Y+3, r26	; 0x03
 878:	bc 83       	std	Y+4, r27	; 0x04
 87a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 87e:	8a 81       	ldd	r24, Y+2	; 0x02
 880:	98 2f       	mov	r25, r24
 882:	92 95       	swap	r25
 884:	96 95       	lsr	r25
 886:	97 70       	andi	r25, 0x07	; 7
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	88 0f       	add	r24, r24
 88c:	88 0f       	add	r24, r24
 88e:	88 0f       	add	r24, r24
 890:	89 0f       	add	r24, r25
 892:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 896:	89 81       	ldd	r24, Y+1	; 0x01
 898:	98 2f       	mov	r25, r24
 89a:	92 95       	swap	r25
 89c:	96 95       	lsr	r25
 89e:	97 70       	andi	r25, 0x07	; 7
 8a0:	8a 81       	ldd	r24, Y+2	; 0x02
 8a2:	88 0f       	add	r24, r24
 8a4:	88 0f       	add	r24, r24
 8a6:	88 0f       	add	r24, r24
 8a8:	89 0f       	add	r24, r25
 8aa:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	88 0f       	add	r24, r24
 8b2:	88 0f       	add	r24, r24
 8b4:	88 0f       	add	r24, r24
 8b6:	44 ef       	ldi	r20, 0xF4	; 244
 8b8:	50 e0       	ldi	r21, 0x00	; 0
 8ba:	da 01       	movw	r26, r20
 8bc:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 8be:	ef ee       	ldi	r30, 0xEF	; 239
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	90 81       	ld	r25, Z
 8c4:	d8 01       	movw	r26, r16
 8c6:	16 96       	adiw	r26, 0x06	; 6
 8c8:	8c 91       	ld	r24, X
 8ca:	16 97       	sbiw	r26, 0x06	; 6
 8cc:	89 2b       	or	r24, r25
 8ce:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 8d0:	1a 96       	adiw	r26, 0x0a	; 10
 8d2:	1c 92       	st	X, r1
 8d4:	da 01       	movw	r26, r20
 8d6:	8c 91       	ld	r24, X
 8d8:	84 60       	ori	r24, 0x04	; 4
 8da:	8c 93       	st	X, r24
 8dc:	20 ef       	ldi	r18, 0xF0	; 240
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	d9 01       	movw	r26, r18
 8e2:	8c 91       	ld	r24, X
 8e4:	8b 7f       	andi	r24, 0xFB	; 251
 8e6:	8c 93       	st	X, r24
          Can_set_idemsk();
 8e8:	da 01       	movw	r26, r20
 8ea:	8c 91       	ld	r24, X
 8ec:	81 60       	ori	r24, 0x01	; 1
 8ee:	8c 93       	st	X, r24
          Can_config_rx();       
 8f0:	80 81       	ld	r24, Z
 8f2:	8f 73       	andi	r24, 0x3F	; 63
 8f4:	80 83       	st	Z, r24
 8f6:	80 81       	ld	r24, Z
 8f8:	80 68       	ori	r24, 0x80	; 128
 8fa:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 8fe:	af c1       	rjmp	.+862    	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 900:	f8 01       	movw	r30, r16
 902:	83 85       	ldd	r24, Z+11	; 0x0b
 904:	88 23       	and	r24, r24
 906:	81 f1       	breq	.+96     	; 0x968 <__LOCK_REGION_LENGTH__+0x568>
 908:	84 81       	ldd	r24, Z+4	; 0x04
 90a:	98 2f       	mov	r25, r24
 90c:	92 95       	swap	r25
 90e:	96 95       	lsr	r25
 910:	97 70       	andi	r25, 0x07	; 7
 912:	85 81       	ldd	r24, Z+5	; 0x05
 914:	88 0f       	add	r24, r24
 916:	88 0f       	add	r24, r24
 918:	88 0f       	add	r24, r24
 91a:	89 0f       	add	r24, r25
 91c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 920:	83 81       	ldd	r24, Z+3	; 0x03
 922:	98 2f       	mov	r25, r24
 924:	92 95       	swap	r25
 926:	96 95       	lsr	r25
 928:	97 70       	andi	r25, 0x07	; 7
 92a:	84 81       	ldd	r24, Z+4	; 0x04
 92c:	88 0f       	add	r24, r24
 92e:	88 0f       	add	r24, r24
 930:	88 0f       	add	r24, r24
 932:	89 0f       	add	r24, r25
 934:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	98 2f       	mov	r25, r24
 93c:	92 95       	swap	r25
 93e:	96 95       	lsr	r25
 940:	97 70       	andi	r25, 0x07	; 7
 942:	83 81       	ldd	r24, Z+3	; 0x03
 944:	88 0f       	add	r24, r24
 946:	88 0f       	add	r24, r24
 948:	88 0f       	add	r24, r24
 94a:	89 0f       	add	r24, r25
 94c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	88 0f       	add	r24, r24
 954:	88 0f       	add	r24, r24
 956:	88 0f       	add	r24, r24
 958:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 95c:	ef ee       	ldi	r30, 0xEF	; 239
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	80 61       	ori	r24, 0x10	; 16
 964:	80 83       	st	Z, r24
 966:	17 c0       	rjmp	.+46     	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
          else              { Can_set_std_id(cmd->id.std);}
 968:	82 81       	ldd	r24, Z+2	; 0x02
 96a:	86 95       	lsr	r24
 96c:	86 95       	lsr	r24
 96e:	86 95       	lsr	r24
 970:	93 81       	ldd	r25, Z+3	; 0x03
 972:	b0 e2       	ldi	r27, 0x20	; 32
 974:	9b 9f       	mul	r25, r27
 976:	80 0d       	add	r24, r0
 978:	11 24       	eor	r1, r1
 97a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 97e:	f8 01       	movw	r30, r16
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	82 95       	swap	r24
 984:	88 0f       	add	r24, r24
 986:	80 7e       	andi	r24, 0xE0	; 224
 988:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 98c:	ef ee       	ldi	r30, 0xEF	; 239
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
 992:	8f 7e       	andi	r24, 0xEF	; 239
 994:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	dc 01       	movw	r26, r24
 99c:	89 83       	std	Y+1, r24	; 0x01
 99e:	9a 83       	std	Y+2, r25	; 0x02
 9a0:	ab 83       	std	Y+3, r26	; 0x03
 9a2:	bc 83       	std	Y+4, r27	; 0x04
 9a4:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	98 2f       	mov	r25, r24
 9ac:	92 95       	swap	r25
 9ae:	96 95       	lsr	r25
 9b0:	97 70       	andi	r25, 0x07	; 7
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	88 0f       	add	r24, r24
 9b6:	88 0f       	add	r24, r24
 9b8:	88 0f       	add	r24, r24
 9ba:	89 0f       	add	r24, r25
 9bc:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	98 2f       	mov	r25, r24
 9c4:	92 95       	swap	r25
 9c6:	96 95       	lsr	r25
 9c8:	97 70       	andi	r25, 0x07	; 7
 9ca:	8a 81       	ldd	r24, Y+2	; 0x02
 9cc:	88 0f       	add	r24, r24
 9ce:	88 0f       	add	r24, r24
 9d0:	88 0f       	add	r24, r24
 9d2:	89 0f       	add	r24, r25
 9d4:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	88 0f       	add	r24, r24
 9dc:	88 0f       	add	r24, r24
 9de:	88 0f       	add	r24, r24
 9e0:	44 ef       	ldi	r20, 0xF4	; 244
 9e2:	50 e0       	ldi	r21, 0x00	; 0
 9e4:	da 01       	movw	r26, r20
 9e6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 9e8:	ef ee       	ldi	r30, 0xEF	; 239
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	90 81       	ld	r25, Z
 9ee:	d8 01       	movw	r26, r16
 9f0:	16 96       	adiw	r26, 0x06	; 6
 9f2:	8c 91       	ld	r24, X
 9f4:	16 97       	sbiw	r26, 0x06	; 6
 9f6:	89 2b       	or	r24, r25
 9f8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	1a 96       	adiw	r26, 0x0a	; 10
 9fe:	8c 93       	st	X, r24
 a00:	da 01       	movw	r26, r20
 a02:	8c 91       	ld	r24, X
 a04:	84 60       	ori	r24, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	20 ef       	ldi	r18, 0xF0	; 240
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	d9 01       	movw	r26, r18
 a0e:	8c 91       	ld	r24, X
 a10:	84 60       	ori	r24, 0x04	; 4
 a12:	8c 93       	st	X, r24
          Can_clear_rplv();
 a14:	80 81       	ld	r24, Z
 a16:	8f 7d       	andi	r24, 0xDF	; 223
 a18:	80 83       	st	Z, r24
          Can_set_idemsk();
 a1a:	da 01       	movw	r26, r20
 a1c:	8c 91       	ld	r24, X
 a1e:	81 60       	ori	r24, 0x01	; 1
 a20:	8c 93       	st	X, r24
          Can_config_rx();       
 a22:	80 81       	ld	r24, Z
 a24:	8f 73       	andi	r24, 0x3F	; 63
 a26:	80 83       	st	Z, r24
 a28:	80 81       	ld	r24, Z
 a2a:	80 68       	ori	r24, 0x80	; 128
 a2c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a2e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 a30:	16 c1       	rjmp	.+556    	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 a32:	80 e0       	ldi	r24, 0x00	; 0
 a34:	2a ef       	ldi	r18, 0xFA	; 250
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	d8 01       	movw	r26, r16
 a3a:	17 96       	adiw	r26, 0x07	; 7
 a3c:	ed 91       	ld	r30, X+
 a3e:	fc 91       	ld	r31, X
 a40:	18 97       	sbiw	r26, 0x08	; 8
 a42:	e8 0f       	add	r30, r24
 a44:	f1 1d       	adc	r31, r1
 a46:	90 81       	ld	r25, Z
 a48:	f9 01       	movw	r30, r18
 a4a:	90 83       	st	Z, r25
 a4c:	8f 5f       	subi	r24, 0xFF	; 255
 a4e:	16 96       	adiw	r26, 0x06	; 6
 a50:	9c 91       	ld	r25, X
 a52:	89 17       	cp	r24, r25
 a54:	88 f3       	brcs	.-30     	; 0xa38 <__LOCK_REGION_LENGTH__+0x638>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 a56:	19 82       	std	Y+1, r1	; 0x01
 a58:	1a 82       	std	Y+2, r1	; 0x02
 a5a:	1b 82       	std	Y+3, r1	; 0x03
 a5c:	1c 82       	std	Y+4, r1	; 0x04
 a5e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 a62:	8a 81       	ldd	r24, Y+2	; 0x02
 a64:	98 2f       	mov	r25, r24
 a66:	92 95       	swap	r25
 a68:	96 95       	lsr	r25
 a6a:	97 70       	andi	r25, 0x07	; 7
 a6c:	8b 81       	ldd	r24, Y+3	; 0x03
 a6e:	88 0f       	add	r24, r24
 a70:	88 0f       	add	r24, r24
 a72:	88 0f       	add	r24, r24
 a74:	89 0f       	add	r24, r25
 a76:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	98 2f       	mov	r25, r24
 a7e:	92 95       	swap	r25
 a80:	96 95       	lsr	r25
 a82:	97 70       	andi	r25, 0x07	; 7
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	88 0f       	add	r24, r24
 a88:	88 0f       	add	r24, r24
 a8a:	88 0f       	add	r24, r24
 a8c:	89 0f       	add	r24, r25
 a8e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	88 0f       	add	r24, r24
 a96:	88 0f       	add	r24, r24
 a98:	88 0f       	add	r24, r24
 a9a:	44 ef       	ldi	r20, 0xF4	; 244
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	da 01       	movw	r26, r20
 aa0:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 aa2:	ef ee       	ldi	r30, 0xEF	; 239
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	90 81       	ld	r25, Z
 aa8:	d8 01       	movw	r26, r16
 aaa:	16 96       	adiw	r26, 0x06	; 6
 aac:	8c 91       	ld	r24, X
 aae:	16 97       	sbiw	r26, 0x06	; 6
 ab0:	89 2b       	or	r24, r25
 ab2:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	1a 96       	adiw	r26, 0x0a	; 10
 ab8:	8c 93       	st	X, r24
 aba:	da 01       	movw	r26, r20
 abc:	8c 91       	ld	r24, X
 abe:	84 60       	ori	r24, 0x04	; 4
 ac0:	8c 93       	st	X, r24
 ac2:	20 ef       	ldi	r18, 0xF0	; 240
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	d9 01       	movw	r26, r18
 ac8:	8c 91       	ld	r24, X
 aca:	84 60       	ori	r24, 0x04	; 4
 acc:	8c 93       	st	X, r24
          Can_set_rplv();
 ace:	80 81       	ld	r24, Z
 ad0:	80 62       	ori	r24, 0x20	; 32
 ad2:	80 83       	st	Z, r24
          Can_clear_idemsk();
 ad4:	da 01       	movw	r26, r20
 ad6:	8c 91       	ld	r24, X
 ad8:	8e 7f       	andi	r24, 0xFE	; 254
 ada:	8c 93       	st	X, r24
          Can_config_rx();       
 adc:	80 81       	ld	r24, Z
 ade:	8f 73       	andi	r24, 0x3F	; 63
 ae0:	80 83       	st	Z, r24
 ae2:	80 81       	ld	r24, Z
 ae4:	80 68       	ori	r24, 0x80	; 128
 ae6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 ae8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 aea:	b9 c0       	rjmp	.+370    	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 aec:	f8 01       	movw	r30, r16
 aee:	83 85       	ldd	r24, Z+11	; 0x0b
 af0:	88 23       	and	r24, r24
 af2:	81 f1       	breq	.+96     	; 0xb54 <__LOCK_REGION_LENGTH__+0x754>
 af4:	84 81       	ldd	r24, Z+4	; 0x04
 af6:	98 2f       	mov	r25, r24
 af8:	92 95       	swap	r25
 afa:	96 95       	lsr	r25
 afc:	97 70       	andi	r25, 0x07	; 7
 afe:	85 81       	ldd	r24, Z+5	; 0x05
 b00:	88 0f       	add	r24, r24
 b02:	88 0f       	add	r24, r24
 b04:	88 0f       	add	r24, r24
 b06:	89 0f       	add	r24, r25
 b08:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b0c:	83 81       	ldd	r24, Z+3	; 0x03
 b0e:	98 2f       	mov	r25, r24
 b10:	92 95       	swap	r25
 b12:	96 95       	lsr	r25
 b14:	97 70       	andi	r25, 0x07	; 7
 b16:	84 81       	ldd	r24, Z+4	; 0x04
 b18:	88 0f       	add	r24, r24
 b1a:	88 0f       	add	r24, r24
 b1c:	88 0f       	add	r24, r24
 b1e:	89 0f       	add	r24, r25
 b20:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b24:	82 81       	ldd	r24, Z+2	; 0x02
 b26:	98 2f       	mov	r25, r24
 b28:	92 95       	swap	r25
 b2a:	96 95       	lsr	r25
 b2c:	97 70       	andi	r25, 0x07	; 7
 b2e:	83 81       	ldd	r24, Z+3	; 0x03
 b30:	88 0f       	add	r24, r24
 b32:	88 0f       	add	r24, r24
 b34:	88 0f       	add	r24, r24
 b36:	89 0f       	add	r24, r25
 b38:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b3c:	82 81       	ldd	r24, Z+2	; 0x02
 b3e:	88 0f       	add	r24, r24
 b40:	88 0f       	add	r24, r24
 b42:	88 0f       	add	r24, r24
 b44:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 b48:	ef ee       	ldi	r30, 0xEF	; 239
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	80 81       	ld	r24, Z
 b4e:	80 61       	ori	r24, 0x10	; 16
 b50:	80 83       	st	Z, r24
 b52:	17 c0       	rjmp	.+46     	; 0xb82 <__LOCK_REGION_LENGTH__+0x782>
          else              { Can_set_std_id(cmd->id.std);}
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	86 95       	lsr	r24
 b58:	86 95       	lsr	r24
 b5a:	86 95       	lsr	r24
 b5c:	93 81       	ldd	r25, Z+3	; 0x03
 b5e:	b0 e2       	ldi	r27, 0x20	; 32
 b60:	9b 9f       	mul	r25, r27
 b62:	80 0d       	add	r24, r0
 b64:	11 24       	eor	r1, r1
 b66:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b6a:	f8 01       	movw	r30, r16
 b6c:	82 81       	ldd	r24, Z+2	; 0x02
 b6e:	82 95       	swap	r24
 b70:	88 0f       	add	r24, r24
 b72:	80 7e       	andi	r24, 0xE0	; 224
 b74:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b78:	ef ee       	ldi	r30, 0xEF	; 239
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	8f 7e       	andi	r24, 0xEF	; 239
 b80:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 b82:	d8 01       	movw	r26, r16
 b84:	16 96       	adiw	r26, 0x06	; 6
 b86:	8c 91       	ld	r24, X
 b88:	88 23       	and	r24, r24
 b8a:	91 f0       	breq	.+36     	; 0xbb0 <__LOCK_REGION_LENGTH__+0x7b0>
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	2a ef       	ldi	r18, 0xFA	; 250
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	d8 01       	movw	r26, r16
 b94:	17 96       	adiw	r26, 0x07	; 7
 b96:	ed 91       	ld	r30, X+
 b98:	fc 91       	ld	r31, X
 b9a:	18 97       	sbiw	r26, 0x08	; 8
 b9c:	e8 0f       	add	r30, r24
 b9e:	f1 1d       	adc	r31, r1
 ba0:	90 81       	ld	r25, Z
 ba2:	f9 01       	movw	r30, r18
 ba4:	90 83       	st	Z, r25
 ba6:	8f 5f       	subi	r24, 0xFF	; 255
 ba8:	16 96       	adiw	r26, 0x06	; 6
 baa:	9c 91       	ld	r25, X
 bac:	89 17       	cp	r24, r25
 bae:	88 f3       	brcs	.-30     	; 0xb92 <__LOCK_REGION_LENGTH__+0x792>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 bb0:	8f ef       	ldi	r24, 0xFF	; 255
 bb2:	9f ef       	ldi	r25, 0xFF	; 255
 bb4:	dc 01       	movw	r26, r24
 bb6:	89 83       	std	Y+1, r24	; 0x01
 bb8:	9a 83       	std	Y+2, r25	; 0x02
 bba:	ab 83       	std	Y+3, r26	; 0x03
 bbc:	bc 83       	std	Y+4, r27	; 0x04
 bbe:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 bc2:	8a 81       	ldd	r24, Y+2	; 0x02
 bc4:	98 2f       	mov	r25, r24
 bc6:	92 95       	swap	r25
 bc8:	96 95       	lsr	r25
 bca:	97 70       	andi	r25, 0x07	; 7
 bcc:	8b 81       	ldd	r24, Y+3	; 0x03
 bce:	88 0f       	add	r24, r24
 bd0:	88 0f       	add	r24, r24
 bd2:	88 0f       	add	r24, r24
 bd4:	89 0f       	add	r24, r25
 bd6:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 bda:	89 81       	ldd	r24, Y+1	; 0x01
 bdc:	98 2f       	mov	r25, r24
 bde:	92 95       	swap	r25
 be0:	96 95       	lsr	r25
 be2:	97 70       	andi	r25, 0x07	; 7
 be4:	8a 81       	ldd	r24, Y+2	; 0x02
 be6:	88 0f       	add	r24, r24
 be8:	88 0f       	add	r24, r24
 bea:	88 0f       	add	r24, r24
 bec:	89 0f       	add	r24, r25
 bee:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 bf2:	89 81       	ldd	r24, Y+1	; 0x01
 bf4:	88 0f       	add	r24, r24
 bf6:	88 0f       	add	r24, r24
 bf8:	88 0f       	add	r24, r24
 bfa:	44 ef       	ldi	r20, 0xF4	; 244
 bfc:	50 e0       	ldi	r21, 0x00	; 0
 bfe:	da 01       	movw	r26, r20
 c00:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 c02:	ef ee       	ldi	r30, 0xEF	; 239
 c04:	f0 e0       	ldi	r31, 0x00	; 0
 c06:	90 81       	ld	r25, Z
 c08:	d8 01       	movw	r26, r16
 c0a:	16 96       	adiw	r26, 0x06	; 6
 c0c:	8c 91       	ld	r24, X
 c0e:	16 97       	sbiw	r26, 0x06	; 6
 c10:	89 2b       	or	r24, r25
 c12:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 c14:	81 e0       	ldi	r24, 0x01	; 1
 c16:	1a 96       	adiw	r26, 0x0a	; 10
 c18:	8c 93       	st	X, r24
 c1a:	da 01       	movw	r26, r20
 c1c:	8c 91       	ld	r24, X
 c1e:	84 60       	ori	r24, 0x04	; 4
 c20:	8c 93       	st	X, r24
 c22:	20 ef       	ldi	r18, 0xF0	; 240
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	d9 01       	movw	r26, r18
 c28:	8c 91       	ld	r24, X
 c2a:	84 60       	ori	r24, 0x04	; 4
 c2c:	8c 93       	st	X, r24
          Can_set_rplv();
 c2e:	80 81       	ld	r24, Z
 c30:	80 62       	ori	r24, 0x20	; 32
 c32:	80 83       	st	Z, r24
          Can_set_idemsk();
 c34:	da 01       	movw	r26, r20
 c36:	8c 91       	ld	r24, X
 c38:	81 60       	ori	r24, 0x01	; 1
 c3a:	8c 93       	st	X, r24
          Can_config_rx();       
 c3c:	80 81       	ld	r24, Z
 c3e:	8f 73       	andi	r24, 0x3F	; 63
 c40:	80 83       	st	Z, r24
 c42:	80 81       	ld	r24, Z
 c44:	80 68       	ori	r24, 0x80	; 128
 c46:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c48:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 c4a:	09 c0       	rjmp	.+18     	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 c4c:	f8 01       	movw	r30, r16
 c4e:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c50:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 c52:	05 c0       	rjmp	.+10     	; 0xc5e <__LOCK_REGION_LENGTH__+0x85e>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 c54:	8f e1       	ldi	r24, 0x1F	; 31
 c56:	d8 01       	movw	r26, r16
 c58:	19 96       	adiw	r26, 0x09	; 9
 c5a:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 c5c:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 c5e:	0f 90       	pop	r0
 c60:	0f 90       	pop	r0
 c62:	0f 90       	pop	r0
 c64:	0f 90       	pop	r0
 c66:	df 91       	pop	r29
 c68:	cf 91       	pop	r28
 c6a:	1f 91       	pop	r17
 c6c:	0f 91       	pop	r16
 c6e:	08 95       	ret

00000c70 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
 c70:	ef 92       	push	r14
 c72:	ff 92       	push	r15
 c74:	1f 93       	push	r17
 c76:	cf 93       	push	r28
 c78:	df 93       	push	r29
 c7a:	fc 01       	movw	r30, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
 c7c:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 c7e:	99 23       	and	r25, r25
 c80:	09 f4       	brne	.+2      	; 0xc84 <can_get_status+0x14>
 c82:	92 c0       	rjmp	.+292    	; 0xda8 <can_get_status+0x138>
 c84:	9f 31       	cpi	r25, 0x1F	; 31
 c86:	09 f4       	brne	.+2      	; 0xc8a <can_get_status+0x1a>
 c88:	91 c0       	rjmp	.+290    	; 0xdac <can_get_status+0x13c>
 c8a:	9f 3f       	cpi	r25, 0xFF	; 255
 c8c:	09 f4       	brne	.+2      	; 0xc90 <can_get_status+0x20>
 c8e:	90 c0       	rjmp	.+288    	; 0xdb0 <can_get_status+0x140>
 c90:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 c92:	80 81       	ld	r24, Z
 c94:	82 95       	swap	r24
 c96:	80 7f       	andi	r24, 0xF0	; 240
 c98:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    a_status = can_get_mob_status();
 c9c:	0e 94 88 00 	call	0x110	; 0x110 <can_get_mob_status>
 ca0:	18 2f       	mov	r17, r24
    
    switch (a_status)
 ca2:	80 32       	cpi	r24, 0x20	; 32
 ca4:	59 f0       	breq	.+22     	; 0xcbc <can_get_status+0x4c>
 ca6:	20 f4       	brcc	.+8      	; 0xcb0 <can_get_status+0x40>
 ca8:	88 23       	and	r24, r24
 caa:	09 f4       	brne	.+2      	; 0xcae <can_get_status+0x3e>
 cac:	83 c0       	rjmp	.+262    	; 0xdb4 <can_get_status+0x144>
 cae:	72 c0       	rjmp	.+228    	; 0xd94 <can_get_status+0x124>
 cb0:	80 34       	cpi	r24, 0x40	; 64
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <can_get_status+0x46>
 cb4:	64 c0       	rjmp	.+200    	; 0xd7e <can_get_status+0x10e>
 cb6:	80 3a       	cpi	r24, 0xA0	; 160
 cb8:	09 f0       	breq	.+2      	; 0xcbc <can_get_status+0x4c>
 cba:	6c c0       	rjmp	.+216    	; 0xd94 <can_get_status+0x124>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
 cbc:	0f 2e       	mov	r0, r31
 cbe:	ff ee       	ldi	r31, 0xEF	; 239
 cc0:	ef 2e       	mov	r14, r31
 cc2:	f1 2c       	mov	r15, r1
 cc4:	f0 2d       	mov	r31, r0
 cc6:	f7 01       	movw	r30, r14
 cc8:	80 81       	ld	r24, Z
 cca:	8f 70       	andi	r24, 0x0F	; 15
 ccc:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
 cce:	8f 81       	ldd	r24, Y+7	; 0x07
 cd0:	98 85       	ldd	r25, Y+8	; 0x08
 cd2:	0e 94 a0 00 	call	0x140	; 0x140 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
 cd6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 cda:	82 fb       	bst	r24, 2
 cdc:	88 27       	eor	r24, r24
 cde:	80 f9       	bld	r24, 0
 ce0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 ce2:	f7 01       	movw	r30, r14
 ce4:	80 81       	ld	r24, Z
 ce6:	84 ff       	sbrs	r24, 4
 ce8:	2d c0       	rjmp	.+90     	; 0xd44 <can_get_status+0xd4>
            {
                cmd->ctrl.ide = 1; // extended frame
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 cee:	e3 ef       	ldi	r30, 0xF3	; 243
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	86 95       	lsr	r24
 cf6:	86 95       	lsr	r24
 cf8:	86 95       	lsr	r24
 cfa:	8d 83       	std	Y+5, r24	; 0x05
 cfc:	a2 ef       	ldi	r26, 0xF2	; 242
 cfe:	b0 e0       	ldi	r27, 0x00	; 0
 d00:	8c 91       	ld	r24, X
 d02:	90 81       	ld	r25, Z
 d04:	86 95       	lsr	r24
 d06:	86 95       	lsr	r24
 d08:	86 95       	lsr	r24
 d0a:	f0 e2       	ldi	r31, 0x20	; 32
 d0c:	9f 9f       	mul	r25, r31
 d0e:	80 0d       	add	r24, r0
 d10:	11 24       	eor	r1, r1
 d12:	8c 83       	std	Y+4, r24	; 0x04
 d14:	e1 ef       	ldi	r30, 0xF1	; 241
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	80 81       	ld	r24, Z
 d1a:	9c 91       	ld	r25, X
 d1c:	86 95       	lsr	r24
 d1e:	86 95       	lsr	r24
 d20:	86 95       	lsr	r24
 d22:	20 e2       	ldi	r18, 0x20	; 32
 d24:	92 9f       	mul	r25, r18
 d26:	80 0d       	add	r24, r0
 d28:	11 24       	eor	r1, r1
 d2a:	8b 83       	std	Y+3, r24	; 0x03
 d2c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 d30:	90 81       	ld	r25, Z
 d32:	86 95       	lsr	r24
 d34:	86 95       	lsr	r24
 d36:	86 95       	lsr	r24
 d38:	e0 e2       	ldi	r30, 0x20	; 32
 d3a:	9e 9f       	mul	r25, r30
 d3c:	80 0d       	add	r24, r0
 d3e:	11 24       	eor	r1, r1
 d40:	8a 83       	std	Y+2, r24	; 0x02
 d42:	13 c0       	rjmp	.+38     	; 0xd6a <can_get_status+0xfa>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 d44:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 d46:	e3 ef       	ldi	r30, 0xF3	; 243
 d48:	f0 e0       	ldi	r31, 0x00	; 0
 d4a:	80 81       	ld	r24, Z
 d4c:	82 95       	swap	r24
 d4e:	86 95       	lsr	r24
 d50:	87 70       	andi	r24, 0x07	; 7
 d52:	8b 83       	std	Y+3, r24	; 0x03
 d54:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 d58:	90 81       	ld	r25, Z
 d5a:	99 0f       	add	r25, r25
 d5c:	99 0f       	add	r25, r25
 d5e:	99 0f       	add	r25, r25
 d60:	82 95       	swap	r24
 d62:	86 95       	lsr	r24
 d64:	87 70       	andi	r24, 0x07	; 7
 d66:	89 0f       	add	r24, r25
 d68:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 d6a:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 d6c:	ef ee       	ldi	r30, 0xEF	; 239
 d6e:	f0 e0       	ldi	r31, 0x00	; 0
 d70:	80 81       	ld	r24, Z
 d72:	8f 73       	andi	r24, 0x3F	; 63
 d74:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d76:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_COMPLETED;
 d7a:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d7c:	1c c0       	rjmp	.+56     	; 0xdb6 <can_get_status+0x146>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 d7e:	80 e4       	ldi	r24, 0x40	; 64
 d80:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
 d82:	ef ee       	ldi	r30, 0xEF	; 239
 d84:	f0 e0       	ldi	r31, 0x00	; 0
 d86:	80 81       	ld	r24, Z
 d88:	8f 73       	andi	r24, 0x3F	; 63
 d8a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d8c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_COMPLETED;
 d90:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d92:	11 c0       	rjmp	.+34     	; 0xdb6 <can_get_status+0x146>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 d94:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 d96:	ef ee       	ldi	r30, 0xEF	; 239
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	80 81       	ld	r24, Z
 d9c:	8f 73       	andi	r24, 0x3F	; 63
 d9e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 da0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_ERROR;
 da4:	82 e0       	ldi	r24, 0x02	; 2
            break;
 da6:	07 c0       	rjmp	.+14     	; 0xdb6 <can_get_status+0x146>
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 da8:	82 e0       	ldi	r24, 0x02	; 2
 daa:	05 c0       	rjmp	.+10     	; 0xdb6 <can_get_status+0x146>
 dac:	82 e0       	ldi	r24, 0x02	; 2
 dae:	03 c0       	rjmp	.+6      	; 0xdb6 <can_get_status+0x146>
 db0:	82 e0       	ldi	r24, 0x02	; 2
 db2:	01 c0       	rjmp	.+2      	; 0xdb6 <can_get_status+0x146>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 db4:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 db6:	df 91       	pop	r29
 db8:	cf 91       	pop	r28
 dba:	1f 91       	pop	r17
 dbc:	ff 90       	pop	r15
 dbe:	ef 90       	pop	r14
 dc0:	08 95       	ret

00000dc2 <main>:
void init_systimer(){

}
	
int main(void)
{
 dc2:	cf 93       	push	r28
 dc4:	df 93       	push	r29
 dc6:	cd b7       	in	r28, 0x3d	; 61
 dc8:	de b7       	in	r29, 0x3e	; 62
 dca:	64 97       	sbiw	r28, 0x14	; 20
 dcc:	0f b6       	in	r0, 0x3f	; 63
 dce:	f8 94       	cli
 dd0:	de bf       	out	0x3e, r29	; 62
 dd2:	0f be       	out	0x3f, r0	; 63
 dd4:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<DDD3);
 dd6:	88 e0       	ldi	r24, 0x08	; 8
 dd8:	8a b9       	out	0x0a, r24	; 10
	
	/*
	* CAN Bus Enable section
	* MUST SET CAN_BAUDRATE in config.h 
	*/	
	Can_reset();						//reset can controller for initialization
 dda:	81 e0       	ldi	r24, 0x01	; 1
 ddc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	can_init(1);						//sets CANBT registers, and enables controller
 de0:	0e 94 cb 00 	call	0x196	; 0x196 <can_init>
	while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
 de4:	e9 ed       	ldi	r30, 0xD9	; 217
 de6:	f0 e0       	ldi	r31, 0x00	; 0
 de8:	80 81       	ld	r24, Z
 dea:	82 ff       	sbrs	r24, 2
 dec:	fd cf       	rjmp	.-6      	; 0xde8 <main+0x26>
	CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	can_clear_all_mob();				//Clear all Mobs
 df4:	0e 94 55 00 	call	0xaa	; 0xaa <can_clear_all_mob>
	////end CAN Bus init

#ifdef DEBUG	
	LINCR = (1<<LENA) | (1<<LCMD2) | (1<<LCMD1) | (1<<LCMD0) | (0<<LCONF1) | (0<<LCONF0);
 df8:	e8 ec       	ldi	r30, 0xC8	; 200
 dfa:	f0 e0       	ldi	r31, 0x00	; 0
 dfc:	8f e0       	ldi	r24, 0x0F	; 15
 dfe:	80 83       	st	Z, r24
	LINCR = 0b00001111;
 e00:	80 83       	st	Z, r24
	LINBRR = 25;
 e02:	ed ec       	ldi	r30, 0xCD	; 205
 e04:	f0 e0       	ldi	r31, 0x00	; 0
 e06:	89 e1       	ldi	r24, 0x19	; 25
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	91 83       	std	Z+1, r25	; 0x01
 e0c:	80 83       	st	Z, r24
	Lin_set_baudrate(CONF_LINBRR);
 e0e:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 e12:	80 83       	st	Z, r24
	
	U8 volatile buffer[8];
	st_cmd_t msg;
	
	//init message as tx
	msg.id.std = 0x123;
 e14:	83 e2       	ldi	r24, 0x23	; 35
 e16:	91 e0       	ldi	r25, 0x01	; 1
 e18:	9c 87       	std	Y+12, r25	; 0x0c
 e1a:	8b 87       	std	Y+11, r24	; 0x0b
	msg.pt_data = &buffer[0];//point msg data to data buffer
 e1c:	ce 01       	movw	r24, r28
 e1e:	01 96       	adiw	r24, 0x01	; 1
 e20:	99 8b       	std	Y+17, r25	; 0x11
 e22:	88 8b       	std	Y+16, r24	; 0x10
	msg.cmd = CMD_TX;
 e24:	81 e0       	ldi	r24, 0x01	; 1
 e26:	8a 87       	std	Y+10, r24	; 0x0a
	msg.dlc = 8;
 e28:	88 e0       	ldi	r24, 0x08	; 8
 e2a:	8f 87       	std	Y+15, r24	; 0x0f
	//adc_init(AVCC_AS_VREF, NO_LEFT_ADJUST, 5);
	//result = adc_single_conversion(5);
			//uart_put_string(i);
				//
		//send can message to MOb
		while(can_cmd(&msg)!= CAN_CMD_ACCEPTED);
 e2c:	ce 01       	movw	r24, r28
 e2e:	09 96       	adiw	r24, 0x09	; 9
 e30:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <can_cmd>
 e34:	81 11       	cpse	r24, r1
 e36:	fa cf       	rjmp	.-12     	; 0xe2c <main+0x6a>
 e38:	09 c0       	rjmp	.+18     	; 0xe4c <main+0x8a>
		//loop until send successful
		while(can_get_status(&msg) != CAN_STATUS_COMPLETED){
			if(can_get_status(&msg) ==  CAN_STATUS_ERROR){
 e3a:	ce 01       	movw	r24, r28
 e3c:	09 96       	adiw	r24, 0x09	; 9
 e3e:	0e 94 38 06 	call	0xc70	; 0xc70 <can_get_status>
 e42:	82 30       	cpi	r24, 0x02	; 2
 e44:	19 f4       	brne	.+6      	; 0xe4c <main+0x8a>
				can_clear_all_mob();
 e46:	0e 94 55 00 	call	0xaa	; 0xaa <can_clear_all_mob>
				break;
 e4a:	06 c0       	rjmp	.+12     	; 0xe58 <main+0x96>
			//uart_put_string(i);
				//
		//send can message to MOb
		while(can_cmd(&msg)!= CAN_CMD_ACCEPTED);
		//loop until send successful
		while(can_get_status(&msg) != CAN_STATUS_COMPLETED){
 e4c:	ce 01       	movw	r24, r28
 e4e:	09 96       	adiw	r24, 0x09	; 9
 e50:	0e 94 38 06 	call	0xc70	; 0xc70 <can_get_status>
 e54:	81 11       	cpse	r24, r1
 e56:	f1 cf       	rjmp	.-30     	; 0xe3a <main+0x78>
			if(can_get_status(&msg) ==  CAN_STATUS_ERROR){
				can_clear_all_mob();
				break;
			}
		}
		buffer[0]++;
 e58:	89 81       	ldd	r24, Y+1	; 0x01
 e5a:	8f 5f       	subi	r24, 0xFF	; 255
 e5c:	89 83       	std	Y+1, r24	; 0x01
		
    }
 e5e:	e6 cf       	rjmp	.-52     	; 0xe2c <main+0x6a>

00000e60 <__tablejump2__>:
 e60:	ee 0f       	add	r30, r30
 e62:	ff 1f       	adc	r31, r31
 e64:	05 90       	lpm	r0, Z+
 e66:	f4 91       	lpm	r31, Z
 e68:	e0 2d       	mov	r30, r0
 e6a:	09 94       	ijmp

00000e6c <_exit>:
 e6c:	f8 94       	cli

00000e6e <__stop_program>:
 e6e:	ff cf       	rjmp	.-2      	; 0xe6e <__stop_program>
