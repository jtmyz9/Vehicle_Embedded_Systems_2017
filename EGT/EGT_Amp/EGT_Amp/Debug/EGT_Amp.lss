
EGT_Amp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b20  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5d  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053e  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 ef       	ldi	r30, 0xF2	; 242
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  a2:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <uart_put_string>:
LINBRRL = (unsigned char) ((unsigned short)br); }

#define Lin_set_data(data) ( LINDAT = data )

void uart_put_string (unsigned char *data_string)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	while(*data_string++){ 
  ae:	fc 01       	movw	r30, r24
  b0:	31 96       	adiw	r30, 0x01	; 1
  b2:	dc 01       	movw	r26, r24
  b4:	8c 91       	ld	r24, X
  b6:	88 23       	and	r24, r24
  b8:	41 f0       	breq	.+16     	; 0xca <uart_put_string+0x20>
		Lin_set_data(*data_string);
  ba:	c2 ed       	ldi	r28, 0xD2	; 210
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	df 01       	movw	r26, r30
  c0:	81 91       	ld	r24, Z+
  c2:	88 83       	st	Y, r24

#define Lin_set_data(data) ( LINDAT = data )

void uart_put_string (unsigned char *data_string)
{
	while(*data_string++){ 
  c4:	8c 91       	ld	r24, X
  c6:	81 11       	cpse	r24, r1
  c8:	fa cf       	rjmp	.-12     	; 0xbe <uart_put_string+0x14>
		Lin_set_data(*data_string);
		//data_string++;
		};
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <main>:

int main(void)
{
	DDRD = (1<<DDD3);
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	8a b9       	out	0x0a, r24	; 10
	
//	LINCR = (1<<LENA) | (1<<LCMD2) | (1<<LCMD1) | (1<<LCMD0) | (0<<LCONF1) | (0<<LCONF0);
	LINCR = 0b00001111;
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	//LINBRR = 25;
	Lin_set_baudrate(CONF_LINBRR);
  da:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  de:	89 e1       	ldi	r24, 0x19	; 25
  e0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
//	U16 result =-1;
    while (1)
    {
//		adc_init(AVCC_AS_VREF, NO_LEFT_ADJUST, 5);
//		result = adc_single_conversion(5);
			uart_put_string(i);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <uart_put_string>
				
		
		
    }
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <main+0x14>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
